
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000058c  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007c  0080007c  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001423  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000931  00000000  00000000  00001bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc7  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  0000325c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e63  00000000  00000000  000037ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_enuSetPinDirection+0x6>
  96:	67 c0       	rjmp	.+206    	; 0x166 <DIO_enuSetPinDirection+0xd4>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_enuSetPinDirection+0xc>
  9c:	66 c0       	rjmp	.+204    	; 0x16a <DIO_enuSetPinDirection+0xd8>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_enuSetPinDirection+0x12>
  a2:	65 c0       	rjmp	.+202    	; 0x16e <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	e9 f0       	breq	.+58     	; 0xe2 <DIO_enuSetPinDirection+0x50>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_enuSetPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	81 f1       	breq	.+96     	; 0x10e <DIO_enuSetPinDirection+0x7c>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_enuSetPinDirection+0x22>
  b2:	43 c0       	rjmp	.+134    	; 0x13a <DIO_enuSetPinDirection+0xa8>
  b4:	5e c0       	rjmp	.+188    	; 0x172 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	06 2e       	mov	r0, r22
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_enuSetPinDirection+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_enuSetPinDirection+0x2c>
  c6:	80 95       	com	r24
  c8:	2a b3       	in	r18, 0x1a	; 26
  ca:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
  cc:	84 2f       	mov	r24, r20
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_enuSetPinDirection+0x44>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_enuSetPinDirection+0x40>
  da:	82 2b       	or	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  de:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
  e0:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	06 2e       	mov	r0, r22
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_enuSetPinDirection+0x5c>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_enuSetPinDirection+0x58>
  f2:	20 95       	com	r18
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
  f8:	84 2f       	mov	r24, r20
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_enuSetPinDirection+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_enuSetPinDirection+0x6c>
 106:	82 2b       	or	r24, r18
 108:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 10a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 10c:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	06 2e       	mov	r0, r22
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_enuSetPinDirection+0x88>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_enuSetPinDirection+0x84>
 11e:	20 95       	com	r18
 120:	84 b3       	in	r24, 0x14	; 20
 122:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 124:	84 2f       	mov	r24, r20
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_enuSetPinDirection+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_enuSetPinDirection+0x98>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 136:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 138:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	06 2e       	mov	r0, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_enuSetPinDirection+0xb4>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_enuSetPinDirection+0xb0>
 14a:	20 95       	com	r18
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 150:	84 2f       	mov	r24, r20
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_enuSetPinDirection+0xc8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_enuSetPinDirection+0xc4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 164:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	08 95       	ret
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	08 95       	ret
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 172:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 174:	08 95       	ret

00000176 <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	08 f0       	brcs	.+2      	; 0x17c <DIO_enuSetPinVal+0x6>
 17a:	67 c0       	rjmp	.+206    	; 0x24a <DIO_enuSetPinVal+0xd4>
 17c:	68 30       	cpi	r22, 0x08	; 8
 17e:	08 f0       	brcs	.+2      	; 0x182 <DIO_enuSetPinVal+0xc>
 180:	66 c0       	rjmp	.+204    	; 0x24e <DIO_enuSetPinVal+0xd8>
 182:	42 30       	cpi	r20, 0x02	; 2
 184:	08 f0       	brcs	.+2      	; 0x188 <DIO_enuSetPinVal+0x12>
 186:	65 c0       	rjmp	.+202    	; 0x252 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	e9 f0       	breq	.+58     	; 0x1c6 <DIO_enuSetPinVal+0x50>
 18c:	30 f0       	brcs	.+12     	; 0x19a <DIO_enuSetPinVal+0x24>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	81 f1       	breq	.+96     	; 0x1f2 <DIO_enuSetPinVal+0x7c>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_enuSetPinVal+0x22>
 196:	43 c0       	rjmp	.+134    	; 0x21e <DIO_enuSetPinVal+0xa8>
 198:	5e c0       	rjmp	.+188    	; 0x256 <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	06 2e       	mov	r0, r22
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_enuSetPinVal+0x30>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_enuSetPinVal+0x2c>
 1aa:	80 95       	com	r24
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 1b0:	84 2f       	mov	r24, r20
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_enuSetPinVal+0x44>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_enuSetPinVal+0x40>
 1be:	82 2b       	or	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1c4:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	06 2e       	mov	r0, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_enuSetPinVal+0x5c>
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_enuSetPinVal+0x58>
 1d6:	20 95       	com	r18
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 1dc:	84 2f       	mov	r24, r20
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_enuSetPinVal+0x70>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_enuSetPinVal+0x6c>
 1ea:	82 2b       	or	r24, r18
 1ec:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1f0:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	06 2e       	mov	r0, r22
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_enuSetPinVal+0x88>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_enuSetPinVal+0x84>
 202:	20 95       	com	r18
 204:	85 b3       	in	r24, 0x15	; 21
 206:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 208:	84 2f       	mov	r24, r20
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_enuSetPinVal+0x9c>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_enuSetPinVal+0x98>
 216:	82 2b       	or	r24, r18
 218:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 21a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 21c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	06 2e       	mov	r0, r22
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_enuSetPinVal+0xb4>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_enuSetPinVal+0xb0>
 22e:	20 95       	com	r18
 230:	82 b3       	in	r24, 0x12	; 18
 232:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 234:	84 2f       	mov	r24, r20
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_enuSetPinVal+0xc8>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_enuSetPinVal+0xc4>
 242:	82 2b       	or	r24, r18
 244:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 248:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	08 95       	ret
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	08 95       	ret
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 258:	08 95       	ret

0000025a <LCD_vidTrigger_LATCH>:
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	62 e0       	ldi	r22, 0x02	; 2
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 264:	83 ec       	ldi	r24, 0xC3	; 195
 266:	99 e0       	ldi	r25, 0x09	; 9
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_vidTrigger_LATCH+0xe>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_vidTrigger_LATCH+0x14>
 26e:	00 00       	nop
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 27a:	08 95       	ret

0000027c <LCD_enuLatch>:
 27c:	cf 93       	push	r28
 27e:	c8 2f       	mov	r28, r24
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 28a:	81 11       	cpse	r24, r1
 28c:	51 c0       	rjmp	.+162    	; 0x330 <LCD_enuLatch+0xb4>
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 296:	81 11       	cpse	r24, r1
 298:	4b c0       	rjmp	.+150    	; 0x330 <LCD_enuLatch+0xb4>
 29a:	4c 2f       	mov	r20, r28
 29c:	44 1f       	adc	r20, r20
 29e:	44 27       	eor	r20, r20
 2a0:	44 1f       	adc	r20, r20
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 2aa:	81 11       	cpse	r24, r1
 2ac:	41 c0       	rjmp	.+130    	; 0x330 <LCD_enuLatch+0xb4>
 2ae:	c6 fb       	bst	r28, 6
 2b0:	44 27       	eor	r20, r20
 2b2:	40 f9       	bld	r20, 0
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 2bc:	81 11       	cpse	r24, r1
 2be:	38 c0       	rjmp	.+112    	; 0x330 <LCD_enuLatch+0xb4>
 2c0:	c5 fb       	bst	r28, 5
 2c2:	44 27       	eor	r20, r20
 2c4:	40 f9       	bld	r20, 0
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 2ce:	81 11       	cpse	r24, r1
 2d0:	2f c0       	rjmp	.+94     	; 0x330 <LCD_enuLatch+0xb4>
 2d2:	c4 fb       	bst	r28, 4
 2d4:	44 27       	eor	r20, r20
 2d6:	40 f9       	bld	r20, 0
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 2e0:	81 11       	cpse	r24, r1
 2e2:	26 c0       	rjmp	.+76     	; 0x330 <LCD_enuLatch+0xb4>
 2e4:	c3 fb       	bst	r28, 3
 2e6:	44 27       	eor	r20, r20
 2e8:	40 f9       	bld	r20, 0
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 2f2:	81 11       	cpse	r24, r1
 2f4:	1d c0       	rjmp	.+58     	; 0x330 <LCD_enuLatch+0xb4>
 2f6:	c2 fb       	bst	r28, 2
 2f8:	44 27       	eor	r20, r20
 2fa:	40 f9       	bld	r20, 0
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 304:	81 11       	cpse	r24, r1
 306:	14 c0       	rjmp	.+40     	; 0x330 <LCD_enuLatch+0xb4>
 308:	c1 fb       	bst	r28, 1
 30a:	44 27       	eor	r20, r20
 30c:	40 f9       	bld	r20, 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 316:	81 11       	cpse	r24, r1
 318:	0b c0       	rjmp	.+22     	; 0x330 <LCD_enuLatch+0xb4>
 31a:	4c 2f       	mov	r20, r28
 31c:	41 70       	andi	r20, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 326:	81 11       	cpse	r24, r1
 328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_enuLatch+0xb4>
 32a:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_vidTrigger_LATCH>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <LCD_inlenuSendCommand>:
 334:	cf 93       	push	r28
 336:	c8 2f       	mov	r28, r24
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
 342:	81 11       	cpse	r24, r1
 344:	03 c0       	rjmp	.+6      	; 0x34c <LCD_inlenuSendCommand+0x18>
 346:	8c 2f       	mov	r24, r28
 348:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <LCD_enuInit>:
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 35a:	81 11       	cpse	r24, r1
 35c:	77 c0       	rjmp	.+238    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 366:	81 11       	cpse	r24, r1
 368:	71 c0       	rjmp	.+226    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 372:	81 11       	cpse	r24, r1
 374:	6b c0       	rjmp	.+214    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	67 e0       	ldi	r22, 0x07	; 7
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 380:	81 11       	cpse	r24, r1
 382:	64 c0       	rjmp	.+200    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	66 e0       	ldi	r22, 0x06	; 6
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 38e:	81 11       	cpse	r24, r1
 390:	5d c0       	rjmp	.+186    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 39c:	81 11       	cpse	r24, r1
 39e:	56 c0       	rjmp	.+172    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 3aa:	81 11       	cpse	r24, r1
 3ac:	4f c0       	rjmp	.+158    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3ae:	8d e2       	ldi	r24, 0x2D	; 45
 3b0:	92 e2       	ldi	r25, 0x22	; 34
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_enuInit+0x62>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_enuInit+0x68>
 3b8:	00 00       	nop
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 3c4:	81 11       	cpse	r24, r1
 3c6:	42 c0       	rjmp	.+132    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 3d2:	81 11       	cpse	r24, r1
 3d4:	3b c0       	rjmp	.+118    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 3e0:	81 11       	cpse	r24, r1
 3e2:	34 c0       	rjmp	.+104    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuSetPinDirection>
 3ee:	81 11       	cpse	r24, r1
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3f2:	88 e3       	ldi	r24, 0x38	; 56
 3f4:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_inlenuSendCommand>
 3f8:	81 11       	cpse	r24, r1
 3fa:	28 c0       	rjmp	.+80     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3fc:	89 ef       	ldi	r24, 0xF9	; 249
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	8f e0       	ldi	r24, 0x0F	; 15
 40a:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_inlenuSendCommand>
 40e:	81 11       	cpse	r24, r1
 410:	1d c0       	rjmp	.+58     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 412:	89 ef       	ldi	r24, 0xF9	; 249
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_inlenuSendCommand>
 424:	81 11       	cpse	r24, r1
 426:	12 c0       	rjmp	.+36     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 428:	83 ef       	ldi	r24, 0xF3	; 243
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_inlenuSendCommand>
 43a:	81 11       	cpse	r24, r1
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 43e:	89 ef       	ldi	r24, 0xF9	; 249
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret

0000044e <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
 44e:	cf 93       	push	r28
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8Position >= 0 && Copy_u8Position < 32)
 450:	60 32       	cpi	r22, 0x20	; 32
 452:	f0 f4       	brcc	.+60     	; 0x490 <LCD_enuGoToPosition+0x42>
	{
		if(Copy_u8Line == LCD_FIRST_LINE)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	69 f4       	brne	.+26     	; 0x472 <LCD_enuGoToPosition+0x24>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
 458:	c0 e8       	ldi	r28, 0x80	; 128
 45a:	c6 0f       	add	r28, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
 466:	81 11       	cpse	r24, r1
 468:	16 c0       	rjmp	.+44     	; 0x496 <LCD_enuGoToPosition+0x48>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
 46a:	8c 2f       	mov	r24, r28
 46c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
 470:	12 c0       	rjmp	.+36     	; 0x496 <LCD_enuGoToPosition+0x48>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
			if(Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
		}
		else if(Copy_u8Line == LCD_SECOND_LINE)
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	79 f4       	brne	.+30     	; 0x494 <LCD_enuGoToPosition+0x46>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
 476:	c0 ec       	ldi	r28, 0xC0	; 192
 478:	c6 0f       	add	r28, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
 484:	81 11       	cpse	r24, r1
 486:	07 c0       	rjmp	.+14     	; 0x496 <LCD_enuGoToPosition+0x48>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
 488:	8c 2f       	mov	r24, r28
 48a:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
 48e:	03 c0       	rjmp	.+6      	; 0x496 <LCD_enuGoToPosition+0x48>
				return Local_enuErrorState;
		}
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	01 c0       	rjmp	.+2      	; 0x496 <LCD_enuGoToPosition+0x48>
 494:	80 e0       	ldi	r24, 0x00	; 0
}
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <LCD_vidCheckPosition>:
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
	if(LCD_u8PosCounter == 16)
 49a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 49e:	80 31       	cpi	r24, 0x10	; 16
 4a0:	51 f4       	brne	.+20     	; 0x4b6 <LCD_vidCheckPosition+0x1c>
	{
		LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
 4aa:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 4b4:	08 95       	ret
	}
	else if(LCD_u8PosCounter == 32)
 4b6:	80 32       	cpi	r24, 0x20	; 32
 4b8:	89 f4       	brne	.+34     	; 0x4dc <LCD_vidCheckPosition+0x42>
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
 4c4:	81 11       	cpse	r24, r1
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <LCD_vidCheckPosition+0x34>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
		LCD_u8PosCounter++;
	}
	else if(LCD_u8PosCounter == 32)
	{
		LCD_inlenuSendCommand(LCD_Clear_Display);
		LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
 4d6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
 4da:	08 95       	ret
	}
	else
	{
		LCD_u8PosCounter++;
 4dc:	8f 5f       	subi	r24, 0xFF	; 255
 4de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 4e2:	08 95       	ret

000004e4 <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
 4e8:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
 4f6:	81 11       	cpse	r24, r1
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <LCD_enuDisplayChar+0x1c>
		return Local_enuErrorState;
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
 4fa:	8c 2f       	mov	r24, r28
 4fc:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <LCD_vidClearScreen>:
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
 50e:	81 11       	cpse	r24, r1
 510:	03 c0       	rjmp	.+6      	; 0x518 <LCD_vidClearScreen+0x14>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_enuLatch>
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
	LCD_inlenuSendCommand(LCD_Clear_Display);
	LCD_u8PosCounter = 0;
 518:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
 51c:	08 95       	ret

0000051e <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
 524:	89 2b       	or	r24, r25
 526:	39 f4       	brne	.+14     	; 0x536 <LCD_enuWriteString+0x18>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	08 c0       	rjmp	.+16     	; 0x53c <LCD_enuWriteString+0x1e>
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
 52c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_enuDisplayChar>
			if(Local_enuErrorState != ES_OK)
 530:	81 11       	cpse	r24, r1
 532:	04 c0       	rjmp	.+8      	; 0x53c <LCD_enuWriteString+0x1e>
				return Local_enuErrorState;
			Copy_pu8Str++;
 534:	21 96       	adiw	r28, 0x01	; 1
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
 536:	88 81       	ld	r24, Y
 538:	81 11       	cpse	r24, r1
 53a:	f8 cf       	rjmp	.-16     	; 0x52c <LCD_enuWriteString+0xe>
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <main>:


int main(void)
{
	ES_t error = ES_NOK;
	error = LCD_enuInit();
 542:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_enuInit>
	
	if(error == ES_OK)
 546:	81 11       	cpse	r24, r1
 548:	1e c0       	rjmp	.+60     	; 0x586 <main+0x44>
	{
		LCD_enuWriteString("Mostafa Edrees");
 54a:	80 e6       	ldi	r24, 0x60	; 96
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 552:	2f eb       	ldi	r18, 0xBF	; 191
 554:	87 e2       	ldi	r24, 0x27	; 39
 556:	99 e0       	ldi	r25, 0x09	; 9
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x16>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x20>
 562:	00 00       	nop
		_delay_ms(3000);
		LCD_vidClearScreen();
 564:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidClearScreen>
		LCD_enuWriteString("CAT Reloaded");
 568:	8f e6       	ldi	r24, 0x6F	; 111
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuWriteString>
 570:	2f eb       	ldi	r18, 0xBF	; 191
 572:	87 e2       	ldi	r24, 0x27	; 39
 574:	99 e0       	ldi	r25, 0x09	; 9
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <main+0x34>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x3e>
 580:	00 00       	nop
		_delay_ms(3000);
		LCD_vidClearScreen();
 582:	0e 94 82 02 	call	0x504	; 0x504 <LCD_vidClearScreen>
 586:	ff cf       	rjmp	.-2      	; 0x586 <main+0x44>

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
