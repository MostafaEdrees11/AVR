
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b8  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac9  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001188  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00003c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a11  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015eb  00000000  00000000  00004be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_1>
   8:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_2>
   c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_10>
  2c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	DIO_enuTogPinVal(DIO_u8PORTA, DIO_u8PIN2);
}

int main(void)
{
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN2, DIO_u8LOW);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_enuSetPinVal>
	
	TIMER0_enuInit();
  a6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <TIMER0_enuInit>
	TIMER0_enuEnableCTCInterrupt();
	TIMER0_enuSetCALLBACK_CTC(Tog,NULL);*/
	
	/*GIE_enuGloable_Interrupt_Enable();*/
	
	DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN3,DIO_u8OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_enuSetPinDirection>
	
	TIMER0_enuGeneratePWM(80);
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	0e 94 16 02 	call	0x42c	; 0x42c <TIMER0_enuGeneratePWM>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x28>

000000bc <__vector_16>:
	}
	return Local_enuErrorState;
}

ISR(VECT_ADC)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	if(ADC_PFuncISRFunc != NULL)
  de:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ADC_PFuncISRFunc>
  e2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ADC_PFuncISRFunc+0x1>
  e6:	30 97       	sbiw	r30, 0x00	; 0
  e8:	29 f0       	breq	.+10     	; 0xf4 <__vector_16+0x38>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	09 95       	icall
	}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_enuSetPinDirection+0x6>
 11a:	67 c0       	rjmp	.+206    	; 0x1ea <DIO_enuSetPinDirection+0xd4>
 11c:	68 30       	cpi	r22, 0x08	; 8
 11e:	08 f0       	brcs	.+2      	; 0x122 <DIO_enuSetPinDirection+0xc>
 120:	66 c0       	rjmp	.+204    	; 0x1ee <DIO_enuSetPinDirection+0xd8>
 122:	42 30       	cpi	r20, 0x02	; 2
 124:	08 f0       	brcs	.+2      	; 0x128 <DIO_enuSetPinDirection+0x12>
 126:	65 c0       	rjmp	.+202    	; 0x1f2 <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	e9 f0       	breq	.+58     	; 0x166 <DIO_enuSetPinDirection+0x50>
 12c:	30 f0       	brcs	.+12     	; 0x13a <DIO_enuSetPinDirection+0x24>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	81 f1       	breq	.+96     	; 0x192 <DIO_enuSetPinDirection+0x7c>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	09 f4       	brne	.+2      	; 0x138 <DIO_enuSetPinDirection+0x22>
 136:	43 c0       	rjmp	.+134    	; 0x1be <DIO_enuSetPinDirection+0xa8>
 138:	5e c0       	rjmp	.+188    	; 0x1f6 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	06 2e       	mov	r0, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_enuSetPinDirection+0x30>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_enuSetPinDirection+0x2c>
 14a:	80 95       	com	r24
 14c:	2a b3       	in	r18, 0x1a	; 26
 14e:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
 150:	84 2f       	mov	r24, r20
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_enuSetPinDirection+0x44>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_enuSetPinDirection+0x40>
 15e:	82 2b       	or	r24, r18
 160:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 164:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	06 2e       	mov	r0, r22
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_enuSetPinDirection+0x5c>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_enuSetPinDirection+0x58>
 176:	20 95       	com	r18
 178:	87 b3       	in	r24, 0x17	; 23
 17a:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
 17c:	84 2f       	mov	r24, r20
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_enuSetPinDirection+0x70>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_enuSetPinDirection+0x6c>
 18a:	82 2b       	or	r24, r18
 18c:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 18e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 190:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	06 2e       	mov	r0, r22
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_enuSetPinDirection+0x88>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_enuSetPinDirection+0x84>
 1a2:	20 95       	com	r18
 1a4:	84 b3       	in	r24, 0x14	; 20
 1a6:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 1a8:	84 2f       	mov	r24, r20
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_enuSetPinDirection+0x9c>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_enuSetPinDirection+0x98>
 1b6:	82 2b       	or	r24, r18
 1b8:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1bc:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	06 2e       	mov	r0, r22
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_enuSetPinDirection+0xb4>
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_enuSetPinDirection+0xb0>
 1ce:	20 95       	com	r18
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 1d4:	84 2f       	mov	r24, r20
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_enuSetPinDirection+0xc8>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_enuSetPinDirection+0xc4>
 1e2:	82 2b       	or	r24, r18
 1e4:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1e8:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	08 95       	ret
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	08 95       	ret
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 1f8:	08 95       	ret

000001fa <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 1fa:	84 30       	cpi	r24, 0x04	; 4
 1fc:	08 f0       	brcs	.+2      	; 0x200 <DIO_enuSetPinVal+0x6>
 1fe:	67 c0       	rjmp	.+206    	; 0x2ce <DIO_enuSetPinVal+0xd4>
 200:	68 30       	cpi	r22, 0x08	; 8
 202:	08 f0       	brcs	.+2      	; 0x206 <DIO_enuSetPinVal+0xc>
 204:	66 c0       	rjmp	.+204    	; 0x2d2 <DIO_enuSetPinVal+0xd8>
 206:	42 30       	cpi	r20, 0x02	; 2
 208:	08 f0       	brcs	.+2      	; 0x20c <DIO_enuSetPinVal+0x12>
 20a:	65 c0       	rjmp	.+202    	; 0x2d6 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	e9 f0       	breq	.+58     	; 0x24a <DIO_enuSetPinVal+0x50>
 210:	30 f0       	brcs	.+12     	; 0x21e <DIO_enuSetPinVal+0x24>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	81 f1       	breq	.+96     	; 0x276 <DIO_enuSetPinVal+0x7c>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	09 f4       	brne	.+2      	; 0x21c <DIO_enuSetPinVal+0x22>
 21a:	43 c0       	rjmp	.+134    	; 0x2a2 <DIO_enuSetPinVal+0xa8>
 21c:	5e c0       	rjmp	.+188    	; 0x2da <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	06 2e       	mov	r0, r22
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_enuSetPinVal+0x30>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_enuSetPinVal+0x2c>
 22e:	80 95       	com	r24
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 234:	84 2f       	mov	r24, r20
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_enuSetPinVal+0x44>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_enuSetPinVal+0x40>
 242:	82 2b       	or	r24, r18
 244:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 248:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	06 2e       	mov	r0, r22
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_enuSetPinVal+0x5c>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_enuSetPinVal+0x58>
 25a:	20 95       	com	r18
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 260:	84 2f       	mov	r24, r20
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_enuSetPinVal+0x70>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_enuSetPinVal+0x6c>
 26e:	82 2b       	or	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 272:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 274:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	06 2e       	mov	r0, r22
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_enuSetPinVal+0x88>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_enuSetPinVal+0x84>
 286:	20 95       	com	r18
 288:	85 b3       	in	r24, 0x15	; 21
 28a:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 28c:	84 2f       	mov	r24, r20
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_enuSetPinVal+0x9c>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_enuSetPinVal+0x98>
 29a:	82 2b       	or	r24, r18
 29c:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 29e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 2a0:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	06 2e       	mov	r0, r22
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_enuSetPinVal+0xb4>
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_enuSetPinVal+0xb0>
 2b2:	20 95       	com	r18
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 2b8:	84 2f       	mov	r24, r20
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_enuSetPinVal+0xc8>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_enuSetPinVal+0xc4>
 2c6:	82 2b       	or	r24, r18
 2c8:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 2cc:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	08 95       	ret
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	08 95       	ret
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 2da:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 2dc:	08 95       	ret

000002de <__vector_1>:
	return Local_enuErrorState;
}

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI0] != NULL)
 300:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <EXTI_APFunc>
 304:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <EXTI_APFunc+0x1>
 308:	30 97       	sbiw	r30, 0x00	; 0
 30a:	29 f0       	breq	.+10     	; 0x316 <__vector_1+0x38>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
 30c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI_APvidGenericParameters>
 310:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI_APvidGenericParameters+0x1>
 314:	09 95       	icall
	}
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI1] != NULL)
 35a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <EXTI_APFunc+0x2>
 35e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <EXTI_APFunc+0x3>
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	29 f0       	breq	.+10     	; 0x370 <__vector_2+0x38>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
 366:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <EXTI_APvidGenericParameters+0x2>
 36a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <EXTI_APvidGenericParameters+0x3>
 36e:	09 95       	icall
	}
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI2] != NULL)
 3b4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXTI_APFunc+0x4>
 3b8:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXTI_APFunc+0x5>
 3bc:	30 97       	sbiw	r30, 0x00	; 0
 3be:	29 f0       	breq	.+10     	; 0x3ca <__vector_3+0x38>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
 3c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <EXTI_APvidGenericParameters+0x4>
 3c4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <EXTI_APvidGenericParameters+0x5>
 3c8:	09 95       	icall
	}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <TIMER0_enuInit>:
	
	TIMSK |= (MASK_BIT << OCIE0);
	Local_enuErrorState = ES_OK;
	
	return Local_enuErrorState;
}
 3ec:	83 b7       	in	r24, 0x33	; 51
 3ee:	87 7b       	andi	r24, 0xB7	; 183
 3f0:	83 bf       	out	0x33, r24	; 51
 3f2:	83 b7       	in	r24, 0x33	; 51
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	83 bf       	out	0x33, r24	; 51
 3f8:	83 b7       	in	r24, 0x33	; 51
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	83 bf       	out	0x33, r24	; 51
 3fe:	83 b7       	in	r24, 0x33	; 51
 400:	88 7f       	andi	r24, 0xF8	; 248
 402:	83 bf       	out	0x33, r24	; 51
 404:	83 b7       	in	r24, 0x33	; 51
 406:	81 60       	ori	r24, 0x01	; 1
 408:	83 bf       	out	0x33, r24	; 51
 40a:	83 b7       	in	r24, 0x33	; 51
 40c:	8d 7f       	andi	r24, 0xFD	; 253
 40e:	83 bf       	out	0x33, r24	; 51
 410:	83 b7       	in	r24, 0x33	; 51
 412:	84 60       	ori	r24, 0x04	; 4
 414:	83 bf       	out	0x33, r24	; 51
 416:	83 b7       	in	r24, 0x33	; 51
 418:	8f 7c       	andi	r24, 0xCF	; 207
 41a:	83 bf       	out	0x33, r24	; 51
 41c:	83 b7       	in	r24, 0x33	; 51
 41e:	8f 7e       	andi	r24, 0xEF	; 239
 420:	83 bf       	out	0x33, r24	; 51
 422:	83 b7       	in	r24, 0x33	; 51
 424:	80 62       	ori	r24, 0x20	; 32
 426:	83 bf       	out	0x33, r24	; 51
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret

0000042c <TIMER0_enuGeneratePWM>:
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	66 27       	eor	r22, r22
 434:	78 2f       	mov	r23, r24
 436:	89 2f       	mov	r24, r25
 438:	9a 2f       	mov	r25, r26
 43a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatunsisf>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	48 ec       	ldi	r20, 0xC8	; 200
 444:	52 e4       	ldi	r21, 0x42	; 66
 446:	0e 94 bb 02 	call	0x576	; 0x576 <__divsf3>
 44a:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <TIMER0_f32OC0Value>
 44e:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <TIMER0_f32OC0Value+0x1>
 452:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <TIMER0_f32OC0Value+0x2>
 456:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <TIMER0_f32OC0Value+0x3>
 45a:	0e 94 2d 03 	call	0x65a	; 0x65a <__fixunssfsi>
 45e:	6c bf       	out	0x3c, r22	; 60
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret

00000464 <__vector_11>:

ISR(VECT_TIMER0_OVF)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	if(TIMER0_PFunISRfun_OVF != NULL)
 486:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <TIMER0_PFunISRfun_OVF>
 48a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <TIMER0_PFunISRfun_OVF+0x1>
 48e:	89 2b       	or	r24, r25
 490:	a1 f1       	breq	.+104    	; 0x4fa <__vector_11+0x96>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
 492:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Local_u32Counter.1659>
 496:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Local_u32Counter.1659+0x1>
 49a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <Local_u32Counter.1659+0x2>
 49e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <Local_u32Counter.1659+0x3>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	a1 1d       	adc	r26, r1
 4a6:	b1 1d       	adc	r27, r1
 4a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Local_u32Counter.1659>
 4ac:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Local_u32Counter.1659+0x1>
 4b0:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <Local_u32Counter.1659+0x2>
 4b4:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <Local_u32Counter.1659+0x3>
		if(Local_u32Counter == TIMER0_NUM_OVF)
 4b8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <TIMER0_NUM_OVF>
 4bc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <TIMER0_NUM_OVF+0x1>
 4c0:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <TIMER0_NUM_OVF+0x2>
 4c4:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <TIMER0_NUM_OVF+0x3>
 4c8:	84 17       	cp	r24, r20
 4ca:	95 07       	cpc	r25, r21
 4cc:	a6 07       	cpc	r26, r22
 4ce:	b7 07       	cpc	r27, r23
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <__vector_11+0x96>
		{
			TCNT0 = TIMER0_PRELOAD;
 4d2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER0_PRELOAD>
 4d6:	82 bf       	out	0x32, r24	; 50
			TIMER0_PFunISRfun_OVF((void *)TIMER0_PvidISRparameter_OVF);
 4d8:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <TIMER0_PFunISRfun_OVF>
 4dc:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <TIMER0_PFunISRfun_OVF+0x1>
 4e0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <TIMER0_PvidISRparameter_OVF>
 4e4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <TIMER0_PvidISRparameter_OVF+0x1>
 4e8:	09 95       	icall
			Local_u32Counter = 0;
 4ea:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Local_u32Counter.1659>
 4ee:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Local_u32Counter.1659+0x1>
 4f2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Local_u32Counter.1659+0x2>
 4f6:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Local_u32Counter.1659+0x3>
		}
	}
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	2f 93       	push	r18
 528:	3f 93       	push	r19
 52a:	4f 93       	push	r20
 52c:	5f 93       	push	r21
 52e:	6f 93       	push	r22
 530:	7f 93       	push	r23
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	af 93       	push	r26
 538:	bf 93       	push	r27
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
	if(TIMER0_PFunISRfun_CTC != NULL)
 53e:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <TIMER0_PFunISRfun_CTC>
 542:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <TIMER0_PFunISRfun_CTC+0x1>
 546:	30 97       	sbiw	r30, 0x00	; 0
 548:	29 f0       	breq	.+10     	; 0x554 <__vector_10+0x38>
	{
		TIMER0_PFunISRfun_CTC((void *)TIMER0_PvidISRparameter_CTC);
 54a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <TIMER0_PvidISRparameter_CTC>
 54e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <TIMER0_PvidISRparameter_CTC+0x1>
 552:	09 95       	icall
	}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__divsf3>:
 576:	0e 94 cf 02 	call	0x59e	; 0x59e <__divsf3x>
 57a:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_round>
 57e:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscB>
 582:	58 f0       	brcs	.+22     	; 0x59a <__divsf3+0x24>
 584:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscA>
 588:	40 f0       	brcs	.+16     	; 0x59a <__divsf3+0x24>
 58a:	29 f4       	brne	.+10     	; 0x596 <__divsf3+0x20>
 58c:	5f 3f       	cpi	r21, 0xFF	; 255
 58e:	29 f0       	breq	.+10     	; 0x59a <__divsf3+0x24>
 590:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_inf>
 594:	51 11       	cpse	r21, r1
 596:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>
 59a:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_nan>

0000059e <__divsf3x>:
 59e:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_split3>
 5a2:	68 f3       	brcs	.-38     	; 0x57e <__divsf3+0x8>

000005a4 <__divsf3_pse>:
 5a4:	99 23       	and	r25, r25
 5a6:	b1 f3       	breq	.-20     	; 0x594 <__divsf3+0x1e>
 5a8:	55 23       	and	r21, r21
 5aa:	91 f3       	breq	.-28     	; 0x590 <__divsf3+0x1a>
 5ac:	95 1b       	sub	r25, r21
 5ae:	55 0b       	sbc	r21, r21
 5b0:	bb 27       	eor	r27, r27
 5b2:	aa 27       	eor	r26, r26
 5b4:	62 17       	cp	r22, r18
 5b6:	73 07       	cpc	r23, r19
 5b8:	84 07       	cpc	r24, r20
 5ba:	38 f0       	brcs	.+14     	; 0x5ca <__divsf3_pse+0x26>
 5bc:	9f 5f       	subi	r25, 0xFF	; 255
 5be:	5f 4f       	sbci	r21, 0xFF	; 255
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	44 1f       	adc	r20, r20
 5c6:	aa 1f       	adc	r26, r26
 5c8:	a9 f3       	breq	.-22     	; 0x5b4 <__divsf3_pse+0x10>
 5ca:	35 d0       	rcall	.+106    	; 0x636 <__divsf3_pse+0x92>
 5cc:	0e 2e       	mov	r0, r30
 5ce:	3a f0       	brmi	.+14     	; 0x5de <__divsf3_pse+0x3a>
 5d0:	e0 e8       	ldi	r30, 0x80	; 128
 5d2:	32 d0       	rcall	.+100    	; 0x638 <__divsf3_pse+0x94>
 5d4:	91 50       	subi	r25, 0x01	; 1
 5d6:	50 40       	sbci	r21, 0x00	; 0
 5d8:	e6 95       	lsr	r30
 5da:	00 1c       	adc	r0, r0
 5dc:	ca f7       	brpl	.-14     	; 0x5d0 <__divsf3_pse+0x2c>
 5de:	2b d0       	rcall	.+86     	; 0x636 <__divsf3_pse+0x92>
 5e0:	fe 2f       	mov	r31, r30
 5e2:	29 d0       	rcall	.+82     	; 0x636 <__divsf3_pse+0x92>
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	bb 1f       	adc	r27, r27
 5ec:	26 17       	cp	r18, r22
 5ee:	37 07       	cpc	r19, r23
 5f0:	48 07       	cpc	r20, r24
 5f2:	ab 07       	cpc	r26, r27
 5f4:	b0 e8       	ldi	r27, 0x80	; 128
 5f6:	09 f0       	breq	.+2      	; 0x5fa <__divsf3_pse+0x56>
 5f8:	bb 0b       	sbc	r27, r27
 5fa:	80 2d       	mov	r24, r0
 5fc:	bf 01       	movw	r22, r30
 5fe:	ff 27       	eor	r31, r31
 600:	93 58       	subi	r25, 0x83	; 131
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	3a f0       	brmi	.+14     	; 0x614 <__divsf3_pse+0x70>
 606:	9e 3f       	cpi	r25, 0xFE	; 254
 608:	51 05       	cpc	r21, r1
 60a:	78 f0       	brcs	.+30     	; 0x62a <__divsf3_pse+0x86>
 60c:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_inf>
 610:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	e4 f3       	brlt	.-8      	; 0x610 <__divsf3_pse+0x6c>
 618:	98 3e       	cpi	r25, 0xE8	; 232
 61a:	d4 f3       	brlt	.-12     	; 0x610 <__divsf3_pse+0x6c>
 61c:	86 95       	lsr	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f7 95       	ror	r31
 626:	9f 5f       	subi	r25, 0xFF	; 255
 628:	c9 f7       	brne	.-14     	; 0x61c <__divsf3_pse+0x78>
 62a:	88 0f       	add	r24, r24
 62c:	91 1d       	adc	r25, r1
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret
 636:	e1 e0       	ldi	r30, 0x01	; 1
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	bb 1f       	adc	r27, r27
 640:	62 17       	cp	r22, r18
 642:	73 07       	cpc	r23, r19
 644:	84 07       	cpc	r24, r20
 646:	ba 07       	cpc	r27, r26
 648:	20 f0       	brcs	.+8      	; 0x652 <__divsf3_pse+0xae>
 64a:	62 1b       	sub	r22, r18
 64c:	73 0b       	sbc	r23, r19
 64e:	84 0b       	sbc	r24, r20
 650:	ba 0b       	sbc	r27, r26
 652:	ee 1f       	adc	r30, r30
 654:	88 f7       	brcc	.-30     	; 0x638 <__divsf3_pse+0x94>
 656:	e0 95       	com	r30
 658:	08 95       	ret

0000065a <__fixunssfsi>:
 65a:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_splitA>
 65e:	88 f0       	brcs	.+34     	; 0x682 <__fixunssfsi+0x28>
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	98 f0       	brcs	.+38     	; 0x68a <__fixunssfsi+0x30>
 664:	b9 2f       	mov	r27, r25
 666:	99 27       	eor	r25, r25
 668:	b7 51       	subi	r27, 0x17	; 23
 66a:	b0 f0       	brcs	.+44     	; 0x698 <__fixunssfsi+0x3e>
 66c:	e1 f0       	breq	.+56     	; 0x6a6 <__fixunssfsi+0x4c>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a f0       	brmi	.+6      	; 0x67e <__fixunssfsi+0x24>
 678:	ba 95       	dec	r27
 67a:	c9 f7       	brne	.-14     	; 0x66e <__fixunssfsi+0x14>
 67c:	14 c0       	rjmp	.+40     	; 0x6a6 <__fixunssfsi+0x4c>
 67e:	b1 30       	cpi	r27, 0x01	; 1
 680:	91 f0       	breq	.+36     	; 0x6a6 <__fixunssfsi+0x4c>
 682:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_zero>
 686:	b1 e0       	ldi	r27, 0x01	; 1
 688:	08 95       	ret
 68a:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_zero>
 68e:	67 2f       	mov	r22, r23
 690:	78 2f       	mov	r23, r24
 692:	88 27       	eor	r24, r24
 694:	b8 5f       	subi	r27, 0xF8	; 248
 696:	39 f0       	breq	.+14     	; 0x6a6 <__fixunssfsi+0x4c>
 698:	b9 3f       	cpi	r27, 0xF9	; 249
 69a:	cc f3       	brlt	.-14     	; 0x68e <__fixunssfsi+0x34>
 69c:	86 95       	lsr	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b3 95       	inc	r27
 6a4:	d9 f7       	brne	.-10     	; 0x69c <__fixunssfsi+0x42>
 6a6:	3e f4       	brtc	.+14     	; 0x6b6 <__fixunssfsi+0x5c>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__floatunsisf>:
 6b8:	e8 94       	clt
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__floatsisf+0x12>

000006bc <__floatsisf>:
 6bc:	97 fb       	bst	r25, 7
 6be:	3e f4       	brtc	.+14     	; 0x6ce <__floatsisf+0x12>
 6c0:	90 95       	com	r25
 6c2:	80 95       	com	r24
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	99 23       	and	r25, r25
 6d0:	a9 f0       	breq	.+42     	; 0x6fc <__floatsisf+0x40>
 6d2:	f9 2f       	mov	r31, r25
 6d4:	96 e9       	ldi	r25, 0x96	; 150
 6d6:	bb 27       	eor	r27, r27
 6d8:	93 95       	inc	r25
 6da:	f6 95       	lsr	r31
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f1 11       	cpse	r31, r1
 6e6:	f8 cf       	rjmp	.-16     	; 0x6d8 <__floatsisf+0x1c>
 6e8:	fa f4       	brpl	.+62     	; 0x728 <__floatsisf+0x6c>
 6ea:	bb 0f       	add	r27, r27
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__floatsisf+0x36>
 6ee:	60 ff       	sbrs	r22, 0
 6f0:	1b c0       	rjmp	.+54     	; 0x728 <__floatsisf+0x6c>
 6f2:	6f 5f       	subi	r22, 0xFF	; 255
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <__floatsisf+0x6c>
 6fc:	88 23       	and	r24, r24
 6fe:	11 f0       	breq	.+4      	; 0x704 <__floatsisf+0x48>
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	11 c0       	rjmp	.+34     	; 0x726 <__floatsisf+0x6a>
 704:	77 23       	and	r23, r23
 706:	21 f0       	breq	.+8      	; 0x710 <__floatsisf+0x54>
 708:	9e e8       	ldi	r25, 0x8E	; 142
 70a:	87 2f       	mov	r24, r23
 70c:	76 2f       	mov	r23, r22
 70e:	05 c0       	rjmp	.+10     	; 0x71a <__floatsisf+0x5e>
 710:	66 23       	and	r22, r22
 712:	71 f0       	breq	.+28     	; 0x730 <__floatsisf+0x74>
 714:	96 e8       	ldi	r25, 0x86	; 134
 716:	86 2f       	mov	r24, r22
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	2a f0       	brmi	.+10     	; 0x728 <__floatsisf+0x6c>
 71e:	9a 95       	dec	r25
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	da f7       	brpl	.-10     	; 0x71e <__floatsisf+0x62>
 728:	88 0f       	add	r24, r24
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__fp_inf>:
 732:	97 f9       	bld	r25, 7
 734:	9f 67       	ori	r25, 0x7F	; 127
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	08 95       	ret

0000073e <__fp_nan>:
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	08 95       	ret

00000744 <__fp_pscA>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	09 06       	cpc	r0, r25
 750:	08 95       	ret

00000752 <__fp_pscB>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	12 16       	cp	r1, r18
 758:	13 06       	cpc	r1, r19
 75a:	14 06       	cpc	r1, r20
 75c:	05 06       	cpc	r0, r21
 75e:	08 95       	ret

00000760 <__fp_round>:
 760:	09 2e       	mov	r0, r25
 762:	03 94       	inc	r0
 764:	00 0c       	add	r0, r0
 766:	11 f4       	brne	.+4      	; 0x76c <__fp_round+0xc>
 768:	88 23       	and	r24, r24
 76a:	52 f0       	brmi	.+20     	; 0x780 <__fp_round+0x20>
 76c:	bb 0f       	add	r27, r27
 76e:	40 f4       	brcc	.+16     	; 0x780 <__fp_round+0x20>
 770:	bf 2b       	or	r27, r31
 772:	11 f4       	brne	.+4      	; 0x778 <__fp_round+0x18>
 774:	60 ff       	sbrs	r22, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <__fp_round+0x20>
 778:	6f 5f       	subi	r22, 0xFF	; 255
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__fp_split3>:
 782:	57 fd       	sbrc	r21, 7
 784:	90 58       	subi	r25, 0x80	; 128
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	59 f0       	breq	.+22     	; 0x7a2 <__fp_splitA+0x10>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	71 f0       	breq	.+28     	; 0x7ac <__fp_splitA+0x1a>
 790:	47 95       	ror	r20

00000792 <__fp_splitA>:
 792:	88 0f       	add	r24, r24
 794:	97 fb       	bst	r25, 7
 796:	99 1f       	adc	r25, r25
 798:	61 f0       	breq	.+24     	; 0x7b2 <__fp_splitA+0x20>
 79a:	9f 3f       	cpi	r25, 0xFF	; 255
 79c:	79 f0       	breq	.+30     	; 0x7bc <__fp_splitA+0x2a>
 79e:	87 95       	ror	r24
 7a0:	08 95       	ret
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	f2 cf       	rjmp	.-28     	; 0x790 <__fp_split3+0xe>
 7ac:	46 95       	lsr	r20
 7ae:	f1 df       	rcall	.-30     	; 0x792 <__fp_splitA>
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <__fp_splitA+0x30>
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	f1 cf       	rjmp	.-30     	; 0x79e <__fp_splitA+0xc>
 7bc:	86 95       	lsr	r24
 7be:	71 05       	cpc	r23, r1
 7c0:	61 05       	cpc	r22, r1
 7c2:	08 94       	sec
 7c4:	08 95       	ret

000007c6 <__fp_zero>:
 7c6:	e8 94       	clt

000007c8 <__fp_szero>:
 7c8:	bb 27       	eor	r27, r27
 7ca:	66 27       	eor	r22, r22
 7cc:	77 27       	eor	r23, r23
 7ce:	cb 01       	movw	r24, r22
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <_exit>:
 7d4:	f8 94       	cli

000007d6 <__stop_program>:
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <__stop_program>
