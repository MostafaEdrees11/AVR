
Interrupt_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  0000105a  000010ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800140  00800140  000011ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e9c  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebd  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b12  00000000  00000000  000051cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00006ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb7  00000000  00000000  00007250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000252f  00000000  00000000  00007e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000a336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__vector_1>
       8:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_2>
       c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <main>
      8a:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Player1_Interrupt>:
u8 PLAYER_1_RES, PLAYER_2_RES; 
state MOVING_STATE = start;

void Player1_Interrupt(void *ptr)
{
	MOVING_STATE = right;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
      98:	08 95       	ret

0000009a <Player2_Interrupt>:
}

void Player2_Interrupt(void *ptr)
{
	MOVING_STATE = left;
      9a:	82 e0       	ldi	r24, 0x02	; 2
      9c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
      a0:	08 95       	ret

000000a2 <PING_PONG_vidRoundNum>:
	}
}

static void PING_PONG_vidRoundNum(void)
{
	LCD_vidClearScreen();
      a2:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
	switch(PLAYER_1_RES+PLAYER_2_RES)
      a6:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <PLAYER_1_RES>
      aa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <PLAYER_2_RES>
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	82 0f       	add	r24, r18
      b2:	91 1d       	adc	r25, r1
      b4:	82 30       	cpi	r24, 0x02	; 2
      b6:	91 05       	cpc	r25, r1
      b8:	41 f1       	breq	.+80     	; 0x10a <PING_PONG_vidRoundNum+0x68>
      ba:	2c f4       	brge	.+10     	; 0xc6 <PING_PONG_vidRoundNum+0x24>
      bc:	00 97       	sbiw	r24, 0x00	; 0
      be:	49 f0       	breq	.+18     	; 0xd2 <PING_PONG_vidRoundNum+0x30>
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	a9 f0       	breq	.+42     	; 0xee <PING_PONG_vidRoundNum+0x4c>
      c4:	4f c0       	rjmp	.+158    	; 0x164 <PING_PONG_vidRoundNum+0xc2>
      c6:	83 30       	cpi	r24, 0x03	; 3
      c8:	91 05       	cpc	r25, r1
      ca:	69 f1       	breq	.+90     	; 0x126 <PING_PONG_vidRoundNum+0x84>
      cc:	04 97       	sbiw	r24, 0x04	; 4
      ce:	c9 f1       	breq	.+114    	; 0x142 <PING_PONG_vidRoundNum+0xa0>
      d0:	49 c0       	rjmp	.+146    	; 0x164 <PING_PONG_vidRoundNum+0xc2>
	{
		case 0:
		LCD_enuWriteString("   1st Round   ");
      d2:	8f e8       	ldi	r24, 0x8F	; 143
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	2f e3       	ldi	r18, 0x3F	; 63
      dc:	8d e0       	ldi	r24, 0x0D	; 13
      de:	93 e0       	ldi	r25, 0x03	; 3
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	80 40       	sbci	r24, 0x00	; 0
      e4:	90 40       	sbci	r25, 0x00	; 0
      e6:	e1 f7       	brne	.-8      	; 0xe0 <PING_PONG_vidRoundNum+0x3e>
      e8:	00 c0       	rjmp	.+0      	; 0xea <PING_PONG_vidRoundNum+0x48>
      ea:	00 00       	nop
      ec:	3b c0       	rjmp	.+118    	; 0x164 <PING_PONG_vidRoundNum+0xc2>
		_delay_ms(1000);
		break;
		
		case 1:
		LCD_enuWriteString("   2nd Round   ");
      ee:	8f e9       	ldi	r24, 0x9F	; 159
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
      f6:	2f e3       	ldi	r18, 0x3F	; 63
      f8:	8d e0       	ldi	r24, 0x0D	; 13
      fa:	93 e0       	ldi	r25, 0x03	; 3
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <PING_PONG_vidRoundNum+0x5a>
     104:	00 c0       	rjmp	.+0      	; 0x106 <PING_PONG_vidRoundNum+0x64>
     106:	00 00       	nop
     108:	2d c0       	rjmp	.+90     	; 0x164 <PING_PONG_vidRoundNum+0xc2>
		_delay_ms(1000);
		break;
		
		case 2:
		LCD_enuWriteString("   3rd Round   ");
     10a:	8f ea       	ldi	r24, 0xAF	; 175
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
     112:	2f e3       	ldi	r18, 0x3F	; 63
     114:	8d e0       	ldi	r24, 0x0D	; 13
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	21 50       	subi	r18, 0x01	; 1
     11a:	80 40       	sbci	r24, 0x00	; 0
     11c:	90 40       	sbci	r25, 0x00	; 0
     11e:	e1 f7       	brne	.-8      	; 0x118 <PING_PONG_vidRoundNum+0x76>
     120:	00 c0       	rjmp	.+0      	; 0x122 <PING_PONG_vidRoundNum+0x80>
     122:	00 00       	nop
     124:	1f c0       	rjmp	.+62     	; 0x164 <PING_PONG_vidRoundNum+0xc2>
		_delay_ms(1000);
		break;
		
		case 3:
		LCD_enuWriteString("   4th Round   ");
     126:	8f eb       	ldi	r24, 0xBF	; 191
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
     12e:	2f e3       	ldi	r18, 0x3F	; 63
     130:	8d e0       	ldi	r24, 0x0D	; 13
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	21 50       	subi	r18, 0x01	; 1
     136:	80 40       	sbci	r24, 0x00	; 0
     138:	90 40       	sbci	r25, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <PING_PONG_vidRoundNum+0x92>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <PING_PONG_vidRoundNum+0x9c>
     13e:	00 00       	nop
     140:	11 c0       	rjmp	.+34     	; 0x164 <PING_PONG_vidRoundNum+0xc2>
		_delay_ms(1000);
		break;
		
		case 4:
		LCD_enuWriteString("   5th Round    ");
     142:	8f ec       	ldi	r24, 0xCF	; 207
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
		LCD_enuWriteString("   Last Round   ");
     14a:	80 ee       	ldi	r24, 0xE0	; 224
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
     152:	2f e3       	ldi	r18, 0x3F	; 63
     154:	8d e0       	ldi	r24, 0x0D	; 13
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	80 40       	sbci	r24, 0x00	; 0
     15c:	90 40       	sbci	r25, 0x00	; 0
     15e:	e1 f7       	brne	.-8      	; 0x158 <PING_PONG_vidRoundNum+0xb6>
     160:	00 c0       	rjmp	.+0      	; 0x162 <PING_PONG_vidRoundNum+0xc0>
     162:	00 00       	nop
		_delay_ms(1000);
		break;
	}
	
	LCD_vidClearScreen();
     164:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
     168:	08 95       	ret

0000016a <PING_PONG_GAME_vidPlayRound>:

static void PING_PONG_GAME_vidPlayRound(void)
{
	while(1)
	{
		if(MOVING_STATE == right)
     16a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	41 f5       	brne	.+80     	; 0x1c2 <PING_PONG_GAME_vidPlayRound+0x58>
		{
			PING_PONG_Ball_Position = 0;
     172:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <PING_PONG_Ball_Position>
			while (1)
			{
				if(MOVING_STATE != right || PING_PONG_Ball_Position >= 16)
     176:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	11 f5       	brne	.+68     	; 0x1c2 <PING_PONG_GAME_vidPlayRound+0x58>
     17e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     182:	80 31       	cpi	r24, 0x10	; 16
     184:	f4 f4       	brge	.+60     	; 0x1c2 <PING_PONG_GAME_vidPlayRound+0x58>
				break;
				
				LCD_vidClearScreen();
     186:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
				LCD_enuGoToPosition(PING_PONG_Ball_Line_Position,PING_PONG_Ball_Position);
     18a:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     18e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <PING_PONG_Ball_Line_Position>
     192:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_enuGoToPosition>
				LCD_enuDisplayChar('0');
     196:	80 e3       	ldi	r24, 0x30	; 48
     198:	0e 94 b9 05 	call	0xb72	; 0xb72 <LCD_enuDisplayChar>
				PING_PONG_Ball_Line_Position = !PING_PONG_Ball_Line_Position;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <PING_PONG_Ball_Line_Position>
     1a2:	91 11       	cpse	r25, r1
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <PING_PONG_Ball_Line_Position>
     1aa:	83 e2       	ldi	r24, 0x23	; 35
     1ac:	94 ef       	ldi	r25, 0xF4	; 244
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <PING_PONG_GAME_vidPlayRound+0x44>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <PING_PONG_GAME_vidPlayRound+0x4a>
     1b4:	00 00       	nop
				_delay_ms(250);
				PING_PONG_Ball_Position++;
     1b6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <PING_PONG_Ball_Position>
			}
     1c0:	da cf       	rjmp	.-76     	; 0x176 <PING_PONG_GAME_vidPlayRound+0xc>
		}
		
		if(MOVING_STATE == left)
     1c2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     1c6:	82 30       	cpi	r24, 0x02	; 2
     1c8:	49 f5       	brne	.+82     	; 0x21c <PING_PONG_GAME_vidPlayRound+0xb2>
		{
			PING_PONG_Ball_Position = 15;
     1ca:	8f e0       	ldi	r24, 0x0F	; 15
     1cc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <PING_PONG_Ball_Position>
			while(1)
			{
				if(MOVING_STATE != left || PING_PONG_Ball_Position < 0)
     1d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	11 f5       	brne	.+68     	; 0x21c <PING_PONG_GAME_vidPlayRound+0xb2>
     1d8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     1dc:	88 23       	and	r24, r24
     1de:	f4 f0       	brlt	.+60     	; 0x21c <PING_PONG_GAME_vidPlayRound+0xb2>
				break;
				LCD_vidClearScreen();
     1e0:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
				LCD_enuGoToPosition(PING_PONG_Ball_Line_Position,PING_PONG_Ball_Position);
     1e4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     1e8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <PING_PONG_Ball_Line_Position>
     1ec:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_enuGoToPosition>
				LCD_enuDisplayChar('0');
     1f0:	80 e3       	ldi	r24, 0x30	; 48
     1f2:	0e 94 b9 05 	call	0xb72	; 0xb72 <LCD_enuDisplayChar>
				PING_PONG_Ball_Line_Position = !PING_PONG_Ball_Line_Position;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <PING_PONG_Ball_Line_Position>
     1fc:	91 11       	cpse	r25, r1
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <PING_PONG_Ball_Line_Position>
     204:	83 e2       	ldi	r24, 0x23	; 35
     206:	94 ef       	ldi	r25, 0xF4	; 244
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <PING_PONG_GAME_vidPlayRound+0x9e>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <PING_PONG_GAME_vidPlayRound+0xa4>
     20e:	00 00       	nop
				_delay_ms(250);
				PING_PONG_Ball_Position--;
     210:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     214:	81 50       	subi	r24, 0x01	; 1
     216:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <PING_PONG_Ball_Position>
			}
     21a:	da cf       	rjmp	.-76     	; 0x1d0 <PING_PONG_GAME_vidPlayRound+0x66>
		}
		
		if(PING_PONG_Ball_Position >= 16 && MOVING_STATE != left)
     21c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PING_PONG_Ball_Position>
     220:	80 31       	cpi	r24, 0x10	; 16
     222:	6c f0       	brlt	.+26     	; 0x23e <PING_PONG_GAME_vidPlayRound+0xd4>
     224:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
     228:	92 30       	cpi	r25, 0x02	; 2
     22a:	49 f0       	breq	.+18     	; 0x23e <PING_PONG_GAME_vidPlayRound+0xd4>
		{
			PLAYER_1_RES++;
     22c:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <PLAYER_1_RES>
     230:	6f 5f       	subi	r22, 0xFF	; 255
     232:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <PLAYER_1_RES>
			Seven_Segment_enuDisplayNumber(0,PLAYER_1_RES);
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	0e 94 b7 02 	call	0x56e	; 0x56e <Seven_Segment_enuDisplayNumber>
			break;
     23c:	08 95       	ret
		}
		else if(PING_PONG_Ball_Position < 0 && MOVING_STATE != right)
     23e:	88 23       	and	r24, r24
     240:	0c f0       	brlt	.+2      	; 0x244 <PING_PONG_GAME_vidPlayRound+0xda>
     242:	93 cf       	rjmp	.-218    	; 0x16a <PING_PONG_GAME_vidPlayRound>
     244:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	09 f4       	brne	.+2      	; 0x24e <PING_PONG_GAME_vidPlayRound+0xe4>
     24c:	8e cf       	rjmp	.-228    	; 0x16a <PING_PONG_GAME_vidPlayRound>
		{
			PLAYER_2_RES++;
     24e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <PLAYER_2_RES>
     252:	6f 5f       	subi	r22, 0xFF	; 255
     254:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <PLAYER_2_RES>
			Seven_Segment_enuDisplayNumber(1,PLAYER_2_RES);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 b7 02 	call	0x56e	; 0x56e <Seven_Segment_enuDisplayNumber>
     25e:	08 95       	ret

00000260 <PING_PONG_GAME_enuInit>:

ES_t PING_PONG_GAME_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULL_UP);
     26a:	41 e0       	ldi	r20, 0x01	; 1
     26c:	62 e0       	ldi	r22, 0x02	; 2
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN3, DIO_u8INPUT);
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	63 e0       	ldi	r22, 0x03	; 3
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PULL_UP);
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	63 e0       	ldi	r22, 0x03	; 3
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	
	LCD_enuInit();
     288:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_enuInit>
	Seven_Segment_enuInit(SEV_SEG_AstrSEGConfig);
     28c:	80 e6       	ldi	r24, 0x60	; 96
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 ac 01 	call	0x358	; 0x358 <Seven_Segment_enuInit>
	LCD_enuSendCommand(LCD_DisplayOn_CursorOff_NoBlinking);
     294:	8c e0       	ldi	r24, 0x0C	; 12
     296:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_enuSendCommand>
	EXTI_enuInit(EXTI_AStrEXTI_Config);
     29a:	86 e8       	ldi	r24, 0x86	; 134
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 d1 06 	call	0xda2	; 0xda2 <EXTI_enuInit>
	EXTI_enuEnable(EXTI0);
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 61 07 	call	0xec2	; 0xec2 <EXTI_enuEnable>
	EXTI_enuEnable(EXTI1);
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 61 07 	call	0xec2	; 0xec2 <EXTI_enuEnable>
	EXTI_enuCallBackFunc(&Player1_Interrupt, NULL, EXTI0);
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	89 e4       	ldi	r24, 0x49	; 73
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 85 07 	call	0xf0a	; 0xf0a <EXTI_enuCallBackFunc>
	EXTI_enuCallBackFunc(&Player2_Interrupt, NULL, EXTI1);
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	8d e4       	ldi	r24, 0x4D	; 77
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 85 07 	call	0xf0a	; 0xf0a <EXTI_enuCallBackFunc>
	
	LCD_enuWriteString("$PING PONG GAME$");
     2ca:	81 ef       	ldi	r24, 0xF1	; 241
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
	Seven_Segment_enuDisplayNumber(0,0);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 b7 02 	call	0x56e	; 0x56e <Seven_Segment_enuDisplayNumber>
	Seven_Segment_enuDisplayNumber(1,0);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 b7 02 	call	0x56e	; 0x56e <Seven_Segment_enuDisplayNumber>
     2e2:	2f e7       	ldi	r18, 0x7F	; 127
     2e4:	8a e1       	ldi	r24, 0x1A	; 26
     2e6:	96 e0       	ldi	r25, 0x06	; 6
     2e8:	21 50       	subi	r18, 0x01	; 1
     2ea:	80 40       	sbci	r24, 0x00	; 0
     2ec:	90 40       	sbci	r25, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <PING_PONG_GAME_enuInit+0x88>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <PING_PONG_GAME_enuInit+0x92>
     2f2:	00 00       	nop
	_delay_ms(2000);
	LCD_vidClearScreen();
     2f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
	
	GIE_enuGloable_Interrupt_Enable();
     2f8:	0e 94 23 08 	call	0x1046	; 0x1046 <GIE_enuGloable_Interrupt_Enable>
	
	return Local_enuErrorState;
}
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	08 95       	ret

00000300 <PING_PONG_GAME_enuStartPlaying>:

ES_t PING_PONG_GAME_enuStartPlaying(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	while(PLAYER_1_RES < 3 && PLAYER_2_RES < 3)
     300:	08 c0       	rjmp	.+16     	; 0x312 <PING_PONG_GAME_enuStartPlaying+0x12>
	{
		MOVING_STATE = start;
     302:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		PING_PONG_Ball_Position = 0;
     306:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <PING_PONG_Ball_Position>
		PING_PONG_vidRoundNum();
     30a:	0e 94 51 00 	call	0xa2	; 0xa2 <PING_PONG_vidRoundNum>
		PING_PONG_GAME_vidPlayRound();
     30e:	0e 94 b5 00 	call	0x16a	; 0x16a <PING_PONG_GAME_vidPlayRound>

ES_t PING_PONG_GAME_enuStartPlaying(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	while(PLAYER_1_RES < 3 && PLAYER_2_RES < 3)
     312:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <PLAYER_1_RES>
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	20 f4       	brcc	.+8      	; 0x322 <PING_PONG_GAME_enuStartPlaying+0x22>
     31a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <PLAYER_2_RES>
     31e:	93 30       	cpi	r25, 0x03	; 3
     320:	80 f3       	brcs	.-32     	; 0x302 <PING_PONG_GAME_enuStartPlaying+0x2>
		PING_PONG_Ball_Position = 0;
		PING_PONG_vidRoundNum();
		PING_PONG_GAME_vidPlayRound();
	}
	
	if(PLAYER_1_RES > PLAYER_2_RES)
     322:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <PLAYER_2_RES>
     326:	98 17       	cp	r25, r24
     328:	58 f4       	brcc	.+22     	; 0x340 <PING_PONG_GAME_enuStartPlaying+0x40>
	{
		LCD_vidClearScreen();
     32a:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
		LCD_enuWriteString("     Winner     ");
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
		LCD_enuWriteString("   Player One   ");
     336:	83 e1       	ldi	r24, 0x13	; 19
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
     33e:	0a c0       	rjmp	.+20     	; 0x354 <PING_PONG_GAME_enuStartPlaying+0x54>
	}
	else
	{
		LCD_vidClearScreen();
     340:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_vidClearScreen>
		LCD_enuWriteString("     Winner     ");
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
		LCD_enuWriteString("   Player Two   ");
     34c:	84 e2       	ldi	r24, 0x24	; 36
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_enuWriteString>
	}
	
	return Local_enuErrorState;
}
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	08 95       	ret

00000358 <Seven_Segment_enuInit>:
#include "Seven_Segment_priv.h"

extern SEG_t SEV_SEG_AstrSEGConfig[SEG_NUM];

ES_t Seven_Segment_enuInit(SEG_t *Copy_pAstrSEG_Config)
{
     358:	3f 92       	push	r3
     35a:	4f 92       	push	r4
     35c:	5f 92       	push	r5
     35e:	6f 92       	push	r6
     360:	7f 92       	push	r7
     362:	8f 92       	push	r8
     364:	9f 92       	push	r9
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
	u8 Local_u8Iterator = 0;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	09 f0       	breq	.+2      	; 0x380 <Seven_Segment_enuInit+0x28>
     37e:	bd c0       	rjmp	.+378    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			Local_enuErrorState = ES_OK;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	e3 c0       	rjmp	.+454    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			Local_u8Iterator_Error = 0;
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APIN, DIO_u8OUTPUT) << Local_u8Iterator_Error);
     384:	e8 01       	movw	r28, r16
     386:	23 e1       	ldi	r18, 0x13	; 19
     388:	32 9e       	mul	r3, r18
     38a:	c0 0d       	add	r28, r0
     38c:	d1 1d       	adc	r29, r1
     38e:	11 24       	eor	r1, r1
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	69 81       	ldd	r22, Y+1	; 0x01
     394:	88 81       	ld	r24, Y
     396:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     39a:	c8 2a       	or	r12, r24
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	6b 81       	ldd	r22, Y+3	; 0x03
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	09 2e       	mov	r0, r25
     3b6:	00 0c       	add	r0, r0
     3b8:	aa 0b       	sbc	r26, r26
     3ba:	bb 0b       	sbc	r27, r27
     3bc:	c8 2a       	or	r12, r24
     3be:	d9 2a       	or	r13, r25
     3c0:	ea 2a       	or	r14, r26
     3c2:	fb 2a       	or	r15, r27
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	6d 81       	ldd	r22, Y+5	; 0x05
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     3ce:	20 e4       	ldi	r18, 0x40	; 64
     3d0:	82 9f       	mul	r24, r18
     3d2:	c0 01       	movw	r24, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	2c 01       	movw	r4, r24
     3d8:	99 0f       	add	r25, r25
     3da:	66 08       	sbc	r6, r6
     3dc:	77 08       	sbc	r7, r7
     3de:	c4 28       	or	r12, r4
     3e0:	d5 28       	or	r13, r5
     3e2:	e6 28       	or	r14, r6
     3e4:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	6f 81       	ldd	r22, Y+7	; 0x07
     3ea:	8e 81       	ldd	r24, Y+6	; 0x06
     3ec:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     3f0:	48 2e       	mov	r4, r24
     3f2:	51 2c       	mov	r5, r1
     3f4:	54 2c       	mov	r5, r4
     3f6:	44 24       	eor	r4, r4
     3f8:	55 0c       	add	r5, r5
     3fa:	05 2c       	mov	r0, r5
     3fc:	00 0c       	add	r0, r0
     3fe:	66 08       	sbc	r6, r6
     400:	77 08       	sbc	r7, r7
     402:	c4 28       	or	r12, r4
     404:	d5 28       	or	r13, r5
     406:	e6 28       	or	r14, r6
     408:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	69 85       	ldd	r22, Y+9	; 0x09
     40e:	88 85       	ldd	r24, Y+8	; 0x08
     410:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     414:	48 2e       	mov	r4, r24
     416:	51 2c       	mov	r5, r1
     418:	54 2c       	mov	r5, r4
     41a:	44 24       	eor	r4, r4
     41c:	55 0c       	add	r5, r5
     41e:	55 0c       	add	r5, r5
     420:	55 0c       	add	r5, r5
     422:	55 0c       	add	r5, r5
     424:	05 2c       	mov	r0, r5
     426:	00 0c       	add	r0, r0
     428:	66 08       	sbc	r6, r6
     42a:	77 08       	sbc	r7, r7
     42c:	4c 28       	or	r4, r12
     42e:	5d 28       	or	r5, r13
     430:	6e 28       	or	r6, r14
     432:	7f 28       	or	r7, r15
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	6b 85       	ldd	r22, Y+11	; 0x0b
     438:	8a 85       	ldd	r24, Y+10	; 0x0a
     43a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     43e:	c8 2e       	mov	r12, r24
     440:	d1 2c       	mov	r13, r1
     442:	dd 24       	eor	r13, r13
     444:	c6 94       	lsr	r12
     446:	d7 94       	ror	r13
     448:	cc 24       	eor	r12, r12
     44a:	0d 2c       	mov	r0, r13
     44c:	00 0c       	add	r0, r0
     44e:	ee 08       	sbc	r14, r14
     450:	ff 08       	sbc	r15, r15
     452:	46 01       	movw	r8, r12
     454:	57 01       	movw	r10, r14
     456:	84 28       	or	r8, r4
     458:	95 28       	or	r9, r5
     45a:	a6 28       	or	r10, r6
     45c:	b7 28       	or	r11, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	6d 85       	ldd	r22, Y+13	; 0x0d
     462:	8c 85       	ldd	r24, Y+12	; 0x0c
     464:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     468:	c8 2e       	mov	r12, r24
     46a:	d1 2c       	mov	r13, r1
     46c:	dd 24       	eor	r13, r13
     46e:	cc 24       	eor	r12, r12
     470:	0d 2c       	mov	r0, r13
     472:	00 0c       	add	r0, r0
     474:	ee 08       	sbc	r14, r14
     476:	ff 08       	sbc	r15, r15
     478:	c8 28       	or	r12, r8
     47a:	d9 28       	or	r13, r9
     47c:	ea 28       	or	r14, r10
     47e:	fb 28       	or	r15, r11
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
     480:	8e 85       	ldd	r24, Y+14	; 0x0e
     482:	8a 30       	cpi	r24, 0x0A	; 10
     484:	b1 f0       	breq	.+44     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     486:	6f 85       	ldd	r22, Y+15	; 0x0f
     488:	6a 30       	cpi	r22, 0x0A	; 10
     48a:	c1 f0       	breq	.+48     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	99 27       	eor	r25, r25
     496:	88 27       	eor	r24, r24
     498:	09 2e       	mov	r0, r25
     49a:	00 0c       	add	r0, r0
     49c:	aa 0b       	sbc	r26, r26
     49e:	bb 0b       	sbc	r27, r27
     4a0:	c8 2a       	or	r12, r24
     4a2:	d9 2a       	or	r13, r25
     4a4:	ea 2a       	or	r14, r26
     4a6:	fb 2a       	or	r15, r27
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f5 e1       	ldi	r31, 0x15	; 21
     4ac:	bf 2e       	mov	r11, r31
     4ae:	f0 2d       	mov	r31, r0
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f2 e1       	ldi	r31, 0x12	; 18
     4b6:	bf 2e       	mov	r11, r31
     4b8:	f0 2d       	mov	r31, r0
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4bc:	0f 2e       	mov	r0, r31
     4be:	f2 e1       	ldi	r31, 0x12	; 18
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN != NOT_CONNECTED)
     4c4:	88 89       	ldd	r24, Y+16	; 0x10
     4c6:	8a 30       	cpi	r24, 0x0A	; 10
     4c8:	b1 f0       	breq	.+44     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4ca:	69 89       	ldd	r22, Y+17	; 0x11
     4cc:	6a 30       	cpi	r22, 0x0A	; 10
     4ce:	99 f0       	breq	.+38     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
     4d6:	23 e0       	ldi	r18, 0x03	; 3
     4d8:	2b 0d       	add	r18, r11
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	2a 95       	dec	r18
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4e6:	09 2e       	mov	r0, r25
     4e8:	00 0c       	add	r0, r0
     4ea:	aa 0b       	sbc	r26, r26
     4ec:	bb 0b       	sbc	r27, r27
     4ee:	c8 2a       	or	r12, r24
     4f0:	d9 2a       	or	r13, r25
     4f2:	ea 2a       	or	r14, r26
     4f4:	fb 2a       	or	r15, r27
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
     4f6:	33 94       	inc	r3
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     4fa:	8c 01       	movw	r16, r24
     4fc:	c1 2c       	mov	r12, r1
     4fe:	d1 2c       	mov	r13, r1
     500:	76 01       	movw	r14, r12
     502:	31 2c       	mov	r3, r1
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	83 15       	cp	r24, r3
     508:	08 f0       	brcs	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     50a:	3c cf       	rjmp	.-392    	; 0x384 <Seven_Segment_enuInit+0x2c>
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	19 c0       	rjmp	.+50     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
     510:	b7 01       	movw	r22, r14
     512:	a6 01       	movw	r20, r12
     514:	08 2e       	mov	r0, r24
     516:	04 c0       	rjmp	.+8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     518:	76 95       	lsr	r23
     51a:	67 95       	ror	r22
     51c:	57 95       	ror	r21
     51e:	47 95       	ror	r20
     520:	0a 94       	dec	r0
     522:	d2 f7       	brpl	.-12     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     524:	47 70       	andi	r20, 0x07	; 7
     526:	55 27       	eor	r21, r21
     528:	66 27       	eor	r22, r22
     52a:	77 27       	eor	r23, r23
     52c:	45 2b       	or	r20, r21
     52e:	46 2b       	or	r20, r22
     530:	47 2b       	or	r20, r23
     532:	51 f4       	brne	.+20     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
     534:	8d 5f       	subi	r24, 0xFD	; 253
     536:	01 c0       	rjmp	.+2      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	80 32       	cpi	r24, 0x20	; 32
     53c:	48 f3       	brcs	.-46     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
     53e:	9f 5f       	subi	r25, 0xFF	; 255
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
				}
			}
			Local_enuErrorState = ES_OK;
     540:	80 e0       	ldi	r24, 0x00	; 0
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
     542:	92 30       	cpi	r25, 0x02	; 2
     544:	c8 f3       	brcs	.-14     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     546:	01 c0       	rjmp	.+2      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
     548:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	7f 90       	pop	r7
     564:	6f 90       	pop	r6
     566:	5f 90       	pop	r5
     568:	4f 90       	pop	r4
     56a:	3f 90       	pop	r3
     56c:	08 95       	ret

0000056e <Seven_Segment_enuDisplayNumber>:

ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
     56e:	4f 92       	push	r4
     570:	5f 92       	push	r5
     572:	6f 92       	push	r6
     574:	7f 92       	push	r7
     576:	8f 92       	push	r8
     578:	9f 92       	push	r9
     57a:	af 92       	push	r10
     57c:	bf 92       	push	r11
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	 
	if(Copy_SEG_ID < SEG_NUM && Copy_u8Number < 10)
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	08 f0       	brcs	.+2      	; 0x594 <Seven_Segment_enuDisplayNumber+0x26>
     592:	6e c1       	rjmp	.+732    	; 0x870 <__stack+0x11>
     594:	6a 30       	cpi	r22, 0x0A	; 10
     596:	08 f0       	brcs	.+2      	; 0x59a <Seven_Segment_enuDisplayNumber+0x2c>
     598:	6d c1       	rjmp	.+730    	; 0x874 <__stack+0x15>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	23 e1       	ldi	r18, 0x13	; 19
     59e:	28 9f       	mul	r18, r24
     5a0:	f0 01       	movw	r30, r0
     5a2:	29 9f       	mul	r18, r25
     5a4:	f0 0d       	add	r31, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	e0 5a       	subi	r30, 0xA0	; 160
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	22 89       	ldd	r18, Z+18	; 0x12
     5ae:	25 30       	cpi	r18, 0x05	; 5
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <Seven_Segment_enuDisplayNumber+0x46>
     5b2:	a8 c0       	rjmp	.+336    	; 0x704 <Seven_Segment_enuDisplayNumber+0x196>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, !((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
     5b4:	e6 2f       	mov	r30, r22
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	eb 5c       	subi	r30, 0xCB	; 203
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	70 80       	ld	r7, Z
     5be:	11 e0       	ldi	r17, 0x01	; 1
     5c0:	47 2d       	mov	r20, r7
     5c2:	41 27       	eor	r20, r17
     5c4:	41 70       	andi	r20, 0x01	; 1
     5c6:	23 e1       	ldi	r18, 0x13	; 19
     5c8:	28 9f       	mul	r18, r24
     5ca:	e0 01       	movw	r28, r0
     5cc:	29 9f       	mul	r18, r25
     5ce:	d0 0d       	add	r29, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	c0 5a       	subi	r28, 0xA0	; 160
     5d4:	df 4f       	sbci	r29, 0xFF	; 255
     5d6:	69 81       	ldd	r22, Y+1	; 0x01
     5d8:	88 81       	ld	r24, Y
     5da:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     5de:	88 2e       	mov	r8, r24
     5e0:	91 2c       	mov	r9, r1
     5e2:	a1 2c       	mov	r10, r1
     5e4:	b1 2c       	mov	r11, r1
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, !((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     5e6:	47 2d       	mov	r20, r7
     5e8:	46 95       	lsr	r20
     5ea:	41 27       	eor	r20, r17
     5ec:	41 70       	andi	r20, 0x01	; 1
     5ee:	6b 81       	ldd	r22, Y+3	; 0x03
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     5f6:	c8 2e       	mov	r12, r24
     5f8:	d1 2c       	mov	r13, r1
     5fa:	cc 0c       	add	r12, r12
     5fc:	dd 1c       	adc	r13, r13
     5fe:	cc 0c       	add	r12, r12
     600:	dd 1c       	adc	r13, r13
     602:	cc 0c       	add	r12, r12
     604:	dd 1c       	adc	r13, r13
     606:	0d 2c       	mov	r0, r13
     608:	00 0c       	add	r0, r0
     60a:	ee 08       	sbc	r14, r14
     60c:	ff 08       	sbc	r15, r15
     60e:	c8 28       	or	r12, r8
     610:	d9 28       	or	r13, r9
     612:	ea 28       	or	r14, r10
     614:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, !((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     616:	47 2d       	mov	r20, r7
     618:	46 95       	lsr	r20
     61a:	46 95       	lsr	r20
     61c:	41 27       	eor	r20, r17
     61e:	41 70       	andi	r20, 0x01	; 1
     620:	6d 81       	ldd	r22, Y+5	; 0x05
     622:	8c 81       	ldd	r24, Y+4	; 0x04
     624:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     628:	20 e4       	ldi	r18, 0x40	; 64
     62a:	82 9f       	mul	r24, r18
     62c:	c0 01       	movw	r24, r0
     62e:	11 24       	eor	r1, r1
     630:	09 2e       	mov	r0, r25
     632:	00 0c       	add	r0, r0
     634:	aa 0b       	sbc	r26, r26
     636:	bb 0b       	sbc	r27, r27
     638:	c8 2a       	or	r12, r24
     63a:	d9 2a       	or	r13, r25
     63c:	ea 2a       	or	r14, r26
     63e:	fb 2a       	or	r15, r27
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, !((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     640:	47 2d       	mov	r20, r7
     642:	46 95       	lsr	r20
     644:	46 95       	lsr	r20
     646:	46 95       	lsr	r20
     648:	41 27       	eor	r20, r17
     64a:	41 70       	andi	r20, 0x01	; 1
     64c:	6f 81       	ldd	r22, Y+7	; 0x07
     64e:	8e 81       	ldd	r24, Y+6	; 0x06
     650:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     654:	88 2e       	mov	r8, r24
     656:	91 2c       	mov	r9, r1
     658:	98 2c       	mov	r9, r8
     65a:	88 24       	eor	r8, r8
     65c:	99 0c       	add	r9, r9
     65e:	09 2c       	mov	r0, r9
     660:	00 0c       	add	r0, r0
     662:	aa 08       	sbc	r10, r10
     664:	bb 08       	sbc	r11, r11
     666:	c8 28       	or	r12, r8
     668:	d9 28       	or	r13, r9
     66a:	ea 28       	or	r14, r10
     66c:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, !((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     66e:	47 2d       	mov	r20, r7
     670:	42 95       	swap	r20
     672:	4f 70       	andi	r20, 0x0F	; 15
     674:	41 27       	eor	r20, r17
     676:	41 70       	andi	r20, 0x01	; 1
     678:	69 85       	ldd	r22, Y+9	; 0x09
     67a:	88 85       	ldd	r24, Y+8	; 0x08
     67c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     680:	88 2e       	mov	r8, r24
     682:	91 2c       	mov	r9, r1
     684:	98 2c       	mov	r9, r8
     686:	88 24       	eor	r8, r8
     688:	99 0c       	add	r9, r9
     68a:	99 0c       	add	r9, r9
     68c:	99 0c       	add	r9, r9
     68e:	99 0c       	add	r9, r9
     690:	c4 01       	movw	r24, r8
     692:	99 0c       	add	r9, r9
     694:	aa 0b       	sbc	r26, r26
     696:	bb 0b       	sbc	r27, r27
     698:	4c 01       	movw	r8, r24
     69a:	5d 01       	movw	r10, r26
     69c:	8c 28       	or	r8, r12
     69e:	9d 28       	or	r9, r13
     6a0:	ae 28       	or	r10, r14
     6a2:	bf 28       	or	r11, r15
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, !((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     6a4:	47 2d       	mov	r20, r7
     6a6:	42 95       	swap	r20
     6a8:	46 95       	lsr	r20
     6aa:	47 70       	andi	r20, 0x07	; 7
     6ac:	41 27       	eor	r20, r17
     6ae:	41 70       	andi	r20, 0x01	; 1
     6b0:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6b4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     6b8:	c8 2e       	mov	r12, r24
     6ba:	d1 2c       	mov	r13, r1
     6bc:	dd 24       	eor	r13, r13
     6be:	c6 94       	lsr	r12
     6c0:	d7 94       	ror	r13
     6c2:	cc 24       	eor	r12, r12
     6c4:	0d 2c       	mov	r0, r13
     6c6:	00 0c       	add	r0, r0
     6c8:	ee 08       	sbc	r14, r14
     6ca:	ff 08       	sbc	r15, r15
     6cc:	c8 28       	or	r12, r8
     6ce:	d9 28       	or	r13, r9
     6d0:	ea 28       	or	r14, r10
     6d2:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, !((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     6d4:	47 2d       	mov	r20, r7
     6d6:	42 95       	swap	r20
     6d8:	46 95       	lsr	r20
     6da:	46 95       	lsr	r20
     6dc:	43 70       	andi	r20, 0x03	; 3
     6de:	41 27       	eor	r20, r17
     6e0:	41 70       	andi	r20, 0x01	; 1
     6e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     6e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6e6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     6ea:	08 2f       	mov	r16, r24
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	11 27       	eor	r17, r17
     6f0:	00 27       	eor	r16, r16
     6f2:	01 2e       	mov	r0, r17
     6f4:	00 0c       	add	r0, r0
     6f6:	22 0b       	sbc	r18, r18
     6f8:	33 0b       	sbc	r19, r19
     6fa:	0c 29       	or	r16, r12
     6fc:	1d 29       	or	r17, r13
     6fe:	2e 29       	or	r18, r14
     700:	3f 29       	or	r19, r15
     702:	9d c0       	rjmp	.+314    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
     704:	26 30       	cpi	r18, 0x06	; 6
     706:	09 f0       	breq	.+2      	; 0x70a <Seven_Segment_enuDisplayNumber+0x19c>
     708:	97 c0       	rjmp	.+302    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, ((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
     70a:	e6 2f       	mov	r30, r22
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	eb 5c       	subi	r30, 0xCB	; 203
     710:	fe 4f       	sbci	r31, 0xFE	; 254
     712:	10 81       	ld	r17, Z
     714:	41 2f       	mov	r20, r17
     716:	41 70       	andi	r20, 0x01	; 1
     718:	23 e1       	ldi	r18, 0x13	; 19
     71a:	28 9f       	mul	r18, r24
     71c:	e0 01       	movw	r28, r0
     71e:	29 9f       	mul	r18, r25
     720:	d0 0d       	add	r29, r0
     722:	11 24       	eor	r1, r1
     724:	c0 5a       	subi	r28, 0xA0	; 160
     726:	df 4f       	sbci	r29, 0xFF	; 255
     728:	69 81       	ldd	r22, Y+1	; 0x01
     72a:	88 81       	ld	r24, Y
     72c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     730:	c8 2e       	mov	r12, r24
     732:	d1 2c       	mov	r13, r1
     734:	e1 2c       	mov	r14, r1
     736:	f1 2c       	mov	r15, r1
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, ((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     738:	11 fb       	bst	r17, 1
     73a:	44 27       	eor	r20, r20
     73c:	40 f9       	bld	r20, 0
     73e:	6b 81       	ldd	r22, Y+3	; 0x03
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     746:	48 2e       	mov	r4, r24
     748:	51 2c       	mov	r5, r1
     74a:	44 0c       	add	r4, r4
     74c:	55 1c       	adc	r5, r5
     74e:	44 0c       	add	r4, r4
     750:	55 1c       	adc	r5, r5
     752:	44 0c       	add	r4, r4
     754:	55 1c       	adc	r5, r5
     756:	05 2c       	mov	r0, r5
     758:	00 0c       	add	r0, r0
     75a:	66 08       	sbc	r6, r6
     75c:	77 08       	sbc	r7, r7
     75e:	c4 28       	or	r12, r4
     760:	d5 28       	or	r13, r5
     762:	e6 28       	or	r14, r6
     764:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, ((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     766:	12 fb       	bst	r17, 2
     768:	44 27       	eor	r20, r20
     76a:	40 f9       	bld	r20, 0
     76c:	6d 81       	ldd	r22, Y+5	; 0x05
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     774:	20 e4       	ldi	r18, 0x40	; 64
     776:	82 9f       	mul	r24, r18
     778:	c0 01       	movw	r24, r0
     77a:	11 24       	eor	r1, r1
     77c:	2c 01       	movw	r4, r24
     77e:	99 0f       	add	r25, r25
     780:	66 08       	sbc	r6, r6
     782:	77 08       	sbc	r7, r7
     784:	c4 28       	or	r12, r4
     786:	d5 28       	or	r13, r5
     788:	e6 28       	or	r14, r6
     78a:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, ((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     78c:	13 fb       	bst	r17, 3
     78e:	44 27       	eor	r20, r20
     790:	40 f9       	bld	r20, 0
     792:	6f 81       	ldd	r22, Y+7	; 0x07
     794:	8e 81       	ldd	r24, Y+6	; 0x06
     796:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     79a:	48 2e       	mov	r4, r24
     79c:	51 2c       	mov	r5, r1
     79e:	54 2c       	mov	r5, r4
     7a0:	44 24       	eor	r4, r4
     7a2:	55 0c       	add	r5, r5
     7a4:	05 2c       	mov	r0, r5
     7a6:	00 0c       	add	r0, r0
     7a8:	66 08       	sbc	r6, r6
     7aa:	77 08       	sbc	r7, r7
     7ac:	4c 28       	or	r4, r12
     7ae:	5d 28       	or	r5, r13
     7b0:	6e 28       	or	r6, r14
     7b2:	7f 28       	or	r7, r15
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     7b4:	14 fb       	bst	r17, 4
     7b6:	44 27       	eor	r20, r20
     7b8:	40 f9       	bld	r20, 0
     7ba:	69 85       	ldd	r22, Y+9	; 0x09
     7bc:	88 85       	ldd	r24, Y+8	; 0x08
     7be:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     7c2:	c8 2e       	mov	r12, r24
     7c4:	d1 2c       	mov	r13, r1
     7c6:	dc 2c       	mov	r13, r12
     7c8:	cc 24       	eor	r12, r12
     7ca:	dd 0c       	add	r13, r13
     7cc:	dd 0c       	add	r13, r13
     7ce:	dd 0c       	add	r13, r13
     7d0:	dd 0c       	add	r13, r13
     7d2:	0d 2c       	mov	r0, r13
     7d4:	00 0c       	add	r0, r0
     7d6:	ee 08       	sbc	r14, r14
     7d8:	ff 08       	sbc	r15, r15
     7da:	46 01       	movw	r8, r12
     7dc:	57 01       	movw	r10, r14
     7de:	84 28       	or	r8, r4
     7e0:	95 28       	or	r9, r5
     7e2:	a6 28       	or	r10, r6
     7e4:	b7 28       	or	r11, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     7e6:	15 fb       	bst	r17, 5
     7e8:	44 27       	eor	r20, r20
     7ea:	40 f9       	bld	r20, 0
     7ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     7ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     7f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     7f4:	c8 2e       	mov	r12, r24
     7f6:	d1 2c       	mov	r13, r1
     7f8:	dd 24       	eor	r13, r13
     7fa:	c6 94       	lsr	r12
     7fc:	d7 94       	ror	r13
     7fe:	cc 24       	eor	r12, r12
     800:	0d 2c       	mov	r0, r13
     802:	00 0c       	add	r0, r0
     804:	ee 08       	sbc	r14, r14
     806:	ff 08       	sbc	r15, r15
     808:	c8 28       	or	r12, r8
     80a:	d9 28       	or	r13, r9
     80c:	ea 28       	or	r14, r10
     80e:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
     810:	16 fb       	bst	r17, 6
     812:	44 27       	eor	r20, r20
     814:	40 f9       	bld	r20, 0
     816:	6d 85       	ldd	r22, Y+13	; 0x0d
     818:	8c 85       	ldd	r24, Y+12	; 0x0c
     81a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     81e:	08 2f       	mov	r16, r24
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	11 27       	eor	r17, r17
     824:	00 27       	eor	r16, r16
     826:	01 2e       	mov	r0, r17
     828:	00 0c       	add	r0, r0
     82a:	22 0b       	sbc	r18, r18
     82c:	33 0b       	sbc	r19, r19
     82e:	0c 29       	or	r16, r12
     830:	1d 29       	or	r17, r13
     832:	2e 29       	or	r18, r14
     834:	3f 29       	or	r19, r15
     836:	03 c0       	rjmp	.+6      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	98 01       	movw	r18, r16
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	13 c0       	rjmp	.+38     	; 0x868 <__stack+0x9>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
     842:	b9 01       	movw	r22, r18
     844:	a8 01       	movw	r20, r16
     846:	08 2e       	mov	r0, r24
     848:	04 c0       	rjmp	.+8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84a:	76 95       	lsr	r23
     84c:	67 95       	ror	r22
     84e:	57 95       	ror	r21
     850:	47 95       	ror	r20
     852:	0a 94       	dec	r0
     854:	d2 f7       	brpl	.-12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     856:	47 70       	andi	r20, 0x07	; 7
     858:	55 27       	eor	r21, r21
     85a:	66 27       	eor	r22, r22
     85c:	77 27       	eor	r23, r23
     85e:	45 2b       	or	r20, r21
     860:	46 2b       	or	r20, r22
     862:	47 2b       	or	r20, r23
     864:	49 f4       	brne	.+18     	; 0x878 <__stack+0x19>
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
     866:	8d 5f       	subi	r24, 0xFD	; 253
     868:	80 32       	cpi	r24, 0x20	; 32
     86a:	58 f3       	brcs	.-42     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	01 c0       	rjmp	.+2      	; 0x87a <__stack+0x1b>
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
     878:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	7f 90       	pop	r7
     894:	6f 90       	pop	r6
     896:	5f 90       	pop	r5
     898:	4f 90       	pop	r4
     89a:	08 95       	ret

0000089c <LCD_vidTrigger_LATCH>:
}

static void LCD_vidTrigger_LATCH(void)
{
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	63 e0       	ldi	r22, 0x03	; 3
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     8a6:	83 ec       	ldi	r24, 0xC3	; 195
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <LCD_vidTrigger_LATCH+0xe>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <LCD_vidTrigger_LATCH+0x14>
     8b0:	00 00       	nop
	_delay_ms(10);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	63 e0       	ldi	r22, 0x03	; 3
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     8bc:	08 95       	ret

000008be <LCD_enuLatch>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static ES_t LCD_enuLatch(u8 Copy_u8Data)
{	
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	/* RW --> LOW to write */
	Local_enuErrorState = DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	62 e0       	ldi	r22, 0x02	; 2
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     8ce:	81 11       	cpse	r24, r1
     8d0:	6f c0       	rjmp	.+222    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
	
	/* Enable --> HIGH */
	Local_enuErrorState = DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	63 e0       	ldi	r22, 0x03	; 3
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     8dc:	81 11       	cpse	r24, r1
     8de:	68 c0       	rjmp	.+208    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	#elif LCD_MODE == FOUR_BIT
	u8 Local_u8FourBitData = 0;
	/* Send Data from D7..D4 */
	Local_u8FourBitData = (Copy_u8Data & 0xF0);
     8e0:	dc 2f       	mov	r29, r28
     8e2:	d0 7f       	andi	r29, 0xF0	; 240
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Local_u8FourBitData >> D7_POS) & MASK_BIT));
     8e4:	4d 2f       	mov	r20, r29
     8e6:	44 1f       	adc	r20, r20
     8e8:	44 27       	eor	r20, r20
     8ea:	44 1f       	adc	r20, r20
     8ec:	67 e0       	ldi	r22, 0x07	; 7
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     8f4:	81 11       	cpse	r24, r1
     8f6:	5c c0       	rjmp	.+184    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Local_u8FourBitData >> D6_POS) & MASK_BIT));
     8f8:	d6 fb       	bst	r29, 6
     8fa:	44 27       	eor	r20, r20
     8fc:	40 f9       	bld	r20, 0
     8fe:	66 e0       	ldi	r22, 0x06	; 6
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     906:	81 11       	cpse	r24, r1
     908:	53 c0       	rjmp	.+166    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Local_u8FourBitData >> D5_POS) & MASK_BIT));
     90a:	d5 fb       	bst	r29, 5
     90c:	44 27       	eor	r20, r20
     90e:	40 f9       	bld	r20, 0
     910:	65 e0       	ldi	r22, 0x05	; 5
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     918:	81 11       	cpse	r24, r1
     91a:	4a c0       	rjmp	.+148    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Local_u8FourBitData >> D4_POS) & MASK_BIT));
     91c:	d4 fb       	bst	r29, 4
     91e:	44 27       	eor	r20, r20
     920:	40 f9       	bld	r20, 0
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     92a:	81 11       	cpse	r24, r1
     92c:	41 c0       	rjmp	.+130    	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
	
	LCD_vidTrigger_LATCH();
     92e:	0e 94 4e 04 	call	0x89c	; 0x89c <LCD_vidTrigger_LATCH>
     932:	89 ef       	ldi	r24, 0xF9	; 249
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <LCD_enuLatch+0x78>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <LCD_enuLatch+0x7e>
     93c:	00 00       	nop
	_delay_ms(1);
	
	/* Send Data from D3..D0 */
	Local_u8FourBitData = (Copy_u8Data << FOUR_BIT);
     93e:	c2 95       	swap	r28
     940:	c0 7f       	andi	r28, 0xF0	; 240
	Local_enuErrorState = DIO_enuSetPinVal(D7_PORT, D7_PIN, ((Local_u8FourBitData >> D7_POS) & MASK_BIT));
     942:	4c 2f       	mov	r20, r28
     944:	44 1f       	adc	r20, r20
     946:	44 27       	eor	r20, r20
     948:	44 1f       	adc	r20, r20
     94a:	67 e0       	ldi	r22, 0x07	; 7
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     952:	81 11       	cpse	r24, r1
     954:	2d c0       	rjmp	.+90     	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D6_PORT, D6_PIN, ((Local_u8FourBitData >> D6_POS) & MASK_BIT));
     956:	c6 fb       	bst	r28, 6
     958:	44 27       	eor	r20, r20
     95a:	40 f9       	bld	r20, 0
     95c:	66 e0       	ldi	r22, 0x06	; 6
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     964:	81 11       	cpse	r24, r1
     966:	24 c0       	rjmp	.+72     	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D5_PORT, D5_PIN, ((Local_u8FourBitData >> D5_POS) & MASK_BIT));
     968:	c5 fb       	bst	r28, 5
     96a:	44 27       	eor	r20, r20
     96c:	40 f9       	bld	r20, 0
     96e:	65 e0       	ldi	r22, 0x05	; 5
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     976:	81 11       	cpse	r24, r1
     978:	1b c0       	rjmp	.+54     	; 0x9b0 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinVal(D4_PORT, D4_PIN, ((Local_u8FourBitData >> D4_POS) & MASK_BIT));
     97a:	c4 fb       	bst	r28, 4
     97c:	44 27       	eor	r20, r20
     97e:	40 f9       	bld	r20, 0
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     988:	81 11       	cpse	r24, r1
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <LCD_enuLatch+0xf2>
     98c:	89 ef       	ldi	r24, 0xF9	; 249
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <LCD_enuLatch+0xd2>
     994:	00 c0       	rjmp	.+0      	; 0x996 <LCD_enuLatch+0xd8>
     996:	00 00       	nop
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	63 e0       	ldi	r22, 0x03	; 3
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
     9a2:	89 ef       	ldi	r24, 0xF9	; 249
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <LCD_enuLatch+0xe8>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <LCD_enuLatch+0xee>
     9ac:	00 00       	nop
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <LCD_inlenuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
     9b6:	cf 93       	push	r28
     9b8:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     9c4:	81 11       	cpse	r24, r1
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <LCD_inlenuSendCommand+0x18>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     9c8:	8c 2f       	mov	r24, r28
     9ca:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;	
	return Local_enuErrorState;
}
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <LCD_enuInit>:
ES_t LCD_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	/* Set Control Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     9dc:	81 11       	cpse	r24, r1
     9de:	63 c0       	rjmp	.+198    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
	
	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	62 e0       	ldi	r22, 0x02	; 2
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     9ea:	81 11       	cpse	r24, r1
     9ec:	5c c0       	rjmp	.+184    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
     9ee:	41 e0       	ldi	r20, 0x01	; 1
     9f0:	63 e0       	ldi	r22, 0x03	; 3
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     9f8:	81 11       	cpse	r24, r1
     9fa:	55 c0       	rjmp	.+170    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
	
	/* Set Data Pins as output */
	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	67 e0       	ldi	r22, 0x07	; 7
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     a06:	81 11       	cpse	r24, r1
     a08:	4e c0       	rjmp	.+156    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	66 e0       	ldi	r22, 0x06	; 6
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     a14:	81 11       	cpse	r24, r1
     a16:	47 c0       	rjmp	.+142    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
		
	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	65 e0       	ldi	r22, 0x05	; 5
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     a22:	81 11       	cpse	r24, r1
     a24:	40 c0       	rjmp	.+128    	; 0xaa6 <LCD_enuInit+0xd4>
		return Local_enuErrorState;
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
     a26:	41 e0       	ldi	r20, 0x01	; 1
     a28:	64 e0       	ldi	r22, 0x04	; 4
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_enuSetPinDirection>
	if(Local_enuErrorState != ES_OK)
     a30:	81 11       	cpse	r24, r1
     a32:	39 c0       	rjmp	.+114    	; 0xaa6 <LCD_enuInit+0xd4>
     a34:	8d e2       	ldi	r24, 0x2D	; 45
     a36:	92 e2       	ldi	r25, 0x22	; 34
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCD_enuInit+0x66>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCD_enuInit+0x6c>
     a3e:	00 00       	nop
		return Local_enuErrorState;
	_delay_ms(1);
	
	#elif LCD_MODE == FOUR_BIT
	/* Function Set */
	LCD_inlenuSendCommand(0x33);
     a40:	83 e3       	ldi	r24, 0x33	; 51
     a42:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	LCD_inlenuSendCommand(0x32);
     a46:	82 e3       	ldi	r24, 0x32	; 50
     a48:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_4Bit_TwoLine_5_7CharFont);
     a4c:	88 e2       	ldi	r24, 0x28	; 40
     a4e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	if(Local_enuErrorState != ES_OK)
     a52:	81 11       	cpse	r24, r1
     a54:	28 c0       	rjmp	.+80     	; 0xaa6 <LCD_enuInit+0xd4>
     a56:	89 ef       	ldi	r24, 0xF9	; 249
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <LCD_enuInit+0x88>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <LCD_enuInit+0x8e>
     a60:	00 00       	nop
	#else
	#error "LCD Mode has a wrong configuration"
	#endif
	
	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_DisplayOn_CursorOn_Blinking);
     a62:	8f e0       	ldi	r24, 0x0F	; 15
     a64:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	if(Local_enuErrorState != ES_OK)
     a68:	81 11       	cpse	r24, r1
     a6a:	1d c0       	rjmp	.+58     	; 0xaa6 <LCD_enuInit+0xd4>
     a6c:	89 ef       	ldi	r24, 0xF9	; 249
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <LCD_enuInit+0x9e>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <LCD_enuInit+0xa4>
     a76:	00 00       	nop
		return Local_enuErrorState;
	_delay_ms(1);
	
	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Clear_Display);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	if(Local_enuErrorState != ES_OK)
     a7e:	81 11       	cpse	r24, r1
     a80:	12 c0       	rjmp	.+36     	; 0xaa6 <LCD_enuInit+0xd4>
     a82:	83 ef       	ldi	r24, 0xF3	; 243
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <LCD_enuInit+0xb4>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <LCD_enuInit+0xba>
     a8c:	00 00       	nop
		return Local_enuErrorState;
	_delay_ms(2);
	
	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(LCD_Increase_NoShift);
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCD_inlenuSendCommand>
	if(Local_enuErrorState != ES_OK)
     a94:	81 11       	cpse	r24, r1
     a96:	07 c0       	rjmp	.+14     	; 0xaa6 <LCD_enuInit+0xd4>
     a98:	89 ef       	ldi	r24, 0xF9	; 249
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <LCD_enuInit+0xca>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <LCD_enuInit+0xd0>
     aa2:	00 00       	nop
		return Local_enuErrorState;
	_delay_ms(1);
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
}
     aa6:	08 95       	ret

00000aa8 <LCD_enuSendCommand>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
     aa8:	cf 93       	push	r28
     aaa:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     ab6:	81 11       	cpse	r24, r1
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <LCD_enuSendCommand+0x18>
		return Local_enuErrorState;
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     aba:	8c 2f       	mov	r24, r28
     abc:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8Position >= 0 && Copy_u8Position < 16)
     ac8:	60 31       	cpi	r22, 0x10	; 16
     aca:	40 f5       	brcc	.+80     	; 0xb1c <LCD_enuGoToPosition+0x58>
     acc:	c6 2f       	mov	r28, r22
	{
		if(Copy_u8Line == LCD_FIRST_LINE)
     ace:	81 11       	cpse	r24, r1
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <LCD_enuGoToPosition+0x30>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
     ad2:	d0 e8       	ldi	r29, 0x80	; 128
     ad4:	d6 0f       	add	r29, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     ae0:	81 11       	cpse	r24, r1
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <LCD_enuGoToPosition+0x26>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     ae4:	8d 2f       	mov	r24, r29
     ae6:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
	if(Copy_u8Position >= 0 && Copy_u8Position < 16)
	{
		if(Copy_u8Line == LCD_FIRST_LINE)
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
			if(Local_enuErrorState != ES_OK)
     aea:	81 11       	cpse	r24, r1
     aec:	1a c0       	rjmp	.+52     	; 0xb22 <LCD_enuGoToPosition+0x5e>
				return Local_enuErrorState;
				
			LCD_u8PosCounter = Copy_u8Position;
     aee:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <LCD_u8PosCounter>
     af2:	17 c0       	rjmp	.+46     	; 0xb22 <LCD_enuGoToPosition+0x5e>
		}
		else if(Copy_u8Line == LCD_SECOND_LINE)
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	a1 f4       	brne	.+40     	; 0xb20 <LCD_enuGoToPosition+0x5c>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
     af8:	d0 ec       	ldi	r29, 0xC0	; 192
     afa:	d6 0f       	add	r29, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     b04:	81 11       	cpse	r24, r1
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <LCD_enuGoToPosition+0x4a>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     b08:	8d 2f       	mov	r24, r29
     b0a:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
			LCD_u8PosCounter = Copy_u8Position;
		}
		else if(Copy_u8Line == LCD_SECOND_LINE)
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
			if(Local_enuErrorState != ES_OK)
     b0e:	81 11       	cpse	r24, r1
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <LCD_enuGoToPosition+0x5e>
				return Local_enuErrorState;
				
			LCD_u8PosCounter = Copy_u8Position + 16;
     b12:	60 e1       	ldi	r22, 0x10	; 16
     b14:	6c 0f       	add	r22, r28
     b16:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <LCD_u8PosCounter>
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <LCD_enuGoToPosition+0x5e>
		}
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <LCD_enuGoToPosition+0x5e>
     b20:	80 e0       	ldi	r24, 0x00	; 0
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <LCD_vidCheckPosition>:
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
	if(LCD_u8PosCounter == 16)
     b28:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <LCD_u8PosCounter>
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	51 f4       	brne	.+20     	; 0xb44 <LCD_vidCheckPosition+0x1c>
	{
		LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
     b38:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <LCD_u8PosCounter>
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <LCD_u8PosCounter>
     b42:	08 95       	ret
	}
	else if(LCD_u8PosCounter == 32)
     b44:	80 32       	cpi	r24, 0x20	; 32
     b46:	89 f4       	brne	.+34     	; 0xb6a <LCD_vidCheckPosition+0x42>
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     b52:	81 11       	cpse	r24, r1
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <LCD_vidCheckPosition+0x34>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
		LCD_u8PosCounter++;
	}
	else if(LCD_u8PosCounter == 32)
	{
		LCD_inlenuSendCommand(LCD_Clear_Display);
		LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
     b64:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <LCD_u8PosCounter>
     b68:	08 95       	ret
	}
	else
	{
		LCD_u8PosCounter++;
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <LCD_u8PosCounter>
     b70:	08 95       	ret

00000b72 <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
     b72:	cf 93       	push	r28
     b74:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
     b76:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     b84:	81 11       	cpse	r24, r1
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <LCD_enuDisplayChar+0x1c>
		return Local_enuErrorState;
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
     b88:	8c 2f       	mov	r24, r28
     b8a:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <LCD_vidClearScreen>:
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     b9c:	81 11       	cpse	r24, r1
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <LCD_vidClearScreen+0x14>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuLatch>
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
	LCD_inlenuSendCommand(LCD_Clear_Display);
	LCD_u8PosCounter = 0;
     ba6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <LCD_u8PosCounter>
     baa:	08 95       	ret

00000bac <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
     bb2:	89 2b       	or	r24, r25
     bb4:	39 f4       	brne	.+14     	; 0xbc4 <LCD_enuWriteString+0x18>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <LCD_enuWriteString+0x1e>
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
     bba:	0e 94 b9 05 	call	0xb72	; 0xb72 <LCD_enuDisplayChar>
			if(Local_enuErrorState != ES_OK)
     bbe:	81 11       	cpse	r24, r1
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <LCD_enuWriteString+0x1e>
				return Local_enuErrorState;
			Copy_pu8Str++;
     bc2:	21 96       	adiw	r28, 0x01	; 1
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
     bc4:	88 81       	ld	r24, Y
     bc6:	81 11       	cpse	r24, r1
     bc8:	f8 cf       	rjmp	.-16     	; 0xbba <LCD_enuWriteString+0xe>
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <main>:
#include "APP/Ping_Pong_Game_config.h"
#include "APP/Ping_Pong_Game_int.h"

int main(void)
{
	PING_PONG_GAME_enuInit();
     bd0:	0e 94 30 01 	call	0x260	; 0x260 <PING_PONG_GAME_enuInit>
	
	PING_PONG_GAME_enuStartPlaying();
     bd4:	0e 94 80 01 	call	0x300	; 0x300 <PING_PONG_GAME_enuStartPlaying>
     bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <main+0x8>

00000bda <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     bda:	84 30       	cpi	r24, 0x04	; 4
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <DIO_enuSetPinDirection+0x6>
     bde:	67 c0       	rjmp	.+206    	; 0xcae <DIO_enuSetPinDirection+0xd4>
     be0:	68 30       	cpi	r22, 0x08	; 8
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <DIO_enuSetPinDirection+0xc>
     be4:	66 c0       	rjmp	.+204    	; 0xcb2 <DIO_enuSetPinDirection+0xd8>
     be6:	42 30       	cpi	r20, 0x02	; 2
     be8:	08 f0       	brcs	.+2      	; 0xbec <DIO_enuSetPinDirection+0x12>
     bea:	65 c0       	rjmp	.+202    	; 0xcb6 <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	e9 f0       	breq	.+58     	; 0xc2a <DIO_enuSetPinDirection+0x50>
     bf0:	30 f0       	brcs	.+12     	; 0xbfe <DIO_enuSetPinDirection+0x24>
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	81 f1       	breq	.+96     	; 0xc56 <DIO_enuSetPinDirection+0x7c>
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	09 f4       	brne	.+2      	; 0xbfc <DIO_enuSetPinDirection+0x22>
     bfa:	43 c0       	rjmp	.+134    	; 0xc82 <DIO_enuSetPinDirection+0xa8>
     bfc:	5e c0       	rjmp	.+188    	; 0xcba <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	06 2e       	mov	r0, r22
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_enuSetPinDirection+0x30>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_enuSetPinDirection+0x2c>
     c0e:	80 95       	com	r24
     c10:	2a b3       	in	r18, 0x1a	; 26
     c12:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
     c14:	84 2f       	mov	r24, r20
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_enuSetPinDirection+0x44>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	6a 95       	dec	r22
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_enuSetPinDirection+0x40>
     c22:	82 2b       	or	r24, r18
     c24:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c26:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c28:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	06 2e       	mov	r0, r22
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_enuSetPinDirection+0x5c>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_enuSetPinDirection+0x58>
     c3a:	20 95       	com	r18
     c3c:	87 b3       	in	r24, 0x17	; 23
     c3e:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
     c40:	84 2f       	mov	r24, r20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <DIO_enuSetPinDirection+0x70>
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	6a 95       	dec	r22
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <DIO_enuSetPinDirection+0x6c>
     c4e:	82 2b       	or	r24, r18
     c50:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c52:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c54:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	06 2e       	mov	r0, r22
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_enuSetPinDirection+0x88>
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_enuSetPinDirection+0x84>
     c66:	20 95       	com	r18
     c68:	84 b3       	in	r24, 0x14	; 20
     c6a:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
     c6c:	84 2f       	mov	r24, r20
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_enuSetPinDirection+0x9c>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	6a 95       	dec	r22
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_enuSetPinDirection+0x98>
     c7a:	82 2b       	or	r24, r18
     c7c:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c80:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	06 2e       	mov	r0, r22
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_enuSetPinDirection+0xb4>
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_enuSetPinDirection+0xb0>
     c92:	20 95       	com	r18
     c94:	81 b3       	in	r24, 0x11	; 17
     c96:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
     c98:	84 2f       	mov	r24, r20
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_enuSetPinDirection+0xc8>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_enuSetPinDirection+0xc4>
     ca6:	82 2b       	or	r24, r18
     ca8:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     cac:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	08 95       	ret
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	08 95       	ret
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     cba:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     cbc:	08 95       	ret

00000cbe <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <DIO_enuSetPinVal+0x6>
     cc2:	67 c0       	rjmp	.+206    	; 0xd92 <DIO_enuSetPinVal+0xd4>
     cc4:	68 30       	cpi	r22, 0x08	; 8
     cc6:	08 f0       	brcs	.+2      	; 0xcca <DIO_enuSetPinVal+0xc>
     cc8:	66 c0       	rjmp	.+204    	; 0xd96 <DIO_enuSetPinVal+0xd8>
     cca:	42 30       	cpi	r20, 0x02	; 2
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <DIO_enuSetPinVal+0x12>
     cce:	65 c0       	rjmp	.+202    	; 0xd9a <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	e9 f0       	breq	.+58     	; 0xd0e <DIO_enuSetPinVal+0x50>
     cd4:	30 f0       	brcs	.+12     	; 0xce2 <DIO_enuSetPinVal+0x24>
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	81 f1       	breq	.+96     	; 0xd3a <DIO_enuSetPinVal+0x7c>
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	09 f4       	brne	.+2      	; 0xce0 <DIO_enuSetPinVal+0x22>
     cde:	43 c0       	rjmp	.+134    	; 0xd66 <DIO_enuSetPinVal+0xa8>
     ce0:	5e c0       	rjmp	.+188    	; 0xd9e <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	06 2e       	mov	r0, r22
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enuSetPinVal+0x30>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enuSetPinVal+0x2c>
     cf2:	80 95       	com	r24
     cf4:	2b b3       	in	r18, 0x1b	; 27
     cf6:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
     cf8:	84 2f       	mov	r24, r20
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_enuSetPinVal+0x44>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	6a 95       	dec	r22
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_enuSetPinVal+0x40>
     d06:	82 2b       	or	r24, r18
     d08:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d0c:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	06 2e       	mov	r0, r22
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_enuSetPinVal+0x5c>
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_enuSetPinVal+0x58>
     d1e:	20 95       	com	r18
     d20:	88 b3       	in	r24, 0x18	; 24
     d22:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
     d24:	84 2f       	mov	r24, r20
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_enuSetPinVal+0x70>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	6a 95       	dec	r22
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_enuSetPinVal+0x6c>
     d32:	82 2b       	or	r24, r18
     d34:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d36:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d38:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	06 2e       	mov	r0, r22
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_enuSetPinVal+0x88>
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_enuSetPinVal+0x84>
     d4a:	20 95       	com	r18
     d4c:	85 b3       	in	r24, 0x15	; 21
     d4e:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
     d50:	84 2f       	mov	r24, r20
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_enuSetPinVal+0x9c>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	6a 95       	dec	r22
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_enuSetPinVal+0x98>
     d5e:	82 2b       	or	r24, r18
     d60:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d62:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d64:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	06 2e       	mov	r0, r22
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_enuSetPinVal+0xb4>
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_enuSetPinVal+0xb0>
     d76:	20 95       	com	r18
     d78:	82 b3       	in	r24, 0x12	; 18
     d7a:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
     d7c:	84 2f       	mov	r24, r20
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_enuSetPinVal+0xc8>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	6a 95       	dec	r22
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_enuSetPinVal+0xc4>
     d8a:	82 2b       	or	r24, r18
     d8c:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d90:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	08 95       	ret
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	08 95       	ret
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     da0:	08 95       	ret

00000da2 <EXTI_enuInit>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     da2:	ac 01       	movw	r20, r24
     da4:	89 2b       	or	r24, r25
     da6:	09 f0       	breq	.+2      	; 0xdaa <EXTI_enuInit+0x8>
     da8:	86 c0       	rjmp	.+268    	; 0xeb6 <EXTI_enuInit+0x114>
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	08 95       	ret
     dae:	e9 2f       	mov	r30, r25
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	9f 01       	movw	r18, r30
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	e4 0f       	add	r30, r20
     dbe:	f5 1f       	adc	r31, r21
     dc0:	20 81       	ld	r18, Z
     dc2:	21 30       	cpi	r18, 0x01	; 1
     dc4:	81 f1       	breq	.+96     	; 0xe26 <EXTI_enuInit+0x84>
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <EXTI_enuInit+0x2e>
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <EXTI_enuInit+0x2c>
     dcc:	57 c0       	rjmp	.+174    	; 0xe7c <EXTI_enuInit+0xda>
     dce:	6a c0       	rjmp	.+212    	; 0xea4 <EXTI_enuInit+0x102>
     dd0:	21 81       	ldd	r18, Z+1	; 0x01
     dd2:	21 11       	cpse	r18, r1
     dd4:	6e c0       	rjmp	.+220    	; 0xeb2 <EXTI_enuInit+0x110>
     dd6:	25 b7       	in	r18, 0x35	; 53
     dd8:	2c 7f       	andi	r18, 0xFC	; 252
     dda:	25 bf       	out	0x35, r18	; 53
     ddc:	22 81       	ldd	r18, Z+2	; 0x02
     dde:	21 30       	cpi	r18, 0x01	; 1
     de0:	69 f0       	breq	.+26     	; 0xdfc <EXTI_enuInit+0x5a>
     de2:	28 f0       	brcs	.+10     	; 0xdee <EXTI_enuInit+0x4c>
     de4:	22 30       	cpi	r18, 0x02	; 2
     de6:	89 f0       	breq	.+34     	; 0xe0a <EXTI_enuInit+0x68>
     de8:	23 30       	cpi	r18, 0x03	; 3
     dea:	b1 f0       	breq	.+44     	; 0xe18 <EXTI_enuInit+0x76>
     dec:	5d c0       	rjmp	.+186    	; 0xea8 <EXTI_enuInit+0x106>
     dee:	25 b7       	in	r18, 0x35	; 53
     df0:	2e 7f       	andi	r18, 0xFE	; 254
     df2:	25 bf       	out	0x35, r18	; 53
     df4:	25 b7       	in	r18, 0x35	; 53
     df6:	2d 7f       	andi	r18, 0xFD	; 253
     df8:	25 bf       	out	0x35, r18	; 53
     dfa:	5b c0       	rjmp	.+182    	; 0xeb2 <EXTI_enuInit+0x110>
     dfc:	25 b7       	in	r18, 0x35	; 53
     dfe:	21 60       	ori	r18, 0x01	; 1
     e00:	25 bf       	out	0x35, r18	; 53
     e02:	25 b7       	in	r18, 0x35	; 53
     e04:	2d 7f       	andi	r18, 0xFD	; 253
     e06:	25 bf       	out	0x35, r18	; 53
     e08:	54 c0       	rjmp	.+168    	; 0xeb2 <EXTI_enuInit+0x110>
     e0a:	25 b7       	in	r18, 0x35	; 53
     e0c:	2e 7f       	andi	r18, 0xFE	; 254
     e0e:	25 bf       	out	0x35, r18	; 53
     e10:	25 b7       	in	r18, 0x35	; 53
     e12:	22 60       	ori	r18, 0x02	; 2
     e14:	25 bf       	out	0x35, r18	; 53
     e16:	4d c0       	rjmp	.+154    	; 0xeb2 <EXTI_enuInit+0x110>
     e18:	25 b7       	in	r18, 0x35	; 53
     e1a:	21 60       	ori	r18, 0x01	; 1
     e1c:	25 bf       	out	0x35, r18	; 53
     e1e:	25 b7       	in	r18, 0x35	; 53
     e20:	22 60       	ori	r18, 0x02	; 2
     e22:	25 bf       	out	0x35, r18	; 53
     e24:	46 c0       	rjmp	.+140    	; 0xeb2 <EXTI_enuInit+0x110>
     e26:	21 81       	ldd	r18, Z+1	; 0x01
     e28:	21 11       	cpse	r18, r1
     e2a:	43 c0       	rjmp	.+134    	; 0xeb2 <EXTI_enuInit+0x110>
     e2c:	25 b7       	in	r18, 0x35	; 53
     e2e:	23 7f       	andi	r18, 0xF3	; 243
     e30:	25 bf       	out	0x35, r18	; 53
     e32:	22 81       	ldd	r18, Z+2	; 0x02
     e34:	21 30       	cpi	r18, 0x01	; 1
     e36:	69 f0       	breq	.+26     	; 0xe52 <EXTI_enuInit+0xb0>
     e38:	28 f0       	brcs	.+10     	; 0xe44 <EXTI_enuInit+0xa2>
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	89 f0       	breq	.+34     	; 0xe60 <EXTI_enuInit+0xbe>
     e3e:	23 30       	cpi	r18, 0x03	; 3
     e40:	b1 f0       	breq	.+44     	; 0xe6e <EXTI_enuInit+0xcc>
     e42:	34 c0       	rjmp	.+104    	; 0xeac <EXTI_enuInit+0x10a>
     e44:	25 b7       	in	r18, 0x35	; 53
     e46:	2b 7f       	andi	r18, 0xFB	; 251
     e48:	25 bf       	out	0x35, r18	; 53
     e4a:	25 b7       	in	r18, 0x35	; 53
     e4c:	27 7f       	andi	r18, 0xF7	; 247
     e4e:	25 bf       	out	0x35, r18	; 53
     e50:	30 c0       	rjmp	.+96     	; 0xeb2 <EXTI_enuInit+0x110>
     e52:	25 b7       	in	r18, 0x35	; 53
     e54:	24 60       	ori	r18, 0x04	; 4
     e56:	25 bf       	out	0x35, r18	; 53
     e58:	25 b7       	in	r18, 0x35	; 53
     e5a:	27 7f       	andi	r18, 0xF7	; 247
     e5c:	25 bf       	out	0x35, r18	; 53
     e5e:	29 c0       	rjmp	.+82     	; 0xeb2 <EXTI_enuInit+0x110>
     e60:	25 b7       	in	r18, 0x35	; 53
     e62:	2b 7f       	andi	r18, 0xFB	; 251
     e64:	25 bf       	out	0x35, r18	; 53
     e66:	25 b7       	in	r18, 0x35	; 53
     e68:	28 60       	ori	r18, 0x08	; 8
     e6a:	25 bf       	out	0x35, r18	; 53
     e6c:	22 c0       	rjmp	.+68     	; 0xeb2 <EXTI_enuInit+0x110>
     e6e:	25 b7       	in	r18, 0x35	; 53
     e70:	24 60       	ori	r18, 0x04	; 4
     e72:	25 bf       	out	0x35, r18	; 53
     e74:	25 b7       	in	r18, 0x35	; 53
     e76:	28 60       	ori	r18, 0x08	; 8
     e78:	25 bf       	out	0x35, r18	; 53
     e7a:	1b c0       	rjmp	.+54     	; 0xeb2 <EXTI_enuInit+0x110>
     e7c:	21 81       	ldd	r18, Z+1	; 0x01
     e7e:	21 11       	cpse	r18, r1
     e80:	18 c0       	rjmp	.+48     	; 0xeb2 <EXTI_enuInit+0x110>
     e82:	24 b7       	in	r18, 0x34	; 52
     e84:	2f 7b       	andi	r18, 0xBF	; 191
     e86:	24 bf       	out	0x34, r18	; 52
     e88:	22 81       	ldd	r18, Z+2	; 0x02
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	19 f0       	breq	.+6      	; 0xe94 <EXTI_enuInit+0xf2>
     e8e:	23 30       	cpi	r18, 0x03	; 3
     e90:	29 f0       	breq	.+10     	; 0xe9c <EXTI_enuInit+0xfa>
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <EXTI_enuInit+0x10e>
     e94:	24 b7       	in	r18, 0x34	; 52
     e96:	2f 7b       	andi	r18, 0xBF	; 191
     e98:	24 bf       	out	0x34, r18	; 52
     e9a:	0b c0       	rjmp	.+22     	; 0xeb2 <EXTI_enuInit+0x110>
     e9c:	24 b7       	in	r18, 0x34	; 52
     e9e:	20 64       	ori	r18, 0x40	; 64
     ea0:	24 bf       	out	0x34, r18	; 52
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <EXTI_enuInit+0x110>
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <EXTI_enuInit+0x110>
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <EXTI_enuInit+0x110>
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <EXTI_enuInit+0x110>
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <EXTI_enuInit+0x118>
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	93 30       	cpi	r25, 0x03	; 3
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <EXTI_enuInit+0x11e>
     ebe:	77 cf       	rjmp	.-274    	; 0xdae <EXTI_enuInit+0xc>
     ec0:	08 95       	ret

00000ec2 <EXTI_enuEnable>:
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	f0 f4       	brcc	.+60     	; 0xf02 <EXTI_enuEnable+0x40>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	61 f0       	breq	.+24     	; 0xee2 <EXTI_enuEnable+0x20>
     eca:	18 f0       	brcs	.+6      	; 0xed2 <EXTI_enuEnable+0x10>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	89 f0       	breq	.+34     	; 0xef2 <EXTI_enuEnable+0x30>
     ed0:	1a c0       	rjmp	.+52     	; 0xf06 <EXTI_enuEnable+0x44>
     ed2:	8b b7       	in	r24, 0x3b	; 59
     ed4:	8f 7b       	andi	r24, 0xBF	; 191
     ed6:	8b bf       	out	0x3b, r24	; 59
     ed8:	8b b7       	in	r24, 0x3b	; 59
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	8b bf       	out	0x3b, r24	; 59
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
     ee2:	8b b7       	in	r24, 0x3b	; 59
     ee4:	8f 77       	andi	r24, 0x7F	; 127
     ee6:	8b bf       	out	0x3b, r24	; 59
     ee8:	8b b7       	in	r24, 0x3b	; 59
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	8b bf       	out	0x3b, r24	; 59
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
     ef2:	8b b7       	in	r24, 0x3b	; 59
     ef4:	8f 7d       	andi	r24, 0xDF	; 223
     ef6:	8b bf       	out	0x3b, r24	; 59
     ef8:	8b b7       	in	r24, 0x3b	; 59
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	8b bf       	out	0x3b, r24	; 59
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	08 95       	ret
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	08 95       	ret
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	08 95       	ret

00000f0a <EXTI_enuCallBackFunc>:

ES_t EXTI_enuCallBackFunc(volatile void (*Copy_PFuncISRFunc)(void*), volatile void *Copy_PvidISRParameter, EXTI_ID_t Copy_enuEXTI_Id)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PFuncISRFunc != NULL)
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	89 f0       	breq	.+34     	; 0xf30 <EXTI_enuCallBackFunc+0x26>
	{
		if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
     f0e:	43 30       	cpi	r20, 0x03	; 3
     f10:	88 f4       	brcc	.+34     	; 0xf34 <EXTI_enuCallBackFunc+0x2a>
		{
			EXTI_APFunc[Copy_enuEXTI_Id] = Copy_PFuncISRFunc;
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	44 0f       	add	r20, r20
     f16:	55 1f       	adc	r21, r21
     f18:	fa 01       	movw	r30, r20
     f1a:	e6 5b       	subi	r30, 0xB6	; 182
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidISRParameter;
     f22:	fa 01       	movw	r30, r20
     f24:	ec 5b       	subi	r30, 0xBC	; 188
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	71 83       	std	Z+1, r23	; 0x01
     f2a:	60 83       	st	Z, r22
			Local_enuErrorState = ES_OK;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	08 95       	ret
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidISRParameter;
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     f34:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
     f36:	08 95       	ret

00000f38 <__vector_1>:

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	4f 93       	push	r20
     f48:	5f 93       	push	r21
     f4a:	6f 93       	push	r22
     f4c:	7f 93       	push	r23
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	af 93       	push	r26
     f54:	bf 93       	push	r27
     f56:	ef 93       	push	r30
     f58:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI0] != NULL)
     f5a:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <EXTI_APFunc>
     f5e:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <EXTI_APFunc+0x1>
     f62:	30 97       	sbiw	r30, 0x00	; 0
     f64:	29 f0       	breq	.+10     	; 0xf70 <__vector_1+0x38>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
     f66:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <EXTI_APvidGenericParameters>
     f6a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <EXTI_APvidGenericParameters+0x1>
     f6e:	09 95       	icall
	}
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI1] != NULL)
     fb4:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <EXTI_APFunc+0x2>
     fb8:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <EXTI_APFunc+0x3>
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	29 f0       	breq	.+10     	; 0xfca <__vector_2+0x38>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
     fc0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <EXTI_APvidGenericParameters+0x2>
     fc4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <EXTI_APvidGenericParameters+0x3>
     fc8:	09 95       	icall
	}
}
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI2] != NULL)
    100e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <EXTI_APFunc+0x4>
    1012:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <EXTI_APFunc+0x5>
    1016:	30 97       	sbiw	r30, 0x00	; 0
    1018:	29 f0       	breq	.+10     	; 0x1024 <__vector_3+0x38>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
    101a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <EXTI_APvidGenericParameters+0x4>
    101e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <EXTI_APvidGenericParameters+0x5>
    1022:	09 95       	icall
	}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <GIE_enuGloable_Interrupt_Enable>:

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	SREG &= ~(MASK_BIT << GIE_I);
    1046:	8f b7       	in	r24, 0x3f	; 63
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	8f bf       	out	0x3f, r24	; 63
	SREG |= (MASK_BIT << GIE_I);
    104c:	8f b7       	in	r24, 0x3f	; 63
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	8f bf       	out	0x3f, r24	; 63
	Local_enuErrorState = ES_OK;
	
	return Local_enuErrorState;
}
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <_exit>:
    1056:	f8 94       	cli

00001058 <__stop_program>:
    1058:	ff cf       	rjmp	.-2      	; 0x1058 <__stop_program>
