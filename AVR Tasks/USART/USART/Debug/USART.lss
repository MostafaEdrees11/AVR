
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000004d4  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000cc  008000cc  000005d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fc  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd6  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000768  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff6  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004a02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_1>
   8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_2>
   c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3c       	cpi	r26, 0xCC	; 204
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ec       	ldi	r26, 0xCC	; 204
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/DIO/DIO_int.h"
#include "MCAL/USART/USART_int.h"


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Data;
	char string[40];
	
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8OUTPUT);	//Tx
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8INPUT);	//Rx
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_enuSetPinDirection>
	
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN0, DIO_u8OUTPUT);	//led
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8OUTPUT);	//buzzer
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_enuSetPinDirection>
	
	DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN0, DIO_u8LOW);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_enuSetPinVal>
	DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN3, DIO_u8LOW);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_enuSetPinVal>
	
	USART_enuInit();
  e2:	0e 94 24 02 	call	0x448	; 0x448 <USART_enuInit>
	
	USART_enuSendString("Welcome Mostafa\r\n");
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
	USART_enuSendString("Are you Ready\r\n");
  ee:	82 e7       	ldi	r24, 0x72	; 114
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
	
    /* Replace with your application code */
    while (1) 
    {
		USART_enuSendString("Enter your choice: ");
  f6:	82 e8       	ldi	r24, 0x82	; 130
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
		USART_enuReceiveStringWithKey(string);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 44 02 	call	0x488	; 0x488 <USART_enuReceiveStringWithKey>
		USART_enuSendString(string);
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
		USART_enuSendString("\r\n");
 10e:	89 eb       	ldi	r24, 0xB9	; 185
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
		
		if(strcmp(string, "ledon") == 0)
 116:	66 e9       	ldi	r22, 0x96	; 150
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	0e 94 5f 02 	call	0x4be	; 0x4be <strcmp>
 122:	89 2b       	or	r24, r25
 124:	51 f4       	brne	.+20     	; 0x13a <main+0xa8>
		{
			USART_enuSendString("Led is ON\r\n");
 126:	8c e9       	ldi	r24, 0x9C	; 156
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
			DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN0, DIO_u8HIGH);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_enuSetPinVal>
 138:	de cf       	rjmp	.-68     	; 0xf6 <main+0x64>
		}
		else if(strcmp(string, "ledoff") == 0)
 13a:	68 ea       	ldi	r22, 0xA8	; 168
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 5f 02 	call	0x4be	; 0x4be <strcmp>
 146:	89 2b       	or	r24, r25
 148:	51 f4       	brne	.+20     	; 0x15e <main+0xcc>
		{
			USART_enuSendString("Led is OFF\r\n");
 14a:	8f ea       	ldi	r24, 0xAF	; 175
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
			DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN0, DIO_u8LOW);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_enuSetPinVal>
 15c:	cc cf       	rjmp	.-104    	; 0xf6 <main+0x64>
		}
		else
		{
			USART_enuSendString("Wrong Choice\r\n");
 15e:	8c eb       	ldi	r24, 0xBC	; 188
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 37 02 	call	0x46e	; 0x46e <USART_enuSendString>
			DIO_enuSetPinVal(DIO_u8PORTA, DIO_u8PIN3, DIO_u8HIGH);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	63 e0       	ldi	r22, 0x03	; 3
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_enuSetPinVal>
 170:	c2 cf       	rjmp	.-124    	; 0xf6 <main+0x64>

00000172 <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	08 f0       	brcs	.+2      	; 0x178 <DIO_enuSetPinDirection+0x6>
 176:	67 c0       	rjmp	.+206    	; 0x246 <DIO_enuSetPinDirection+0xd4>
 178:	68 30       	cpi	r22, 0x08	; 8
 17a:	08 f0       	brcs	.+2      	; 0x17e <DIO_enuSetPinDirection+0xc>
 17c:	66 c0       	rjmp	.+204    	; 0x24a <DIO_enuSetPinDirection+0xd8>
 17e:	42 30       	cpi	r20, 0x02	; 2
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_enuSetPinDirection+0x12>
 182:	65 c0       	rjmp	.+202    	; 0x24e <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	e9 f0       	breq	.+58     	; 0x1c2 <DIO_enuSetPinDirection+0x50>
 188:	30 f0       	brcs	.+12     	; 0x196 <DIO_enuSetPinDirection+0x24>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	81 f1       	breq	.+96     	; 0x1ee <DIO_enuSetPinDirection+0x7c>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	09 f4       	brne	.+2      	; 0x194 <DIO_enuSetPinDirection+0x22>
 192:	43 c0       	rjmp	.+134    	; 0x21a <DIO_enuSetPinDirection+0xa8>
 194:	5e c0       	rjmp	.+188    	; 0x252 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	06 2e       	mov	r0, r22
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_enuSetPinDirection+0x30>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_enuSetPinDirection+0x2c>
 1a6:	80 95       	com	r24
 1a8:	2a b3       	in	r18, 0x1a	; 26
 1aa:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
 1ac:	84 2f       	mov	r24, r20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_enuSetPinDirection+0x44>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_enuSetPinDirection+0x40>
 1ba:	82 2b       	or	r24, r18
 1bc:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1be:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1c0:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	06 2e       	mov	r0, r22
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_enuSetPinDirection+0x5c>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_enuSetPinDirection+0x58>
 1d2:	20 95       	com	r18
 1d4:	87 b3       	in	r24, 0x17	; 23
 1d6:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
 1d8:	84 2f       	mov	r24, r20
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_enuSetPinDirection+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_enuSetPinDirection+0x6c>
 1e6:	82 2b       	or	r24, r18
 1e8:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1ec:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	06 2e       	mov	r0, r22
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enuSetPinDirection+0x88>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_enuSetPinDirection+0x84>
 1fe:	20 95       	com	r18
 200:	84 b3       	in	r24, 0x14	; 20
 202:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 204:	84 2f       	mov	r24, r20
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_enuSetPinDirection+0x9c>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_enuSetPinDirection+0x98>
 212:	82 2b       	or	r24, r18
 214:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 216:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 218:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	06 2e       	mov	r0, r22
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_enuSetPinDirection+0xb4>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_enuSetPinDirection+0xb0>
 22a:	20 95       	com	r18
 22c:	81 b3       	in	r24, 0x11	; 17
 22e:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 230:	84 2f       	mov	r24, r20
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_enuSetPinDirection+0xc8>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_enuSetPinDirection+0xc4>
 23e:	82 2b       	or	r24, r18
 240:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 244:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	08 95       	ret
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	08 95       	ret
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 254:	08 95       	ret

00000256 <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 256:	84 30       	cpi	r24, 0x04	; 4
 258:	08 f0       	brcs	.+2      	; 0x25c <DIO_enuSetPinVal+0x6>
 25a:	67 c0       	rjmp	.+206    	; 0x32a <DIO_enuSetPinVal+0xd4>
 25c:	68 30       	cpi	r22, 0x08	; 8
 25e:	08 f0       	brcs	.+2      	; 0x262 <DIO_enuSetPinVal+0xc>
 260:	66 c0       	rjmp	.+204    	; 0x32e <DIO_enuSetPinVal+0xd8>
 262:	42 30       	cpi	r20, 0x02	; 2
 264:	08 f0       	brcs	.+2      	; 0x268 <DIO_enuSetPinVal+0x12>
 266:	65 c0       	rjmp	.+202    	; 0x332 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	e9 f0       	breq	.+58     	; 0x2a6 <DIO_enuSetPinVal+0x50>
 26c:	30 f0       	brcs	.+12     	; 0x27a <DIO_enuSetPinVal+0x24>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	81 f1       	breq	.+96     	; 0x2d2 <DIO_enuSetPinVal+0x7c>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <DIO_enuSetPinVal+0x22>
 276:	43 c0       	rjmp	.+134    	; 0x2fe <DIO_enuSetPinVal+0xa8>
 278:	5e c0       	rjmp	.+188    	; 0x336 <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	06 2e       	mov	r0, r22
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_enuSetPinVal+0x30>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_enuSetPinVal+0x2c>
 28a:	80 95       	com	r24
 28c:	2b b3       	in	r18, 0x1b	; 27
 28e:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 290:	84 2f       	mov	r24, r20
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuSetPinVal+0x44>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuSetPinVal+0x40>
 29e:	82 2b       	or	r24, r18
 2a0:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 2a4:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	06 2e       	mov	r0, r22
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_enuSetPinVal+0x5c>
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_enuSetPinVal+0x58>
 2b6:	20 95       	com	r18
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 2bc:	84 2f       	mov	r24, r20
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_enuSetPinVal+0x70>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_enuSetPinVal+0x6c>
 2ca:	82 2b       	or	r24, r18
 2cc:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 2d0:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	06 2e       	mov	r0, r22
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_enuSetPinVal+0x88>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_enuSetPinVal+0x84>
 2e2:	20 95       	com	r18
 2e4:	85 b3       	in	r24, 0x15	; 21
 2e6:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 2e8:	84 2f       	mov	r24, r20
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_enuSetPinVal+0x9c>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_enuSetPinVal+0x98>
 2f6:	82 2b       	or	r24, r18
 2f8:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 2fc:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	06 2e       	mov	r0, r22
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_enuSetPinVal+0xb4>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_enuSetPinVal+0xb0>
 30e:	20 95       	com	r18
 310:	82 b3       	in	r24, 0x12	; 18
 312:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 314:	84 2f       	mov	r24, r20
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_enuSetPinVal+0xc8>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_enuSetPinVal+0xc4>
 322:	82 2b       	or	r24, r18
 324:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 326:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 328:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	08 95       	ret
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	08 95       	ret
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 338:	08 95       	ret

0000033a <__vector_1>:
	return Local_enuErrorState;
}

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI0] != NULL)
 35c:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <EXTI_APFunc>
 360:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <EXTI_APFunc+0x1>
 364:	30 97       	sbiw	r30, 0x00	; 0
 366:	29 f0       	breq	.+10     	; 0x372 <__vector_1+0x38>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
 368:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 36c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <__data_end+0x1>
 370:	09 95       	icall
	}
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI1] != NULL)
 3b6:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <EXTI_APFunc+0x2>
 3ba:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <EXTI_APFunc+0x3>
 3be:	30 97       	sbiw	r30, 0x00	; 0
 3c0:	29 f0       	breq	.+10     	; 0x3cc <__vector_2+0x38>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
 3c2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end+0x2>
 3c6:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <__data_end+0x3>
 3ca:	09 95       	icall
	}
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI2] != NULL)
 410:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <EXTI_APFunc+0x4>
 414:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <EXTI_APFunc+0x5>
 418:	30 97       	sbiw	r30, 0x00	; 0
 41a:	29 f0       	breq	.+10     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
 41c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__data_end+0x4>
 420:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <__data_end+0x5>
 424:	09 95       	icall
	}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <USART_enuInit>:
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 448:	8b b1       	in	r24, 0x0b	; 11
 44a:	8d 7f       	andi	r24, 0xFD	; 253
 44c:	8b b9       	out	0x0b, r24	; 11
 44e:	8a b1       	in	r24, 0x0a	; 10
 450:	88 60       	ori	r24, 0x08	; 8
 452:	8a b9       	out	0x0a, r24	; 10
 454:	8a b1       	in	r24, 0x0a	; 10
 456:	80 61       	ori	r24, 0x10	; 16
 458:	8a b9       	out	0x0a, r24	; 10
 45a:	8a b1       	in	r24, 0x0a	; 10
 45c:	8b 7f       	andi	r24, 0xFB	; 251
 45e:	8a b9       	out	0x0a, r24	; 10
 460:	86 e8       	ldi	r24, 0x86	; 134
 462:	80 bd       	out	0x20, r24	; 32
 464:	83 e3       	ldi	r24, 0x33	; 51
 466:	89 b9       	out	0x09, r24	; 9
 468:	10 bc       	out	0x20, r1	; 32
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret

0000046e <USART_enuSendString>:
 46e:	fc 01       	movw	r30, r24
 470:	89 2b       	or	r24, r25
 472:	31 f4       	brne	.+12     	; 0x480 <USART_enuSendString+0x12>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	08 95       	ret
 478:	5d 9b       	sbis	0x0b, 5	; 11
 47a:	fe cf       	rjmp	.-4      	; 0x478 <USART_enuSendString+0xa>
 47c:	8c b9       	out	0x0c, r24	; 12
 47e:	31 96       	adiw	r30, 0x01	; 1
 480:	80 81       	ld	r24, Z
 482:	81 11       	cpse	r24, r1
 484:	f9 cf       	rjmp	.-14     	; 0x478 <USART_enuSendString+0xa>
 486:	08 95       	ret

00000488 <USART_enuReceiveStringWithKey>:


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
 488:	ac 01       	movw	r20, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
	u8 Local_u8StringKey = 0;
	
	if(Copy_Pu8ReceivedString != NULL)
 48a:	89 2b       	or	r24, r25
 48c:	b1 f0       	breq	.+44     	; 0x4ba <USART_enuReceiveStringWithKey+0x32>
	{
		while(!((UCSRA >> RXC) & 1));
 48e:	5f 9b       	sbis	0x0b, 7	; 11
 490:	fe cf       	rjmp	.-4      	; 0x48e <USART_enuReceiveStringWithKey+0x6>
		Local_u8StringKey = UDR;
 492:	3c b1       	in	r19, 0x0c	; 12

ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8String = 0, Local_u8CharIndex = 0;
 494:	20 e0       	ldi	r18, 0x00	; 0
}


ES_t USART_enuReceiveStringWithKey(u8 *Copy_Pu8ReceivedString)
{
	ES_t Local_enuErrorState = ES_NOK;
 496:	81 e0       	ldi	r24, 0x01	; 1
		while(!((UCSRA >> RXC) & 1));
		Local_u8StringKey = UDR;
		
		while(1)
		{
			while(!((UCSRA >> RXC) & 1));
 498:	5f 9b       	sbis	0x0b, 7	; 11
 49a:	fe cf       	rjmp	.-4      	; 0x498 <USART_enuReceiveStringWithKey+0x10>
			Local_u8String = UDR;
 49c:	9c b1       	in	r25, 0x0c	; 12
			
			if(Local_u8String == Local_u8StringKey)
 49e:	39 13       	cpse	r19, r25
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <USART_enuReceiveStringWithKey+0x24>
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
 4a2:	fa 01       	movw	r30, r20
 4a4:	e2 0f       	add	r30, r18
 4a6:	f1 1d       	adc	r31, r1
 4a8:	10 82       	st	Z, r1
 4aa:	08 95       	ret
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
 4ac:	fa 01       	movw	r30, r20
 4ae:	e2 0f       	add	r30, r18
 4b0:	f1 1d       	adc	r31, r1
 4b2:	90 83       	st	Z, r25
			}
			
			Local_enuErrorState = ES_OK;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
				Copy_Pu8ReceivedString[Local_u8CharIndex] = '\0';
				break;
			}
			else
			{
				Copy_Pu8ReceivedString[Local_u8CharIndex++] = Local_u8String;
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
			}
			
			Local_enuErrorState = ES_OK;
		}
 4b8:	ef cf       	rjmp	.-34     	; 0x498 <USART_enuReceiveStringWithKey+0x10>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 4ba:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_enuErrorState;
 4bc:	08 95       	ret

000004be <strcmp>:
 4be:	fb 01       	movw	r30, r22
 4c0:	dc 01       	movw	r26, r24
 4c2:	8d 91       	ld	r24, X+
 4c4:	01 90       	ld	r0, Z+
 4c6:	80 19       	sub	r24, r0
 4c8:	01 10       	cpse	r0, r1
 4ca:	d9 f3       	breq	.-10     	; 0x4c2 <strcmp+0x4>
 4cc:	99 0b       	sbc	r25, r25
 4ce:	08 95       	ret

000004d0 <_exit>:
 4d0:	f8 94       	cli

000004d2 <__stop_program>:
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__stop_program>
