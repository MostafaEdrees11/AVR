
EXTI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  000009d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001659  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f63  00000000  00000000  00002c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00003c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c9  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001339  00000000  00000000  000047b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_1>
   8:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_2>
   c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  8a:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Seven_Segment_enuInit>:

#include "Seven_Segment_config.h"
#include "Seven_Segment_priv.h"

ES_t Seven_Segment_enuInit(void)
{
  92:	4f 92       	push	r4
  94:	5f 92       	push	r5
  96:	6f 92       	push	r6
  98:	7f 92       	push	r7
  9a:	8f 92       	push	r8
  9c:	9f 92       	push	r9
  9e:	af 92       	push	r10
  a0:	bf 92       	push	r11
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
	ES_t Local_u8ErrorState = ES_NOK;
	
	u32 Local_u32CheckError = 0;
	u8 Local_u8Iterator = 0;
	
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << Local_u8Iterator);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
  b8:	88 2e       	mov	r8, r24
  ba:	91 2c       	mov	r9, r1
  bc:	a1 2c       	mov	r10, r1
  be:	b1 2c       	mov	r11, r1
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
  ca:	c8 2e       	mov	r12, r24
  cc:	d1 2c       	mov	r13, r1
  ce:	cc 0c       	add	r12, r12
  d0:	dd 1c       	adc	r13, r13
  d2:	cc 0c       	add	r12, r12
  d4:	dd 1c       	adc	r13, r13
  d6:	cc 0c       	add	r12, r12
  d8:	dd 1c       	adc	r13, r13
  da:	0d 2c       	mov	r0, r13
  dc:	00 0c       	add	r0, r0
  de:	ee 08       	sbc	r14, r14
  e0:	ff 08       	sbc	r15, r15
  e2:	c8 28       	or	r12, r8
  e4:	d9 28       	or	r13, r9
  e6:	ea 28       	or	r14, r10
  e8:	fb 28       	or	r15, r11
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
  f4:	20 e4       	ldi	r18, 0x40	; 64
  f6:	82 9f       	mul	r24, r18
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	2c 01       	movw	r4, r24
  fe:	99 0f       	add	r25, r25
 100:	66 08       	sbc	r6, r6
 102:	77 08       	sbc	r7, r7
 104:	c4 28       	or	r12, r4
 106:	d5 28       	or	r13, r5
 108:	e6 28       	or	r14, r6
 10a:	f7 28       	or	r15, r7
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
 116:	48 2e       	mov	r4, r24
 118:	51 2c       	mov	r5, r1
 11a:	54 2c       	mov	r5, r4
 11c:	44 24       	eor	r4, r4
 11e:	55 0c       	add	r5, r5
 120:	05 2c       	mov	r0, r5
 122:	00 0c       	add	r0, r0
 124:	66 08       	sbc	r6, r6
 126:	77 08       	sbc	r7, r7
 128:	4c 28       	or	r4, r12
 12a:	5d 28       	or	r5, r13
 12c:	6e 28       	or	r6, r14
 12e:	7f 28       	or	r7, r15
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	64 e0       	ldi	r22, 0x04	; 4
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
 13a:	c8 2e       	mov	r12, r24
 13c:	d1 2c       	mov	r13, r1
 13e:	dc 2c       	mov	r13, r12
 140:	cc 24       	eor	r12, r12
 142:	dd 0c       	add	r13, r13
 144:	dd 0c       	add	r13, r13
 146:	dd 0c       	add	r13, r13
 148:	dd 0c       	add	r13, r13
 14a:	0d 2c       	mov	r0, r13
 14c:	00 0c       	add	r0, r0
 14e:	ee 08       	sbc	r14, r14
 150:	ff 08       	sbc	r15, r15
 152:	46 01       	movw	r8, r12
 154:	57 01       	movw	r10, r14
 156:	84 28       	or	r8, r4
 158:	95 28       	or	r9, r5
 15a:	a6 28       	or	r10, r6
 15c:	b7 28       	or	r11, r7
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_FPORT, SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
 168:	08 2f       	mov	r16, r24
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	11 27       	eor	r17, r17
 16e:	06 95       	lsr	r16
 170:	17 95       	ror	r17
 172:	00 27       	eor	r16, r16
 174:	01 2e       	mov	r0, r17
 176:	00 0c       	add	r0, r0
 178:	22 0b       	sbc	r18, r18
 17a:	33 0b       	sbc	r19, r19
 17c:	68 01       	movw	r12, r16
 17e:	79 01       	movw	r14, r18
 180:	c8 28       	or	r12, r8
 182:	d9 28       	or	r13, r9
 184:	ea 28       	or	r14, r10
 186:	fb 28       	or	r15, r11
	Local_u32CheckError |= (DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator += ERROR_STATE_SIZE));
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	66 e0       	ldi	r22, 0x06	; 6
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
 192:	08 2f       	mov	r16, r24
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	11 27       	eor	r17, r17
 198:	00 27       	eor	r16, r16
 19a:	01 2e       	mov	r0, r17
 19c:	00 0c       	add	r0, r0
 19e:	22 0b       	sbc	r18, r18
 1a0:	33 0b       	sbc	r19, r19
 1a2:	0c 29       	or	r16, r12
 1a4:	1d 29       	or	r17, r13
 1a6:	2e 29       	or	r18, r14
 1a8:	3f 29       	or	r19, r15
	
	*((u8 *)0x5c) = 0;
	*((u8 *)0x4b) = 0;
	*((u8 *)0x4a) = 0;
	
	*((u8 *)0x5c) = (u8)Local_u32CheckError;
 1aa:	0c bf       	out	0x3c, r16	; 60
	*((u8 *)0x4b) = (u8)(Local_u32CheckError >> 8);
 1ac:	1b bd       	out	0x2b, r17	; 43
	*((u8 *)0x4a) = (u8)(Local_u32CheckError >> 16);
 1ae:	2a bd       	out	0x2a, r18	; 42
	
	for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <Seven_Segment_enuInit+0x148>
	{
		if(((Local_u32CheckError >> Local_u8Iterator) & ERROR_STATE_MASK) != ES_OK)
 1b4:	b9 01       	movw	r22, r18
 1b6:	a8 01       	movw	r20, r16
 1b8:	09 2e       	mov	r0, r25
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <Seven_Segment_enuInit+0x132>
 1bc:	76 95       	lsr	r23
 1be:	67 95       	ror	r22
 1c0:	57 95       	ror	r21
 1c2:	47 95       	ror	r20
 1c4:	0a 94       	dec	r0
 1c6:	d2 f7       	brpl	.-12     	; 0x1bc <Seven_Segment_enuInit+0x12a>
 1c8:	47 70       	andi	r20, 0x07	; 7
 1ca:	55 27       	eor	r21, r21
 1cc:	66 27       	eor	r22, r22
 1ce:	77 27       	eor	r23, r23
 1d0:	45 2b       	or	r20, r21
 1d2:	46 2b       	or	r20, r22
 1d4:	47 2b       	or	r20, r23
 1d6:	29 f4       	brne	.+10     	; 0x1e2 <Seven_Segment_enuInit+0x150>
	
	*((u8 *)0x5c) = (u8)Local_u32CheckError;
	*((u8 *)0x4b) = (u8)(Local_u32CheckError >> 8);
	*((u8 *)0x4a) = (u8)(Local_u32CheckError >> 16);
	
	for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
 1d8:	9d 5f       	subi	r25, 0xFD	; 253
 1da:	90 32       	cpi	r25, 0x20	; 32
 1dc:	58 f3       	brcs	.-42     	; 0x1b4 <Seven_Segment_enuInit+0x122>
	
	#else
	#error "Dot Pin has a wrong configuration"
	#endif
	
	return Local_u8ErrorState;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <Seven_Segment_enuInit+0x152>
	
	for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
	{
		if(((Local_u32CheckError >> Local_u8Iterator) & ERROR_STATE_MASK) != ES_OK)
		{
			return Local_u8ErrorState;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
	#else
	#error "Dot Pin has a wrong configuration"
	#endif
	
	return Local_u8ErrorState;
}
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	af 90       	pop	r10
 1f4:	9f 90       	pop	r9
 1f6:	8f 90       	pop	r8
 1f8:	7f 90       	pop	r7
 1fa:	6f 90       	pop	r6
 1fc:	5f 90       	pop	r5
 1fe:	4f 90       	pop	r4
 200:	08 95       	ret

00000202 <Seven_Segment_enuDisplayNumber>:

ES_t Seven_Segment_enuDisplayNumber(u8 Copy_u8Number)
{
 202:	4f 92       	push	r4
 204:	5f 92       	push	r5
 206:	6f 92       	push	r6
 208:	7f 92       	push	r7
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	u32 Local_u32CheckError = 0;
	u8 Local_u8Iterator = 0;
	
	if(Copy_u8Number < 10)
 21e:	8a 30       	cpi	r24, 0x0A	; 10
 220:	08 f0       	brcs	.+2      	; 0x224 <Seven_Segment_enuDisplayNumber+0x22>
 222:	a9 c0       	rjmp	.+338    	; 0x376 <Seven_Segment_enuDisplayNumber+0x174>
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_DPORT, SEG_DPIN, !((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_EPORT, SEG_EPIN, !((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_FPORT, SEG_FPIN, !((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_GPORT, SEG_GPIN, !((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
		#elif SEG_TYPE == COMMON_CATHODE
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_APORT, SEG_APIN, ((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator);
 224:	c8 2f       	mov	r28, r24
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	c0 5a       	subi	r28, 0xA0	; 160
 22a:	df 4f       	sbci	r29, 0xFF	; 255
 22c:	48 81       	ld	r20, Y
 22e:	41 70       	andi	r20, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 238:	88 2e       	mov	r8, r24
 23a:	91 2c       	mov	r9, r1
 23c:	a1 2c       	mov	r10, r1
 23e:	b1 2c       	mov	r11, r1
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_BPORT, SEG_BPIN, ((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 240:	48 81       	ld	r20, Y
 242:	46 95       	lsr	r20
 244:	41 70       	andi	r20, 0x01	; 1
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	c9 01       	movw	r24, r18
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	09 2e       	mov	r0, r25
 262:	00 0c       	add	r0, r0
 264:	aa 0b       	sbc	r26, r26
 266:	bb 0b       	sbc	r27, r27
 268:	88 2a       	or	r8, r24
 26a:	99 2a       	or	r9, r25
 26c:	aa 2a       	or	r10, r26
 26e:	bb 2a       	or	r11, r27
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_CPORT, SEG_CPIN, ((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 270:	48 81       	ld	r20, Y
 272:	42 fb       	bst	r20, 2
 274:	44 27       	eor	r20, r20
 276:	40 f9       	bld	r20, 0
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 280:	20 e4       	ldi	r18, 0x40	; 64
 282:	82 9f       	mul	r24, r18
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	2c 01       	movw	r4, r24
 28a:	99 0f       	add	r25, r25
 28c:	66 08       	sbc	r6, r6
 28e:	77 08       	sbc	r7, r7
 290:	48 28       	or	r4, r8
 292:	59 28       	or	r5, r9
 294:	6a 28       	or	r6, r10
 296:	7b 28       	or	r7, r11
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_DPORT, SEG_DPIN, ((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 298:	48 81       	ld	r20, Y
 29a:	43 fb       	bst	r20, 3
 29c:	44 27       	eor	r20, r20
 29e:	40 f9       	bld	r20, 0
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 2a8:	c8 2e       	mov	r12, r24
 2aa:	d1 2c       	mov	r13, r1
 2ac:	dc 2c       	mov	r13, r12
 2ae:	cc 24       	eor	r12, r12
 2b0:	dd 0c       	add	r13, r13
 2b2:	0d 2c       	mov	r0, r13
 2b4:	00 0c       	add	r0, r0
 2b6:	ee 08       	sbc	r14, r14
 2b8:	ff 08       	sbc	r15, r15
 2ba:	46 01       	movw	r8, r12
 2bc:	57 01       	movw	r10, r14
 2be:	84 28       	or	r8, r4
 2c0:	95 28       	or	r9, r5
 2c2:	a6 28       	or	r10, r6
 2c4:	b7 28       	or	r11, r7
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_EPORT, SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 2c6:	48 81       	ld	r20, Y
 2c8:	42 95       	swap	r20
 2ca:	41 70       	andi	r20, 0x01	; 1
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 2d4:	c8 2e       	mov	r12, r24
 2d6:	d1 2c       	mov	r13, r1
 2d8:	dc 2c       	mov	r13, r12
 2da:	cc 24       	eor	r12, r12
 2dc:	dd 0c       	add	r13, r13
 2de:	dd 0c       	add	r13, r13
 2e0:	dd 0c       	add	r13, r13
 2e2:	dd 0c       	add	r13, r13
 2e4:	0d 2c       	mov	r0, r13
 2e6:	00 0c       	add	r0, r0
 2e8:	ee 08       	sbc	r14, r14
 2ea:	ff 08       	sbc	r15, r15
 2ec:	c8 28       	or	r12, r8
 2ee:	d9 28       	or	r13, r9
 2f0:	ea 28       	or	r14, r10
 2f2:	fb 28       	or	r15, r11
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_FPORT, SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 2f4:	48 81       	ld	r20, Y
 2f6:	45 fb       	bst	r20, 5
 2f8:	44 27       	eor	r20, r20
 2fa:	40 f9       	bld	r20, 0
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	99 27       	eor	r25, r25
 308:	86 95       	lsr	r24
 30a:	97 95       	ror	r25
 30c:	88 27       	eor	r24, r24
 30e:	09 2e       	mov	r0, r25
 310:	00 0c       	add	r0, r0
 312:	aa 0b       	sbc	r26, r26
 314:	bb 0b       	sbc	r27, r27
 316:	c8 2a       	or	r12, r24
 318:	d9 2a       	or	r13, r25
 31a:	ea 2a       	or	r14, r26
 31c:	fb 2a       	or	r15, r27
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_GPORT, SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
 31e:	48 81       	ld	r20, Y
 320:	46 fb       	bst	r20, 6
 322:	44 27       	eor	r20, r20
 324:	40 f9       	bld	r20, 0
 326:	66 e0       	ldi	r22, 0x06	; 6
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	99 27       	eor	r25, r25
 332:	88 27       	eor	r24, r24
 334:	09 2e       	mov	r0, r25
 336:	00 0c       	add	r0, r0
 338:	aa 0b       	sbc	r26, r26
 33a:	bb 0b       	sbc	r27, r27
 33c:	c8 2a       	or	r12, r24
 33e:	d9 2a       	or	r13, r25
 340:	ea 2a       	or	r14, r26
 342:	fb 2a       	or	r15, r27
		#else
		#error "Seven Segment Type has a wrong configuration"
		#endif
		
		for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	13 c0       	rjmp	.+38     	; 0x36e <Seven_Segment_enuDisplayNumber+0x16c>
		{
			if(((Local_u32CheckError >> Local_u8Iterator) & ERROR_STATE_MASK) != ES_OK)
 348:	b7 01       	movw	r22, r14
 34a:	a6 01       	movw	r20, r12
 34c:	09 2e       	mov	r0, r25
 34e:	04 c0       	rjmp	.+8      	; 0x358 <Seven_Segment_enuDisplayNumber+0x156>
 350:	76 95       	lsr	r23
 352:	67 95       	ror	r22
 354:	57 95       	ror	r21
 356:	47 95       	ror	r20
 358:	0a 94       	dec	r0
 35a:	d2 f7       	brpl	.-12     	; 0x350 <Seven_Segment_enuDisplayNumber+0x14e>
 35c:	47 70       	andi	r20, 0x07	; 7
 35e:	55 27       	eor	r21, r21
 360:	66 27       	eor	r22, r22
 362:	77 27       	eor	r23, r23
 364:	45 2b       	or	r20, r21
 366:	46 2b       	or	r20, r22
 368:	47 2b       	or	r20, r23
 36a:	39 f4       	brne	.+14     	; 0x37a <Seven_Segment_enuDisplayNumber+0x178>
		Local_u32CheckError |= (DIO_enuSetPinVal(SEG_GPORT, SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator += ERROR_STATE_SIZE));
		#else
		#error "Seven Segment Type has a wrong configuration"
		#endif
		
		for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
 36c:	9d 5f       	subi	r25, 0xFD	; 253
 36e:	90 32       	cpi	r25, 0x20	; 32
 370:	58 f3       	brcs	.-42     	; 0x348 <Seven_Segment_enuDisplayNumber+0x146>
			if(((Local_u32CheckError >> Local_u8Iterator) & ERROR_STATE_MASK) != ES_OK)
			{
				return Local_u8ErrorState;
			}
		}
		Local_u8ErrorState = ES_OK;
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	03 c0       	rjmp	.+6      	; 0x37c <Seven_Segment_enuDisplayNumber+0x17a>
	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	01 c0       	rjmp	.+2      	; 0x37c <Seven_Segment_enuDisplayNumber+0x17a>
		
		for(Local_u8Iterator = 0; Local_u8Iterator < sizeof(Local_u32CheckError) * 8; Local_u8Iterator += ERROR_STATE_SIZE)
		{
			if(((Local_u32CheckError >> Local_u8Iterator) & ERROR_STATE_MASK) != ES_OK)
			{
				return Local_u8ErrorState;
 37a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_u8ErrorState;
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	7f 90       	pop	r7
 392:	6f 90       	pop	r6
 394:	5f 90       	pop	r5
 396:	4f 90       	pop	r4
 398:	08 95       	ret

0000039a <Toggle_Led>:
    {
    }
}

volatile void Toggle_Led(void *ptr)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
	Seven_Segment_enuDisplayNumber(*((u8 *)ptr));
 3a0:	88 81       	ld	r24, Y
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 01 01 	call	0x202	; 0x202 <Seven_Segment_enuDisplayNumber>
	if((*((u8 *)ptr) + 1) > 9)
 3a8:	28 81       	ld	r18, Y
 3aa:	82 2f       	mov	r24, r18
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0a 97       	sbiw	r24, 0x0a	; 10
 3b2:	14 f0       	brlt	.+4      	; 0x3b8 <Toggle_Led+0x1e>
	{
		*((u8 *)ptr) = 0;
 3b4:	18 82       	st	Y, r1
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Toggle_Led+0x22>
	}
	else
	{
		*((u8 *)ptr) += 1;	
 3b8:	2f 5f       	subi	r18, 0xFF	; 255
 3ba:	28 83       	st	Y, r18
	}
	DIO_enuTogPinVal(DIO_u8PORTB,DIO_u8PIN7);
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <DIO_enuTogPinVal>
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <main>:
extern EXTI_Configuration_t EXTI_AStrEXTI_Config[MAX_NUM_EXTI];

volatile void Toggle_Led(void *ptr);

int main(void)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
	/* initialize the pins of led & button */
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULL_UP);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
	DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN7, DIO_u8OUTPUT);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	67 e0       	ldi	r22, 0x07	; 7
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 13 02 	call	0x426	; 0x426 <DIO_enuSetPinDirection>
	
	/* initialize the seven segment */
	Seven_Segment_enuInit();
 3f2:	0e 94 49 00 	call	0x92	; 0x92 <Seven_Segment_enuInit>
	
	/* initialize External interrupt */
	EXTI_enuInit(EXTI_AStrEXTI_Config);
 3f6:	8a e6       	ldi	r24, 0x6A	; 106
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 39 03 	call	0x672	; 0x672 <EXTI_enuInit>
	
	u8 x = 0;
 3fe:	19 82       	std	Y+1, r1	; 0x01
	/* CallBack Function for EXTI0 */
	EXTI_enuCallBackFunc(&Toggle_Led, &x, 0);
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	be 01       	movw	r22, r28
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8d ec       	ldi	r24, 0xCD	; 205
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 ed 03 	call	0x7da	; 0x7da <EXTI_enuCallBackFunc>
	
	/* Enable INT0 */
	EXTI_enuEnable(EXTI0);
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 c9 03 	call	0x792	; 0x792 <EXTI_enuEnable>
	
	/* enable global interrupt */
	GIE_enuGloable_Interrupt_Enable();
 416:	0e 94 8b 04 	call	0x916	; 0x916 <GIE_enuGloable_Interrupt_Enable>
	
	DIO_enuSetPinVal(DIO_u8PORTB,DIO_u8PIN7, DIO_u8LOW);
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_enuSetPinVal>
 424:	ff cf       	rjmp	.-2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>

00000426 <DIO_enuSetPinDirection>:
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 426:	84 30       	cpi	r24, 0x04	; 4
 428:	08 f0       	brcs	.+2      	; 0x42c <DIO_enuSetPinDirection+0x6>
 42a:	67 c0       	rjmp	.+206    	; 0x4fa <DIO_enuSetPinDirection+0xd4>
 42c:	68 30       	cpi	r22, 0x08	; 8
 42e:	08 f0       	brcs	.+2      	; 0x432 <DIO_enuSetPinDirection+0xc>
 430:	66 c0       	rjmp	.+204    	; 0x4fe <DIO_enuSetPinDirection+0xd8>
 432:	42 30       	cpi	r20, 0x02	; 2
 434:	08 f0       	brcs	.+2      	; 0x438 <DIO_enuSetPinDirection+0x12>
 436:	65 c0       	rjmp	.+202    	; 0x502 <DIO_enuSetPinDirection+0xdc>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	e9 f0       	breq	.+58     	; 0x476 <DIO_enuSetPinDirection+0x50>
 43c:	30 f0       	brcs	.+12     	; 0x44a <DIO_enuSetPinDirection+0x24>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	81 f1       	breq	.+96     	; 0x4a2 <DIO_enuSetPinDirection+0x7c>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	09 f4       	brne	.+2      	; 0x448 <DIO_enuSetPinDirection+0x22>
 446:	43 c0       	rjmp	.+134    	; 0x4ce <DIO_enuSetPinDirection+0xa8>
 448:	5e c0       	rjmp	.+188    	; 0x506 <DIO_enuSetPinDirection+0xe0>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	06 2e       	mov	r0, r22
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_enuSetPinDirection+0x30>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_enuSetPinDirection+0x2c>
 45a:	80 95       	com	r24
 45c:	2a b3       	in	r18, 0x1a	; 26
 45e:	28 23       	and	r18, r24
 460:	84 2f       	mov	r24, r20
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_enuSetPinDirection+0x44>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_enuSetPinDirection+0x40>
 46e:	82 2b       	or	r24, r18
 470:	8a bb       	out	0x1a, r24	; 26
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	06 2e       	mov	r0, r22
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_enuSetPinDirection+0x5c>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_enuSetPinDirection+0x58>
 486:	20 95       	com	r18
 488:	87 b3       	in	r24, 0x17	; 23
 48a:	28 23       	and	r18, r24
 48c:	84 2f       	mov	r24, r20
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_enuSetPinDirection+0x70>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_enuSetPinDirection+0x6c>
 49a:	82 2b       	or	r24, r18
 49c:	87 bb       	out	0x17, r24	; 23
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	06 2e       	mov	r0, r22
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_enuSetPinDirection+0x88>
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_enuSetPinDirection+0x84>
 4b2:	20 95       	com	r18
 4b4:	84 b3       	in	r24, 0x14	; 20
 4b6:	28 23       	and	r18, r24
 4b8:	84 2f       	mov	r24, r20
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_enuSetPinDirection+0x9c>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_enuSetPinDirection+0x98>
 4c6:	82 2b       	or	r24, r18
 4c8:	84 bb       	out	0x14, r24	; 20
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	06 2e       	mov	r0, r22
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_enuSetPinDirection+0xb4>
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_enuSetPinDirection+0xb0>
 4de:	20 95       	com	r18
 4e0:	81 b3       	in	r24, 0x11	; 17
 4e2:	28 23       	and	r18, r24
 4e4:	84 2f       	mov	r24, r20
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_enuSetPinDirection+0xc8>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_enuSetPinDirection+0xc4>
 4f2:	82 2b       	or	r24, r18
 4f4:	81 bb       	out	0x11, r24	; 17
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	83 e0       	ldi	r24, 0x03	; 3
 4fc:	08 95       	ret
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	08 95       	ret
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	08 95       	ret
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	08 95       	ret

0000050a <DIO_enuSetPinVal>:
 50a:	84 30       	cpi	r24, 0x04	; 4
 50c:	08 f0       	brcs	.+2      	; 0x510 <DIO_enuSetPinVal+0x6>
 50e:	67 c0       	rjmp	.+206    	; 0x5de <DIO_enuSetPinVal+0xd4>
 510:	68 30       	cpi	r22, 0x08	; 8
 512:	08 f0       	brcs	.+2      	; 0x516 <DIO_enuSetPinVal+0xc>
 514:	66 c0       	rjmp	.+204    	; 0x5e2 <DIO_enuSetPinVal+0xd8>
 516:	42 30       	cpi	r20, 0x02	; 2
 518:	08 f0       	brcs	.+2      	; 0x51c <DIO_enuSetPinVal+0x12>
 51a:	65 c0       	rjmp	.+202    	; 0x5e6 <DIO_enuSetPinVal+0xdc>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	e9 f0       	breq	.+58     	; 0x55a <DIO_enuSetPinVal+0x50>
 520:	30 f0       	brcs	.+12     	; 0x52e <DIO_enuSetPinVal+0x24>
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	81 f1       	breq	.+96     	; 0x586 <DIO_enuSetPinVal+0x7c>
 526:	83 30       	cpi	r24, 0x03	; 3
 528:	09 f4       	brne	.+2      	; 0x52c <DIO_enuSetPinVal+0x22>
 52a:	43 c0       	rjmp	.+134    	; 0x5b2 <DIO_enuSetPinVal+0xa8>
 52c:	5e c0       	rjmp	.+188    	; 0x5ea <DIO_enuSetPinVal+0xe0>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	06 2e       	mov	r0, r22
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_enuSetPinVal+0x30>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_enuSetPinVal+0x2c>
 53e:	80 95       	com	r24
 540:	2b b3       	in	r18, 0x1b	; 27
 542:	28 23       	and	r18, r24
 544:	84 2f       	mov	r24, r20
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_enuSetPinVal+0x44>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_enuSetPinVal+0x40>
 552:	82 2b       	or	r24, r18
 554:	8b bb       	out	0x1b, r24	; 27
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	06 2e       	mov	r0, r22
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_enuSetPinVal+0x5c>
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_enuSetPinVal+0x58>
 56a:	20 95       	com	r18
 56c:	88 b3       	in	r24, 0x18	; 24
 56e:	28 23       	and	r18, r24
 570:	84 2f       	mov	r24, r20
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_enuSetPinVal+0x70>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_enuSetPinVal+0x6c>
 57e:	82 2b       	or	r24, r18
 580:	88 bb       	out	0x18, r24	; 24
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret
 586:	21 e0       	ldi	r18, 0x01	; 1
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	06 2e       	mov	r0, r22
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_enuSetPinVal+0x88>
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_enuSetPinVal+0x84>
 596:	20 95       	com	r18
 598:	85 b3       	in	r24, 0x15	; 21
 59a:	28 23       	and	r18, r24
 59c:	84 2f       	mov	r24, r20
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_enuSetPinVal+0x9c>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_enuSetPinVal+0x98>
 5aa:	82 2b       	or	r24, r18
 5ac:	85 bb       	out	0x15, r24	; 21
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	08 95       	ret
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	06 2e       	mov	r0, r22
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_enuSetPinVal+0xb4>
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_enuSetPinVal+0xb0>
 5c2:	20 95       	com	r18
 5c4:	82 b3       	in	r24, 0x12	; 18
 5c6:	28 23       	and	r18, r24
 5c8:	84 2f       	mov	r24, r20
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_enuSetPinVal+0xc8>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_enuSetPinVal+0xc4>
 5d6:	82 2b       	or	r24, r18
 5d8:	82 bb       	out	0x12, r24	; 18
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	08 95       	ret
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	08 95       	ret
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	08 95       	ret
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	08 95       	ret

000005ee <DIO_enuTogPinVal>:
**/
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
 5ee:	84 30       	cpi	r24, 0x04	; 4
 5f0:	d0 f5       	brcc	.+116    	; 0x666 <DIO_enuTogPinVal+0x78>
 5f2:	68 30       	cpi	r22, 0x08	; 8
 5f4:	d0 f5       	brcc	.+116    	; 0x66a <DIO_enuTogPinVal+0x7c>
	{
		switch(Copy_u8PortID)
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	91 f0       	breq	.+36     	; 0x61e <DIO_enuTogPinVal+0x30>
 5fa:	28 f0       	brcs	.+10     	; 0x606 <DIO_enuTogPinVal+0x18>
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	d9 f0       	breq	.+54     	; 0x636 <DIO_enuTogPinVal+0x48>
 600:	83 30       	cpi	r24, 0x03	; 3
 602:	29 f1       	breq	.+74     	; 0x64e <DIO_enuTogPinVal+0x60>
 604:	34 c0       	rjmp	.+104    	; 0x66e <DIO_enuTogPinVal+0x80>
		{
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_enuTogPinVal+0x22>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_enuTogPinVal+0x1e>
 614:	9b b3       	in	r25, 0x1b	; 27
 616:	89 27       	eor	r24, r25
 618:	8b bb       	out	0x1b, r24	; 27
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 61a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
 61c:	08 95       	ret
			
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_enuTogPinVal+0x3a>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_enuTogPinVal+0x36>
 62c:	98 b3       	in	r25, 0x18	; 24
 62e:	89 27       	eor	r24, r25
 630:	88 bb       	out	0x18, r24	; 24
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 632:	80 e0       	ldi	r24, 0x00	; 0
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
			
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
 634:	08 95       	ret
			
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_enuTogPinVal+0x52>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_enuTogPinVal+0x4e>
 644:	95 b3       	in	r25, 0x15	; 21
 646:	89 27       	eor	r24, r25
 648:	85 bb       	out	0x15, r24	; 21
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
			
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
 64c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_enuTogPinVal+0x6a>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_enuTogPinVal+0x66>
 65c:	92 b3       	in	r25, 0x12	; 18
 65e:	89 27       	eor	r24, r25
 660:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 662:	80 e0       	ldi	r24, 0x00	; 0
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
 664:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	08 95       	ret
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 66e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
 670:	08 95       	ret

00000672 <EXTI_enuInit>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 672:	ac 01       	movw	r20, r24
 674:	89 2b       	or	r24, r25
 676:	09 f0       	breq	.+2      	; 0x67a <EXTI_enuInit+0x8>
 678:	86 c0       	rjmp	.+268    	; 0x786 <EXTI_enuInit+0x114>
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	08 95       	ret
 67e:	e9 2f       	mov	r30, r25
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	9f 01       	movw	r18, r30
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	e2 0f       	add	r30, r18
 68a:	f3 1f       	adc	r31, r19
 68c:	e4 0f       	add	r30, r20
 68e:	f5 1f       	adc	r31, r21
 690:	20 81       	ld	r18, Z
 692:	21 30       	cpi	r18, 0x01	; 1
 694:	81 f1       	breq	.+96     	; 0x6f6 <EXTI_enuInit+0x84>
 696:	20 f0       	brcs	.+8      	; 0x6a0 <EXTI_enuInit+0x2e>
 698:	22 30       	cpi	r18, 0x02	; 2
 69a:	09 f4       	brne	.+2      	; 0x69e <EXTI_enuInit+0x2c>
 69c:	57 c0       	rjmp	.+174    	; 0x74c <EXTI_enuInit+0xda>
 69e:	6a c0       	rjmp	.+212    	; 0x774 <EXTI_enuInit+0x102>
 6a0:	21 81       	ldd	r18, Z+1	; 0x01
 6a2:	21 11       	cpse	r18, r1
 6a4:	6e c0       	rjmp	.+220    	; 0x782 <EXTI_enuInit+0x110>
 6a6:	25 b7       	in	r18, 0x35	; 53
 6a8:	2c 7f       	andi	r18, 0xFC	; 252
 6aa:	25 bf       	out	0x35, r18	; 53
 6ac:	22 81       	ldd	r18, Z+2	; 0x02
 6ae:	21 30       	cpi	r18, 0x01	; 1
 6b0:	69 f0       	breq	.+26     	; 0x6cc <EXTI_enuInit+0x5a>
 6b2:	28 f0       	brcs	.+10     	; 0x6be <EXTI_enuInit+0x4c>
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	89 f0       	breq	.+34     	; 0x6da <EXTI_enuInit+0x68>
 6b8:	23 30       	cpi	r18, 0x03	; 3
 6ba:	b1 f0       	breq	.+44     	; 0x6e8 <EXTI_enuInit+0x76>
 6bc:	5d c0       	rjmp	.+186    	; 0x778 <EXTI_enuInit+0x106>
 6be:	25 b7       	in	r18, 0x35	; 53
 6c0:	2e 7f       	andi	r18, 0xFE	; 254
 6c2:	25 bf       	out	0x35, r18	; 53
 6c4:	25 b7       	in	r18, 0x35	; 53
 6c6:	2d 7f       	andi	r18, 0xFD	; 253
 6c8:	25 bf       	out	0x35, r18	; 53
 6ca:	5b c0       	rjmp	.+182    	; 0x782 <EXTI_enuInit+0x110>
 6cc:	25 b7       	in	r18, 0x35	; 53
 6ce:	21 60       	ori	r18, 0x01	; 1
 6d0:	25 bf       	out	0x35, r18	; 53
 6d2:	25 b7       	in	r18, 0x35	; 53
 6d4:	2d 7f       	andi	r18, 0xFD	; 253
 6d6:	25 bf       	out	0x35, r18	; 53
 6d8:	54 c0       	rjmp	.+168    	; 0x782 <EXTI_enuInit+0x110>
 6da:	25 b7       	in	r18, 0x35	; 53
 6dc:	2e 7f       	andi	r18, 0xFE	; 254
 6de:	25 bf       	out	0x35, r18	; 53
 6e0:	25 b7       	in	r18, 0x35	; 53
 6e2:	22 60       	ori	r18, 0x02	; 2
 6e4:	25 bf       	out	0x35, r18	; 53
 6e6:	4d c0       	rjmp	.+154    	; 0x782 <EXTI_enuInit+0x110>
 6e8:	25 b7       	in	r18, 0x35	; 53
 6ea:	21 60       	ori	r18, 0x01	; 1
 6ec:	25 bf       	out	0x35, r18	; 53
 6ee:	25 b7       	in	r18, 0x35	; 53
 6f0:	22 60       	ori	r18, 0x02	; 2
 6f2:	25 bf       	out	0x35, r18	; 53
 6f4:	46 c0       	rjmp	.+140    	; 0x782 <EXTI_enuInit+0x110>
 6f6:	21 81       	ldd	r18, Z+1	; 0x01
 6f8:	21 11       	cpse	r18, r1
 6fa:	43 c0       	rjmp	.+134    	; 0x782 <EXTI_enuInit+0x110>
 6fc:	25 b7       	in	r18, 0x35	; 53
 6fe:	23 7f       	andi	r18, 0xF3	; 243
 700:	25 bf       	out	0x35, r18	; 53
 702:	22 81       	ldd	r18, Z+2	; 0x02
 704:	21 30       	cpi	r18, 0x01	; 1
 706:	69 f0       	breq	.+26     	; 0x722 <EXTI_enuInit+0xb0>
 708:	28 f0       	brcs	.+10     	; 0x714 <EXTI_enuInit+0xa2>
 70a:	22 30       	cpi	r18, 0x02	; 2
 70c:	89 f0       	breq	.+34     	; 0x730 <EXTI_enuInit+0xbe>
 70e:	23 30       	cpi	r18, 0x03	; 3
 710:	b1 f0       	breq	.+44     	; 0x73e <EXTI_enuInit+0xcc>
 712:	34 c0       	rjmp	.+104    	; 0x77c <EXTI_enuInit+0x10a>
 714:	25 b7       	in	r18, 0x35	; 53
 716:	2b 7f       	andi	r18, 0xFB	; 251
 718:	25 bf       	out	0x35, r18	; 53
 71a:	25 b7       	in	r18, 0x35	; 53
 71c:	27 7f       	andi	r18, 0xF7	; 247
 71e:	25 bf       	out	0x35, r18	; 53
 720:	30 c0       	rjmp	.+96     	; 0x782 <EXTI_enuInit+0x110>
 722:	25 b7       	in	r18, 0x35	; 53
 724:	24 60       	ori	r18, 0x04	; 4
 726:	25 bf       	out	0x35, r18	; 53
 728:	25 b7       	in	r18, 0x35	; 53
 72a:	27 7f       	andi	r18, 0xF7	; 247
 72c:	25 bf       	out	0x35, r18	; 53
 72e:	29 c0       	rjmp	.+82     	; 0x782 <EXTI_enuInit+0x110>
 730:	25 b7       	in	r18, 0x35	; 53
 732:	2b 7f       	andi	r18, 0xFB	; 251
 734:	25 bf       	out	0x35, r18	; 53
 736:	25 b7       	in	r18, 0x35	; 53
 738:	28 60       	ori	r18, 0x08	; 8
 73a:	25 bf       	out	0x35, r18	; 53
 73c:	22 c0       	rjmp	.+68     	; 0x782 <EXTI_enuInit+0x110>
 73e:	25 b7       	in	r18, 0x35	; 53
 740:	24 60       	ori	r18, 0x04	; 4
 742:	25 bf       	out	0x35, r18	; 53
 744:	25 b7       	in	r18, 0x35	; 53
 746:	28 60       	ori	r18, 0x08	; 8
 748:	25 bf       	out	0x35, r18	; 53
 74a:	1b c0       	rjmp	.+54     	; 0x782 <EXTI_enuInit+0x110>
 74c:	21 81       	ldd	r18, Z+1	; 0x01
 74e:	21 11       	cpse	r18, r1
 750:	18 c0       	rjmp	.+48     	; 0x782 <EXTI_enuInit+0x110>
 752:	24 b7       	in	r18, 0x34	; 52
 754:	2f 7b       	andi	r18, 0xBF	; 191
 756:	24 bf       	out	0x34, r18	; 52
 758:	22 81       	ldd	r18, Z+2	; 0x02
 75a:	22 30       	cpi	r18, 0x02	; 2
 75c:	19 f0       	breq	.+6      	; 0x764 <EXTI_enuInit+0xf2>
 75e:	23 30       	cpi	r18, 0x03	; 3
 760:	29 f0       	breq	.+10     	; 0x76c <EXTI_enuInit+0xfa>
 762:	0e c0       	rjmp	.+28     	; 0x780 <EXTI_enuInit+0x10e>
 764:	24 b7       	in	r18, 0x34	; 52
 766:	2f 7b       	andi	r18, 0xBF	; 191
 768:	24 bf       	out	0x34, r18	; 52
 76a:	0b c0       	rjmp	.+22     	; 0x782 <EXTI_enuInit+0x110>
 76c:	24 b7       	in	r18, 0x34	; 52
 76e:	20 64       	ori	r18, 0x40	; 64
 770:	24 bf       	out	0x34, r18	; 52
 772:	07 c0       	rjmp	.+14     	; 0x782 <EXTI_enuInit+0x110>
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	05 c0       	rjmp	.+10     	; 0x782 <EXTI_enuInit+0x110>
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	03 c0       	rjmp	.+6      	; 0x782 <EXTI_enuInit+0x110>
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	01 c0       	rjmp	.+2      	; 0x782 <EXTI_enuInit+0x110>
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	9f 5f       	subi	r25, 0xFF	; 255
 784:	02 c0       	rjmp	.+4      	; 0x78a <EXTI_enuInit+0x118>
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	93 30       	cpi	r25, 0x03	; 3
 78c:	08 f4       	brcc	.+2      	; 0x790 <EXTI_enuInit+0x11e>
 78e:	77 cf       	rjmp	.-274    	; 0x67e <EXTI_enuInit+0xc>
 790:	08 95       	ret

00000792 <EXTI_enuEnable>:
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	f0 f4       	brcc	.+60     	; 0x7d2 <EXTI_enuEnable+0x40>
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	61 f0       	breq	.+24     	; 0x7b2 <EXTI_enuEnable+0x20>
 79a:	18 f0       	brcs	.+6      	; 0x7a2 <EXTI_enuEnable+0x10>
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	89 f0       	breq	.+34     	; 0x7c2 <EXTI_enuEnable+0x30>
 7a0:	1a c0       	rjmp	.+52     	; 0x7d6 <EXTI_enuEnable+0x44>
 7a2:	8b b7       	in	r24, 0x3b	; 59
 7a4:	8f 7b       	andi	r24, 0xBF	; 191
 7a6:	8b bf       	out	0x3b, r24	; 59
 7a8:	8b b7       	in	r24, 0x3b	; 59
 7aa:	80 64       	ori	r24, 0x40	; 64
 7ac:	8b bf       	out	0x3b, r24	; 59
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	8b b7       	in	r24, 0x3b	; 59
 7b4:	8f 77       	andi	r24, 0x7F	; 127
 7b6:	8b bf       	out	0x3b, r24	; 59
 7b8:	8b b7       	in	r24, 0x3b	; 59
 7ba:	80 68       	ori	r24, 0x80	; 128
 7bc:	8b bf       	out	0x3b, r24	; 59
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	08 95       	ret
 7c2:	8b b7       	in	r24, 0x3b	; 59
 7c4:	8f 7d       	andi	r24, 0xDF	; 223
 7c6:	8b bf       	out	0x3b, r24	; 59
 7c8:	8b b7       	in	r24, 0x3b	; 59
 7ca:	80 62       	ori	r24, 0x20	; 32
 7cc:	8b bf       	out	0x3b, r24	; 59
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	08 95       	ret
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret

000007da <EXTI_enuCallBackFunc>:

ES_t EXTI_enuCallBackFunc(volatile void (*Copy_PFuncISRFunc)(void*), volatile void *Copy_PvidISRParameter, EXTI_ID_t Copy_enuEXTI_Id)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PFuncISRFunc != NULL)
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	89 f0       	breq	.+34     	; 0x800 <__DATA_REGION_LENGTH__>
	{
		if(Copy_enuEXTI_Id < MAX_NUM_EXTI)
 7de:	43 30       	cpi	r20, 0x03	; 3
 7e0:	88 f4       	brcc	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{
			EXTI_APFunc[Copy_enuEXTI_Id] = Copy_PFuncISRFunc;
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	44 0f       	add	r20, r20
 7e6:	55 1f       	adc	r21, r21
 7e8:	fa 01       	movw	r30, r20
 7ea:	e6 58       	subi	r30, 0x86	; 134
 7ec:	ff 4f       	sbci	r31, 0xFF	; 255
 7ee:	91 83       	std	Z+1, r25	; 0x01
 7f0:	80 83       	st	Z, r24
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidISRParameter;
 7f2:	fa 01       	movw	r30, r20
 7f4:	ec 58       	subi	r30, 0x8C	; 140
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	71 83       	std	Z+1, r23	; 0x01
 7fa:	60 83       	st	Z, r22
			Local_enuErrorState = ES_OK;
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	08 95       	ret
			EXTI_APvidGenericParameters[Copy_enuEXTI_Id] = Copy_PvidISRParameter;
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 804:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 806:	08 95       	ret

00000808 <__vector_1>:

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	0f 92       	push	r0
 810:	11 24       	eor	r1, r1
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	4f 93       	push	r20
 818:	5f 93       	push	r21
 81a:	6f 93       	push	r22
 81c:	7f 93       	push	r23
 81e:	8f 93       	push	r24
 820:	9f 93       	push	r25
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI0] != NULL)
 82a:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTI_APFunc>
 82e:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTI_APFunc+0x1>
 832:	30 97       	sbiw	r30, 0x00	; 0
 834:	29 f0       	breq	.+10     	; 0x840 <__vector_1+0x38>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
 836:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 83a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 83e:	09 95       	icall
	}
}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	0f 90       	pop	r0
 85e:	1f 90       	pop	r1
 860:	18 95       	reti

00000862 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	2f 93       	push	r18
 86e:	3f 93       	push	r19
 870:	4f 93       	push	r20
 872:	5f 93       	push	r21
 874:	6f 93       	push	r22
 876:	7f 93       	push	r23
 878:	8f 93       	push	r24
 87a:	9f 93       	push	r25
 87c:	af 93       	push	r26
 87e:	bf 93       	push	r27
 880:	ef 93       	push	r30
 882:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI1] != NULL)
 884:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <EXTI_APFunc+0x2>
 888:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <EXTI_APFunc+0x3>
 88c:	30 97       	sbiw	r30, 0x00	; 0
 88e:	29 f0       	breq	.+10     	; 0x89a <__vector_2+0x38>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
 890:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end+0x2>
 894:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x3>
 898:	09 95       	icall
	}
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	0f 90       	pop	r0
 8b8:	1f 90       	pop	r1
 8ba:	18 95       	reti

000008bc <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{
 8bc:	1f 92       	push	r1
 8be:	0f 92       	push	r0
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	0f 92       	push	r0
 8c4:	11 24       	eor	r1, r1
 8c6:	2f 93       	push	r18
 8c8:	3f 93       	push	r19
 8ca:	4f 93       	push	r20
 8cc:	5f 93       	push	r21
 8ce:	6f 93       	push	r22
 8d0:	7f 93       	push	r23
 8d2:	8f 93       	push	r24
 8d4:	9f 93       	push	r25
 8d6:	af 93       	push	r26
 8d8:	bf 93       	push	r27
 8da:	ef 93       	push	r30
 8dc:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI2] != NULL)
 8de:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <EXTI_APFunc+0x4>
 8e2:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <EXTI_APFunc+0x5>
 8e6:	30 97       	sbiw	r30, 0x00	; 0
 8e8:	29 f0       	breq	.+10     	; 0x8f4 <__vector_3+0x38>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
 8ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end+0x4>
 8ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x5>
 8f2:	09 95       	icall
	}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	9f 91       	pop	r25
 8fe:	8f 91       	pop	r24
 900:	7f 91       	pop	r23
 902:	6f 91       	pop	r22
 904:	5f 91       	pop	r21
 906:	4f 91       	pop	r20
 908:	3f 91       	pop	r19
 90a:	2f 91       	pop	r18
 90c:	0f 90       	pop	r0
 90e:	0f be       	out	0x3f, r0	; 63
 910:	0f 90       	pop	r0
 912:	1f 90       	pop	r1
 914:	18 95       	reti

00000916 <GIE_enuGloable_Interrupt_Enable>:

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	SREG &= ~(MASK_BIT << GIE_I);
 916:	8f b7       	in	r24, 0x3f	; 63
 918:	8f 77       	andi	r24, 0x7F	; 127
 91a:	8f bf       	out	0x3f, r24	; 63
	SREG |= (MASK_BIT << GIE_I);
 91c:	8f b7       	in	r24, 0x3f	; 63
 91e:	80 68       	ori	r24, 0x80	; 128
 920:	8f bf       	out	0x3f, r24	; 63
	Local_enuErrorState = ES_OK;
	
	return Local_enuErrorState;
}
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
