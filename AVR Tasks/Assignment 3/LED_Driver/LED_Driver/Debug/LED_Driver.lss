
LED_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000005f6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ac  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f8  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd6  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000645  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e88  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  7a:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enuSetPinDirection+0x6>
  86:	67 c0       	rjmp	.+206    	; 0x156 <DIO_enuSetPinDirection+0xd4>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_enuSetPinDirection+0xc>
  8c:	66 c0       	rjmp	.+204    	; 0x15a <DIO_enuSetPinDirection+0xd8>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_enuSetPinDirection+0x12>
  92:	65 c0       	rjmp	.+202    	; 0x15e <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	e9 f0       	breq	.+58     	; 0xd2 <DIO_enuSetPinDirection+0x50>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_enuSetPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	81 f1       	breq	.+96     	; 0xfe <DIO_enuSetPinDirection+0x7c>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuSetPinDirection+0x22>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <DIO_enuSetPinDirection+0xa8>
  a4:	5e c0       	rjmp	.+188    	; 0x162 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	06 2e       	mov	r0, r22
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_enuSetPinDirection+0x30>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_enuSetPinDirection+0x2c>
  b6:	80 95       	com	r24
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
  bc:	84 2f       	mov	r24, r20
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_enuSetPinDirection+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_enuSetPinDirection+0x40>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  ce:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
  d0:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	06 2e       	mov	r0, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_enuSetPinDirection+0x5c>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_enuSetPinDirection+0x58>
  e2:	20 95       	com	r18
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	28 23       	and	r18, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
  e8:	84 2f       	mov	r24, r20
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_enuSetPinDirection+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_enuSetPinDirection+0x6c>
  f6:	82 2b       	or	r24, r18
  f8:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |= (Copy_u8Value << Copy_u8PinID);
			break;
  fc:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	06 2e       	mov	r0, r22
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuSetPinDirection+0x88>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuSetPinDirection+0x84>
 10e:	20 95       	com	r18
 110:	84 b3       	in	r24, 0x14	; 20
 112:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 114:	84 2f       	mov	r24, r20
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_enuSetPinDirection+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_enuSetPinDirection+0x98>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 128:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	06 2e       	mov	r0, r22
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuSetPinDirection+0xb4>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuSetPinDirection+0xb0>
 13a:	20 95       	com	r18
 13c:	81 b3       	in	r24, 0x11	; 17
 13e:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 140:	84 2f       	mov	r24, r20
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enuSetPinDirection+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_enuSetPinDirection+0xc4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 152:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 154:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	08 95       	ret
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	08 95       	ret
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 164:	08 95       	ret

00000166 <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	08 f0       	brcs	.+2      	; 0x16c <DIO_enuSetPinVal+0x6>
 16a:	67 c0       	rjmp	.+206    	; 0x23a <DIO_enuSetPinVal+0xd4>
 16c:	68 30       	cpi	r22, 0x08	; 8
 16e:	08 f0       	brcs	.+2      	; 0x172 <DIO_enuSetPinVal+0xc>
 170:	66 c0       	rjmp	.+204    	; 0x23e <DIO_enuSetPinVal+0xd8>
 172:	42 30       	cpi	r20, 0x02	; 2
 174:	08 f0       	brcs	.+2      	; 0x178 <DIO_enuSetPinVal+0x12>
 176:	65 c0       	rjmp	.+202    	; 0x242 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	e9 f0       	breq	.+58     	; 0x1b6 <DIO_enuSetPinVal+0x50>
 17c:	30 f0       	brcs	.+12     	; 0x18a <DIO_enuSetPinVal+0x24>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	81 f1       	breq	.+96     	; 0x1e2 <DIO_enuSetPinVal+0x7c>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_enuSetPinVal+0x22>
 186:	43 c0       	rjmp	.+134    	; 0x20e <DIO_enuSetPinVal+0xa8>
 188:	5e c0       	rjmp	.+188    	; 0x246 <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	06 2e       	mov	r0, r22
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_enuSetPinVal+0x30>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_enuSetPinVal+0x2c>
 19a:	80 95       	com	r24
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 1a0:	84 2f       	mov	r24, r20
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_enuSetPinVal+0x44>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_enuSetPinVal+0x40>
 1ae:	82 2b       	or	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1b4:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	06 2e       	mov	r0, r22
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_enuSetPinVal+0x5c>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_enuSetPinVal+0x58>
 1c6:	20 95       	com	r18
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 1cc:	84 2f       	mov	r24, r20
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_enuSetPinVal+0x70>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_enuSetPinVal+0x6c>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1de:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1e0:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	06 2e       	mov	r0, r22
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuSetPinVal+0x88>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuSetPinVal+0x84>
 1f2:	20 95       	com	r18
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 1f8:	84 2f       	mov	r24, r20
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_enuSetPinVal+0x9c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_enuSetPinVal+0x98>
 206:	82 2b       	or	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 20c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	06 2e       	mov	r0, r22
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_enuSetPinVal+0xb4>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_enuSetPinVal+0xb0>
 21e:	20 95       	com	r18
 220:	82 b3       	in	r24, 0x12	; 18
 222:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 224:	84 2f       	mov	r24, r20
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_enuSetPinVal+0xc8>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_enuSetPinVal+0xc4>
 232:	82 2b       	or	r24, r18
 234:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 236:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 238:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	08 95       	ret
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	08 95       	ret
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 248:	08 95       	ret

0000024a <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Value != NULL)
 24a:	41 15       	cp	r20, r1
 24c:	51 05       	cpc	r21, r1
 24e:	e1 f1       	breq	.+120    	; 0x2c8 <DIO_enuGetPinVal+0x7e>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	e0 f5       	brcc	.+120    	; 0x2cc <DIO_enuGetPinVal+0x82>
 254:	68 30       	cpi	r22, 0x08	; 8
 256:	e0 f5       	brcc	.+120    	; 0x2d0 <DIO_enuGetPinVal+0x86>
		{
			switch(Copy_u8PortID)
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	91 f0       	breq	.+36     	; 0x280 <DIO_enuGetPinVal+0x36>
 25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_enuGetPinVal+0x1e>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	d9 f0       	breq	.+54     	; 0x298 <DIO_enuGetPinVal+0x4e>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	29 f1       	breq	.+74     	; 0x2b0 <DIO_enuGetPinVal+0x66>
 266:	36 c0       	rjmp	.+108    	; 0x2d4 <DIO_enuGetPinVal+0x8a>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
 268:	89 b3       	in	r24, 0x19	; 25
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_enuGetPinVal+0x28>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_enuGetPinVal+0x24>
 276:	81 70       	andi	r24, 0x01	; 1
 278:	fa 01       	movw	r30, r20
 27a:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 27c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8PortID)
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 27e:	08 95       	ret
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
 280:	86 b3       	in	r24, 0x16	; 22
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enuGetPinVal+0x40>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enuGetPinVal+0x3c>
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	fa 01       	movw	r30, r20
 292:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 296:	08 95       	ret
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
 298:	83 b3       	in	r24, 0x13	; 19
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_enuGetPinVal+0x58>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_enuGetPinVal+0x54>
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	fa 01       	movw	r30, r20
 2aa:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 2ae:	08 95       	ret
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
 2b0:	80 b3       	in	r24, 0x10	; 16
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_enuGetPinVal+0x70>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_enuGetPinVal+0x6c>
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	fa 01       	movw	r30, r20
 2c2:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 2c6:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	08 95       	ret
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 2d6:	08 95       	ret

000002d8 <LED_enuINIT>:
#include "LED_priv.h"

#include "DIO_int.h"

ES_t LED_enuINIT(LED_t *Copy_pAstrLedConfig)
{
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	e9 f5       	brne	.+122    	; 0x360 <LED_enuINIT+0x88>
			}
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	41 c0       	rjmp	.+130    	; 0x36c <LED_enuINIT+0x94>
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
		{
			DIO_enuSetPinDirection(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
 2ea:	c1 2f       	mov	r28, r17
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	cc 0f       	add	r28, r28
 2f0:	dd 1f       	adc	r29, r29
 2f2:	cc 0f       	add	r28, r28
 2f4:	dd 1f       	adc	r29, r29
 2f6:	ce 0d       	add	r28, r14
 2f8:	df 1d       	adc	r29, r15
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	69 81       	ldd	r22, Y+1	; 0x01
 2fe:	88 81       	ld	r24, Y
 300:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
			if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
 304:	9a 81       	ldd	r25, Y+2	; 0x02
 306:	9c 30       	cpi	r25, 0x0C	; 12
 308:	89 f4       	brne	.+34     	; 0x32c <LED_enuINIT+0x54>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	8a 30       	cpi	r24, 0x0A	; 10
 30e:	31 f4       	brne	.+12     	; 0x31c <LED_enuINIT+0x44>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
 310:	69 81       	ldd	r22, Y+1	; 0x01
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	88 81       	ld	r24, Y
 316:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 31a:	20 c0       	rjmp	.+64     	; 0x35c <LED_enuINIT+0x84>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
 31c:	8b 30       	cpi	r24, 0x0B	; 11
 31e:	c9 f4       	brne	.+50     	; 0x352 <LED_enuINIT+0x7a>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
 320:	69 81       	ldd	r22, Y+1	; 0x01
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	88 81       	ld	r24, Y
 326:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 32a:	18 c0       	rjmp	.+48     	; 0x35c <LED_enuINIT+0x84>
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
				}
			}
			else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
 32c:	9d 30       	cpi	r25, 0x0D	; 13
 32e:	99 f4       	brne	.+38     	; 0x356 <LED_enuINIT+0x7e>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	8a 30       	cpi	r24, 0x0A	; 10
 334:	31 f4       	brne	.+12     	; 0x342 <LED_enuINIT+0x6a>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
 336:	69 81       	ldd	r22, Y+1	; 0x01
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	88 81       	ld	r24, Y
 33c:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 340:	0d c0       	rjmp	.+26     	; 0x35c <LED_enuINIT+0x84>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
 342:	8b 30       	cpi	r24, 0x0B	; 11
 344:	51 f4       	brne	.+20     	; 0x35a <LED_enuINIT+0x82>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
 346:	69 81       	ldd	r22, Y+1	; 0x01
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	88 81       	ld	r24, Y
 34c:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 350:	05 c0       	rjmp	.+10     	; 0x35c <LED_enuINIT+0x84>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
				}
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	03 c0       	rjmp	.+6      	; 0x35c <LED_enuINIT+0x84>
					Local_u8ErrorState = ES_OUT_OF_RANGE;
				}
			}
			else
			{
				Local_u8ErrorState = ES_OUT_OF_RANGE;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	01 c0       	rjmp	.+2      	; 0x35c <LED_enuINIT+0x84>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
				}
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
 35a:	83 e0       	ldi	r24, 0x03	; 3
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
 35c:	1f 5f       	subi	r17, 0xFF	; 255
 35e:	03 c0       	rjmp	.+6      	; 0x366 <LED_enuINIT+0x8e>
 360:	7c 01       	movw	r14, r24
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	18 30       	cpi	r17, 0x08	; 8
 368:	08 f4       	brcc	.+2      	; 0x36c <LED_enuINIT+0x94>
 36a:	bf cf       	rjmp	.-130    	; 0x2ea <LED_enuINIT+0x12>
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t *Copy_pstrLedID)
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrLedID != NULL)
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	b9 f0       	breq	.+46     	; 0x3ae <LED_enuTurnON+0x36>
 380:	ec 01       	movw	r28, r24
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	69 81       	ldd	r22, Y+1	; 0x01
 386:	88 81       	ld	r24, Y
 388:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	8c 30       	cpi	r24, 0x0C	; 12
 390:	31 f4       	brne	.+12     	; 0x39e <LED_enuTurnON+0x26>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
 392:	69 81       	ldd	r22, Y+1	; 0x01
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	88 81       	ld	r24, Y
 398:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 39c:	0b c0       	rjmp	.+22     	; 0x3b4 <LED_enuTurnON+0x3c>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
 39e:	8d 30       	cpi	r24, 0x0D	; 13
 3a0:	41 f4       	brne	.+16     	; 0x3b2 <LED_enuTurnON+0x3a>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
 3a2:	69 81       	ldd	r22, Y+1	; 0x01
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	88 81       	ld	r24, Y
 3a8:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <LED_enuTurnON+0x3c>
			Local_u8ErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <LED_enuTurnON+0x3c>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
 3b2:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t *Copy_pstrLedID)
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrLedID != NULL)
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <LED_enuTurnOFF+0x36>
 3c2:	ec 01       	movw	r28, r24
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	69 81       	ldd	r22, Y+1	; 0x01
 3c8:	88 81       	ld	r24, Y
 3ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	8c 30       	cpi	r24, 0x0C	; 12
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <LED_enuTurnOFF+0x26>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
 3d4:	69 81       	ldd	r22, Y+1	; 0x01
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	88 81       	ld	r24, Y
 3da:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 3de:	0b c0       	rjmp	.+22     	; 0x3f6 <LED_enuTurnOFF+0x3c>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
 3e0:	8d 30       	cpi	r24, 0x0D	; 13
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <LED_enuTurnOFF+0x3a>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
 3e4:	69 81       	ldd	r22, Y+1	; 0x01
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	88 81       	ld	r24, Y
 3ea:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LED_enuTurnOFF+0x3c>
			Local_u8ErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <LED_enuTurnOFF+0x3c>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
 3f4:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <main>:
extern SW_t SW_AstrSwitchConfig[SW_NUM];


/* snake effect & flower in the same program to check led & switch drivers */
int main(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	00 d0       	rcall	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	//DIO_enuINIT();
	Switch_enuINIT(&SW_AstrSwitchConfig);
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 c0 02 	call	0x580	; 0x580 <Switch_enuINIT>
	LED_enuINIT(&LED_AstrLedConfig);
 40e:	80 e6       	ldi	r24, 0x60	; 96
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_enuINIT>
	
	s8 i, j;
	
	while(1)
	{
		Switch_enuGetState(&SW_AstrSwitchConfig[0], &SW1);
 416:	be 01       	movw	r22, r28
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Switch_enuGetState>
		Switch_enuGetState(&SW_AstrSwitchConfig[1], &SW2);
 424:	be 01       	movw	r22, r28
 426:	6e 5f       	subi	r22, 0xFE	; 254
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	83 e8       	ldi	r24, 0x83	; 131
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Switch_enuGetState>
		
		/* if SW1 & SW2 is not pressed so we turn off all leds */
		if(SW1 == 1 && SW2 == 1)
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	31 f5       	brne	.+76     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	19 f5       	brne	.+70     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 43e:	0a c0       	rjmp	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			for(i = 0; i < 8; i++)
			{
				LED_enuTurnOFF(&LED_AstrLedConfig[i]);
 440:	24 e0       	ldi	r18, 0x04	; 4
 442:	12 02       	muls	r17, r18
 444:	c0 01       	movw	r24, r0
 446:	11 24       	eor	r1, r1
 448:	80 5a       	subi	r24, 0xA0	; 160
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_enuTurnOFF>
		Switch_enuGetState(&SW_AstrSwitchConfig[1], &SW2);
		
		/* if SW1 & SW2 is not pressed so we turn off all leds */
		if(SW1 == 1 && SW2 == 1)
		{
			for(i = 0; i < 8; i++)
 450:	1f 5f       	subi	r17, 0xFF	; 255
 452:	01 c0       	rjmp	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	18 30       	cpi	r17, 0x08	; 8
 458:	9c f3       	brlt	.-26     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			{
				LED_enuTurnOFF(&LED_AstrLedConfig[i]);
			}
			while(SW1 == 1 && SW2 == 1)
			{
				Switch_enuGetState(&SW_AstrSwitchConfig[0], &SW1);
 45c:	be 01       	movw	r22, r28
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	80 e8       	ldi	r24, 0x80	; 128
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Switch_enuGetState>
				Switch_enuGetState(&SW_AstrSwitchConfig[1], &SW2);
 46a:	be 01       	movw	r22, r28
 46c:	6e 5f       	subi	r22, 0xFE	; 254
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	83 e8       	ldi	r24, 0x83	; 131
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Switch_enuGetState>
		{
			for(i = 0; i < 8; i++)
			{
				LED_enuTurnOFF(&LED_AstrLedConfig[i]);
			}
			while(SW1 == 1 && SW2 == 1)
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	19 f4       	brne	.+6      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	61 f3       	breq	.-40     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
				Switch_enuGetState(&SW_AstrSwitchConfig[1], &SW2);
			}
		}
		
		/* if SW1 is pressed so we turn on snake effect */
		if(SW1 == 0 && SW2 == 1)
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	81 11       	cpse	r24, r1
 488:	2a c0       	rjmp	.+84     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 48a:	8a 81       	ldd	r24, Y+2	; 0x02
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	39 f5       	brne	.+78     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 490:	10 c0       	rjmp	.+32     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		{
			for(i = 0; i < 8; i++)
			{
				LED_enuTurnON(&LED_AstrLedConfig[i]);
 492:	24 e0       	ldi	r18, 0x04	; 4
 494:	12 02       	muls	r17, r18
 496:	c0 01       	movw	r24, r0
 498:	11 24       	eor	r1, r1
 49a:	80 5a       	subi	r24, 0xA0	; 160
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	0e 94 bc 01 	call	0x378	; 0x378 <LED_enuTurnON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a2:	8b e7       	ldi	r24, 0x7B	; 123
 4a4:	92 e9       	ldi	r25, 0x92	; 146
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4ac:	00 00       	nop
		}
		
		/* if SW1 is pressed so we turn on snake effect */
		if(SW1 == 0 && SW2 == 1)
		{
			for(i = 0; i < 8; i++)
 4ae:	1f 5f       	subi	r17, 0xFF	; 255
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	18 30       	cpi	r17, 0x08	; 8
 4b6:	6c f3       	brlt	.-38     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 4b8:	17 e0       	ldi	r17, 0x07	; 7
 4ba:	0f c0       	rjmp	.+30     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
				LED_enuTurnON(&LED_AstrLedConfig[i]);
				_delay_ms(150);
			}
			for(i = 7; i >= 0; i--)
			{
				LED_enuTurnOFF(&LED_AstrLedConfig[i]);
 4bc:	24 e0       	ldi	r18, 0x04	; 4
 4be:	12 02       	muls	r17, r18
 4c0:	c0 01       	movw	r24, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	80 5a       	subi	r24, 0xA0	; 160
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_enuTurnOFF>
 4cc:	8b e7       	ldi	r24, 0x7B	; 123
 4ce:	92 e9       	ldi	r25, 0x92	; 146
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
			for(i = 0; i < 8; i++)
			{
				LED_enuTurnON(&LED_AstrLedConfig[i]);
				_delay_ms(150);
			}
			for(i = 7; i >= 0; i--)
 4d8:	11 50       	subi	r17, 0x01	; 1
 4da:	11 23       	and	r17, r17
 4dc:	7c f7       	brge	.-34     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
				_delay_ms(150);
			}
		}
		
		/* if SW2 is pressed so we turn on flower effect */
		if(SW2 == 0 && SW1 == 1)
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	81 11       	cpse	r24, r1
 4e2:	99 cf       	rjmp	.-206    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	09 f0       	breq	.+2      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4ea:	95 cf       	rjmp	.-214    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 4ec:	21 c0       	rjmp	.+66     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
		{
			for(i = 3; i >= 0; i--)
			{
				LED_enuTurnON(&LED_AstrLedConfig[i]);
 4ee:	e1 2e       	mov	r14, r17
 4f0:	01 2e       	mov	r0, r17
 4f2:	00 0c       	add	r0, r0
 4f4:	ff 08       	sbc	r15, r15
 4f6:	c7 01       	movw	r24, r14
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	80 5a       	subi	r24, 0xA0	; 160
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	0e 94 bc 01 	call	0x378	; 0x378 <LED_enuTurnON>
				LED_enuTurnON(&LED_AstrLedConfig[7-i]);
 508:	87 e0       	ldi	r24, 0x07	; 7
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	8e 19       	sub	r24, r14
 50e:	9f 09       	sbc	r25, r15
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	80 5a       	subi	r24, 0xA0	; 160
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	0e 94 bc 01 	call	0x378	; 0x378 <LED_enuTurnON>
 520:	8b e7       	ldi	r24, 0x7B	; 123
 522:	92 e9       	ldi	r25, 0x92	; 146
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
		}
		
		/* if SW2 is pressed so we turn on flower effect */
		if(SW2 == 0 && SW1 == 1)
		{
			for(i = 3; i >= 0; i--)
 52c:	11 50       	subi	r17, 0x01	; 1
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 530:	13 e0       	ldi	r17, 0x03	; 3
 532:	11 23       	and	r17, r17
 534:	e4 f6       	brge	.-72     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 536:	10 e0       	ldi	r17, 0x00	; 0
 538:	20 c0       	rjmp	.+64     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				LED_enuTurnON(&LED_AstrLedConfig[7-i]);
				_delay_ms(150);
			}
			for(j = 0; j < 3; j++)
			{
				LED_enuTurnOFF(&LED_AstrLedConfig[j]);
 53a:	e1 2e       	mov	r14, r17
 53c:	01 2e       	mov	r0, r17
 53e:	00 0c       	add	r0, r0
 540:	ff 08       	sbc	r15, r15
 542:	c7 01       	movw	r24, r14
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	80 5a       	subi	r24, 0xA0	; 160
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_enuTurnOFF>
				LED_enuTurnOFF(&LED_AstrLedConfig[7-j]);
 554:	87 e0       	ldi	r24, 0x07	; 7
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	8e 19       	sub	r24, r14
 55a:	9f 09       	sbc	r25, r15
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	80 5a       	subi	r24, 0xA0	; 160
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_enuTurnOFF>
 56c:	8b e7       	ldi	r24, 0x7B	; 123
 56e:	92 e9       	ldi	r25, 0x92	; 146
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
 576:	00 00       	nop
			{
				LED_enuTurnON(&LED_AstrLedConfig[i]);
				LED_enuTurnON(&LED_AstrLedConfig[7-i]);
				_delay_ms(150);
			}
			for(j = 0; j < 3; j++)
 578:	1f 5f       	subi	r17, 0xFF	; 255
 57a:	13 30       	cpi	r17, 0x03	; 3
 57c:	f4 f2       	brlt	.-68     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 57e:	4b cf       	rjmp	.-362    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>

00000580 <Switch_enuINIT>:
#include "Switch_config.h"

#include "DIO_int.h"

ES_t Switch_enuINIT(SW_t * Copy_pAstrSwConfig)
{
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrSwConfig != NULL)
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	b9 f4       	brne	.+46     	; 0x5bc <Switch_enuINIT+0x3c>
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	1a c0       	rjmp	.+52     	; 0x5c6 <Switch_enuINIT+0x46>
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
		{
			Local_u8ErrorState = DIO_enuSetPinDirection(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, DIO_u8INPUT);
 592:	c1 2f       	mov	r28, r17
 594:	d0 e0       	ldi	r29, 0x00	; 0
 596:	ce 01       	movw	r24, r28
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	c8 0f       	add	r28, r24
 59e:	d9 1f       	adc	r29, r25
 5a0:	ce 0d       	add	r28, r14
 5a2:	df 1d       	adc	r29, r15
 5a4:	69 81       	ldd	r22, Y+1	; 0x01
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	88 81       	ld	r24, Y
 5aa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
 5ae:	4a 81       	ldd	r20, Y+2	; 0x02
 5b0:	69 81       	ldd	r22, Y+1	; 0x01
 5b2:	88 81       	ld	r24, Y
 5b4:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
	
	if(Copy_pAstrSwConfig != NULL)
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
 5b8:	1f 5f       	subi	r17, 0xFF	; 255
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <Switch_enuINIT+0x42>
 5bc:	7c 01       	movw	r14, r24
 5be:	10 e0       	ldi	r17, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	12 30       	cpi	r17, 0x02	; 2
 5c4:	30 f3       	brcs	.-52     	; 0x592 <Switch_enuINIT+0x12>
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	08 95       	ret

000005d2 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwConfigID, u8 * Copy_pu8SwitchState)
{
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrSwConfigID != NULL && Copy_pu8SwitchState != NULL)
 5d2:	00 97       	sbiw	r24, 0x00	; 0
 5d4:	51 f0       	breq	.+20     	; 0x5ea <Switch_enuGetState+0x18>
 5d6:	61 15       	cp	r22, r1
 5d8:	71 05       	cpc	r23, r1
 5da:	49 f0       	breq	.+18     	; 0x5ee <Switch_enuGetState+0x1c>
 5dc:	ab 01       	movw	r20, r22
 5de:	fc 01       	movw	r30, r24
	{
		Local_u8ErrorState = DIO_enuGetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_pu8SwitchState);
 5e0:	61 81       	ldd	r22, Z+1	; 0x01
 5e2:	80 81       	ld	r24, Z
 5e4:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_enuGetPinVal>
 5e8:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	08 95       	ret
 5ee:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8ErrorState;
}
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
