
LED_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000004d0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f2  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ec  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060b  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d13  00000000  00000000  00003317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000402a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 08 02 	call	0x410	; 0x410 <main>
  7a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuINIT>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
  86:	87 bb       	out	0x17, r24	; 23
  88:	84 bb       	out	0x14, r24	; 20
  8a:	8e e4       	ldi	r24, 0x4E	; 78
  8c:	81 bb       	out	0x11, r24	; 17
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
  94:	15 ba       	out	0x15, r1	; 21
  96:	82 e7       	ldi	r24, 0x72	; 114
  98:	82 bb       	out	0x12, r24	; 18
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	08 95       	ret

0000009e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_enuSetPinDirection+0x6>
  a2:	63 c0       	rjmp	.+198    	; 0x16a <DIO_enuSetPinDirection+0xcc>
  a4:	68 30       	cpi	r22, 0x08	; 8
  a6:	08 f0       	brcs	.+2      	; 0xaa <DIO_enuSetPinDirection+0xc>
  a8:	62 c0       	rjmp	.+196    	; 0x16e <DIO_enuSetPinDirection+0xd0>
  aa:	42 30       	cpi	r20, 0x02	; 2
  ac:	08 f0       	brcs	.+2      	; 0xb0 <DIO_enuSetPinDirection+0x12>
  ae:	61 c0       	rjmp	.+194    	; 0x172 <DIO_enuSetPinDirection+0xd4>
	{
		switch(Copy_u8PortID)
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	e1 f0       	breq	.+56     	; 0xec <DIO_enuSetPinDirection+0x4e>
  b4:	30 f0       	brcs	.+12     	; 0xc2 <DIO_enuSetPinDirection+0x24>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	71 f1       	breq	.+92     	; 0x116 <DIO_enuSetPinDirection+0x78>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0 <DIO_enuSetPinDirection+0x22>
  be:	40 c0       	rjmp	.+128    	; 0x140 <DIO_enuSetPinDirection+0xa2>
  c0:	5a c0       	rjmp	.+180    	; 0x176 <DIO_enuSetPinDirection+0xd8>
		{
			case DIO_PORTA:
			DDRA &= (DIO_MASK_BIT << Copy_u8PinID);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	06 2e       	mov	r0, r22
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_enuSetPinDirection+0x30>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_enuSetPinDirection+0x2c>
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	28 23       	and	r18, r24
			DDRA |= (Copy_u8Value << Copy_u8PinID);
  d6:	84 2f       	mov	r24, r20
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_enuSetPinDirection+0x42>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_enuSetPinDirection+0x3e>
  e4:	82 2b       	or	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRD |= (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  e8:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRA |= (Copy_u8Value << Copy_u8PinID);
			break;
  ea:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= (DIO_MASK_BIT << Copy_u8PinID);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_enuSetPinDirection+0x5a>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_enuSetPinDirection+0x56>
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	28 23       	and	r18, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
 100:	84 2f       	mov	r24, r20
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuSetPinDirection+0x6c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuSetPinDirection+0x68>
 10e:	82 2b       	or	r24, r18
 110:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRD |= (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 112:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRB |= (Copy_u8Value << Copy_u8PinID);
			break;
 114:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= (DIO_MASK_BIT << Copy_u8PinID);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	06 2e       	mov	r0, r22
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_enuSetPinDirection+0x84>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_enuSetPinDirection+0x80>
 126:	24 b3       	in	r18, 0x14	; 20
 128:	28 23       	and	r18, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
 12a:	84 2f       	mov	r24, r20
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_enuSetPinDirection+0x96>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_enuSetPinDirection+0x92>
 138:	82 2b       	or	r24, r18
 13a:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRD |= (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRC |= (Copy_u8Value << Copy_u8PinID);
			break;
 13e:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	06 2e       	mov	r0, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enuSetPinDirection+0xae>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enuSetPinDirection+0xaa>
 150:	21 b3       	in	r18, 0x11	; 17
 152:	28 23       	and	r18, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
 154:	84 2f       	mov	r24, r20
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_enuSetPinDirection+0xc0>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_enuSetPinDirection+0xbc>
 162:	82 2b       	or	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRD |= (Copy_u8Value << Copy_u8PinID);
			break;
 168:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	08 95       	ret
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	08 95       	ret
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	08 95       	ret
			case DIO_PORTD:
			DDRD &= (DIO_MASK_BIT << Copy_u8PinID);
			DDRD |= (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 176:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 178:	08 95       	ret

0000017a <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_enuSetPinVal+0x6>
 17e:	67 c0       	rjmp	.+206    	; 0x24e <DIO_enuSetPinVal+0xd4>
 180:	68 30       	cpi	r22, 0x08	; 8
 182:	08 f0       	brcs	.+2      	; 0x186 <DIO_enuSetPinVal+0xc>
 184:	66 c0       	rjmp	.+204    	; 0x252 <DIO_enuSetPinVal+0xd8>
 186:	42 30       	cpi	r20, 0x02	; 2
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_enuSetPinVal+0x12>
 18a:	65 c0       	rjmp	.+202    	; 0x256 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	e9 f0       	breq	.+58     	; 0x1ca <DIO_enuSetPinVal+0x50>
 190:	30 f0       	brcs	.+12     	; 0x19e <DIO_enuSetPinVal+0x24>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	81 f1       	breq	.+96     	; 0x1f6 <DIO_enuSetPinVal+0x7c>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	09 f4       	brne	.+2      	; 0x19c <DIO_enuSetPinVal+0x22>
 19a:	43 c0       	rjmp	.+134    	; 0x222 <DIO_enuSetPinVal+0xa8>
 19c:	5e c0       	rjmp	.+188    	; 0x25a <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	06 2e       	mov	r0, r22
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_enuSetPinVal+0x30>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_enuSetPinVal+0x2c>
 1ae:	80 95       	com	r24
 1b0:	2b b3       	in	r18, 0x1b	; 27
 1b2:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 1b4:	84 2f       	mov	r24, r20
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_enuSetPinVal+0x44>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_enuSetPinVal+0x40>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1c8:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	06 2e       	mov	r0, r22
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_enuSetPinVal+0x5c>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_enuSetPinVal+0x58>
 1da:	20 95       	com	r18
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 1e0:	84 2f       	mov	r24, r20
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_enuSetPinVal+0x70>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_enuSetPinVal+0x6c>
 1ee:	82 2b       	or	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1f4:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	06 2e       	mov	r0, r22
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_enuSetPinVal+0x88>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_enuSetPinVal+0x84>
 206:	20 95       	com	r18
 208:	85 b3       	in	r24, 0x15	; 21
 20a:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 20c:	84 2f       	mov	r24, r20
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_enuSetPinVal+0x9c>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_enuSetPinVal+0x98>
 21a:	82 2b       	or	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 220:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	06 2e       	mov	r0, r22
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_enuSetPinVal+0xb4>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_enuSetPinVal+0xb0>
 232:	20 95       	com	r18
 234:	82 b3       	in	r24, 0x12	; 18
 236:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 238:	84 2f       	mov	r24, r20
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_enuSetPinVal+0xc8>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_enuSetPinVal+0xc4>
 246:	82 2b       	or	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 24c:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	08 95       	ret
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	08 95       	ret
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 25c:	08 95       	ret

0000025e <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Value != NULL)
 25e:	41 15       	cp	r20, r1
 260:	51 05       	cpc	r21, r1
 262:	e1 f1       	breq	.+120    	; 0x2dc <DIO_enuGetPinVal+0x7e>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	e0 f5       	brcc	.+120    	; 0x2e0 <DIO_enuGetPinVal+0x82>
 268:	68 30       	cpi	r22, 0x08	; 8
 26a:	e0 f5       	brcc	.+120    	; 0x2e4 <DIO_enuGetPinVal+0x86>
		{
			switch(Copy_u8PortID)
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 f0       	breq	.+36     	; 0x294 <DIO_enuGetPinVal+0x36>
 270:	28 f0       	brcs	.+10     	; 0x27c <DIO_enuGetPinVal+0x1e>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	d9 f0       	breq	.+54     	; 0x2ac <DIO_enuGetPinVal+0x4e>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	29 f1       	breq	.+74     	; 0x2c4 <DIO_enuGetPinVal+0x66>
 27a:	36 c0       	rjmp	.+108    	; 0x2e8 <DIO_enuGetPinVal+0x8a>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
 27c:	89 b3       	in	r24, 0x19	; 25
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_enuGetPinVal+0x28>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_enuGetPinVal+0x24>
 28a:	81 70       	andi	r24, 0x01	; 1
 28c:	fa 01       	movw	r30, r20
 28e:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 290:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8PortID)
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 292:	08 95       	ret
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
 294:	86 b3       	in	r24, 0x16	; 22
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_enuGetPinVal+0x40>
 29a:	95 95       	asr	r25
 29c:	87 95       	ror	r24
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_enuGetPinVal+0x3c>
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	fa 01       	movw	r30, r20
 2a6:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 2aa:	08 95       	ret
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
 2ac:	83 b3       	in	r24, 0x13	; 19
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_enuGetPinVal+0x58>
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_enuGetPinVal+0x54>
 2ba:	81 70       	andi	r24, 0x01	; 1
 2bc:	fa 01       	movw	r30, r20
 2be:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 2c2:	08 95       	ret
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
 2c4:	80 b3       	in	r24, 0x10	; 16
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_enuGetPinVal+0x70>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_enuGetPinVal+0x6c>
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	fa 01       	movw	r30, r20
 2d6:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
 2da:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	08 95       	ret
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
 2e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 2ea:	08 95       	ret

000002ec <LED_enuINIT>:
#include "LED_priv.h"

#include "DIO_int.h"

ES_t LED_enuINIT(LED_t *Copy_pAstrLedConfig)
{
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	e9 f5       	brne	.+122    	; 0x374 <LED_enuINIT+0x88>
			}
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	41 c0       	rjmp	.+130    	; 0x380 <LED_enuINIT+0x94>
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
		{
			DIO_enuSetPinDirection(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
 2fe:	c1 2f       	mov	r28, r17
 300:	d0 e0       	ldi	r29, 0x00	; 0
 302:	cc 0f       	add	r28, r28
 304:	dd 1f       	adc	r29, r29
 306:	cc 0f       	add	r28, r28
 308:	dd 1f       	adc	r29, r29
 30a:	ce 0d       	add	r28, r14
 30c:	df 1d       	adc	r29, r15
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	69 81       	ldd	r22, Y+1	; 0x01
 312:	88 81       	ld	r24, Y
 314:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinDirection>
			if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	9c 30       	cpi	r25, 0x0C	; 12
 31c:	89 f4       	brne	.+34     	; 0x340 <LED_enuINIT+0x54>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	31 f4       	brne	.+12     	; 0x330 <LED_enuINIT+0x44>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
 324:	69 81       	ldd	r22, Y+1	; 0x01
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	88 81       	ld	r24, Y
 32a:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 32e:	20 c0       	rjmp	.+64     	; 0x370 <LED_enuINIT+0x84>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
 330:	8b 30       	cpi	r24, 0x0B	; 11
 332:	c9 f4       	brne	.+50     	; 0x366 <LED_enuINIT+0x7a>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
 334:	69 81       	ldd	r22, Y+1	; 0x01
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	88 81       	ld	r24, Y
 33a:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 33e:	18 c0       	rjmp	.+48     	; 0x370 <LED_enuINIT+0x84>
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
				}
			}
			else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
 340:	9d 30       	cpi	r25, 0x0D	; 13
 342:	99 f4       	brne	.+38     	; 0x36a <LED_enuINIT+0x7e>
			{
				if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8ON)
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	8a 30       	cpi	r24, 0x0A	; 10
 348:	31 f4       	brne	.+12     	; 0x356 <LED_enuINIT+0x6a>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
 34a:	69 81       	ldd	r22, Y+1	; 0x01
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	88 81       	ld	r24, Y
 350:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 354:	0d c0       	rjmp	.+26     	; 0x370 <LED_enuINIT+0x84>
				}
				else if(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
 356:	8b 30       	cpi	r24, 0x0B	; 11
 358:	51 f4       	brne	.+20     	; 0x36e <LED_enuINIT+0x82>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
 35a:	69 81       	ldd	r22, Y+1	; 0x01
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	88 81       	ld	r24, Y
 360:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 364:	05 c0       	rjmp	.+10     	; 0x370 <LED_enuINIT+0x84>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
				}
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	03 c0       	rjmp	.+6      	; 0x370 <LED_enuINIT+0x84>
					Local_u8ErrorState = ES_OUT_OF_RANGE;
				}
			}
			else
			{
				Local_u8ErrorState = ES_OUT_OF_RANGE;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	01 c0       	rjmp	.+2      	; 0x370 <LED_enuINIT+0x84>
				{
					Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PortID, Copy_pAstrLedConfig[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
				}
				else
				{
					Local_u8ErrorState = ES_OUT_OF_RANGE;
 36e:	83 e0       	ldi	r24, 0x03	; 3
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrLedConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
 370:	1f 5f       	subi	r17, 0xFF	; 255
 372:	03 c0       	rjmp	.+6      	; 0x37a <LED_enuINIT+0x8e>
 374:	7c 01       	movw	r14, r24
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	18 30       	cpi	r17, 0x08	; 8
 37c:	08 f4       	brcc	.+2      	; 0x380 <LED_enuINIT+0x94>
 37e:	bf cf       	rjmp	.-130    	; 0x2fe <LED_enuINIT+0x12>
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t *Copy_pstrLedID)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrLedID != NULL)
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	b9 f0       	breq	.+46     	; 0x3c2 <LED_enuTurnON+0x36>
 394:	ec 01       	movw	r28, r24
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	69 81       	ldd	r22, Y+1	; 0x01
 39a:	88 81       	ld	r24, Y
 39c:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	8c 30       	cpi	r24, 0x0C	; 12
 3a4:	31 f4       	brne	.+12     	; 0x3b2 <LED_enuTurnON+0x26>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
 3a6:	69 81       	ldd	r22, Y+1	; 0x01
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	88 81       	ld	r24, Y
 3ac:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <LED_enuTurnON+0x3c>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
 3b2:	8d 30       	cpi	r24, 0x0D	; 13
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <LED_enuTurnON+0x3a>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
 3b6:	69 81       	ldd	r22, Y+1	; 0x01
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	88 81       	ld	r24, Y
 3bc:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <LED_enuTurnON+0x3c>
			Local_u8ErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <LED_enuTurnON+0x3c>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
 3c6:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t *Copy_pstrLedID)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrLedID != NULL)
 3d2:	00 97       	sbiw	r24, 0x00	; 0
 3d4:	b9 f0       	breq	.+46     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d6:	ec 01       	movw	r28, r24
	{
		DIO_enuSetPinDirection(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8OUTPUT);
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	69 81       	ldd	r22, Y+1	; 0x01
 3dc:	88 81       	ld	r24, Y
 3de:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinDirection>
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	8c 30       	cpi	r24, 0x0C	; 12
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <LED_enuTurnOFF+0x26>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
 3e8:	69 81       	ldd	r22, Y+1	; 0x01
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	88 81       	ld	r24, Y
 3ee:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 3f2:	0b c0       	rjmp	.+22     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
 3f4:	8d 30       	cpi	r24, 0x0D	; 13
 3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
 3f8:	69 81       	ldd	r22, Y+1	; 0x01
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	88 81       	ld	r24, Y
 3fe:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			Local_u8ErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
 408:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <main>:
extern LED_t LED_AstrLedConfig[LED_NUM];
extern SW_t SW_AstrSwitchConfig[SW_NUM];


int main(void)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	1f 92       	push	r1
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	DIO_enuINIT();
 41a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuINIT>
	LED_enuINIT(&LED_AstrLedConfig);
 41e:	80 e6       	ldi	r24, 0x60	; 96
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_enuINIT>
	Switch_enuINIT(&SW_AstrSwitchConfig);
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 2d 02 	call	0x45a	; 0x45a <Switch_enuINIT>
	u8 Pin_state;
	
    /* Replace with your application code */
    while (1) 
    {
		Switch_enuGetState(&SW_AstrSwitchConfig[1], &Pin_state);
 42e:	be 01       	movw	r22, r28
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	83 e8       	ldi	r24, 0x83	; 131
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 56 02 	call	0x4ac	; 0x4ac <Switch_enuGetState>
		if(Pin_state == 0)
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	81 11       	cpse	r24, r1
 440:	05 c0       	rjmp	.+10     	; 0x44c <main+0x3c>
		{
			LED_enuTurnON(&LED_AstrLedConfig[2]);
 442:	88 e6       	ldi	r24, 0x68	; 104
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_enuTurnON>
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <main+0x1e>
		}
		else if(Pin_state == 1)
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	79 f7       	brne	.-34     	; 0x42e <main+0x1e>
		{
			LED_enuTurnOFF(&LED_AstrLedConfig[2]);
 450:	88 e6       	ldi	r24, 0x68	; 104
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_enuTurnOFF>
 458:	ea cf       	rjmp	.-44     	; 0x42e <main+0x1e>

0000045a <Switch_enuINIT>:
#include "Switch_config.h"

#include "DIO_int.h"

ES_t Switch_enuINIT(SW_t * Copy_pAstrSwConfig)
{
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pAstrSwConfig != NULL)
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	b9 f4       	brne	.+46     	; 0x496 <Switch_enuINIT+0x3c>
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	1a c0       	rjmp	.+52     	; 0x4a0 <Switch_enuINIT+0x46>
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
		{
			Local_u8ErrorState = DIO_enuSetPinDirection(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, DIO_u8INPUT);
 46c:	c1 2f       	mov	r28, r17
 46e:	d0 e0       	ldi	r29, 0x00	; 0
 470:	ce 01       	movw	r24, r28
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	c8 0f       	add	r28, r24
 478:	d9 1f       	adc	r29, r25
 47a:	ce 0d       	add	r28, r14
 47c:	df 1d       	adc	r29, r15
 47e:	69 81       	ldd	r22, Y+1	; 0x01
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	88 81       	ld	r24, Y
 484:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinDirection>
			Local_u8ErrorState = DIO_enuSetPinVal(Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PortID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8PinID, Copy_pAstrSwConfig[Local_u8Iterator].SW_u8Status);	
 488:	4a 81       	ldd	r20, Y+2	; 0x02
 48a:	69 81       	ldd	r22, Y+1	; 0x01
 48c:	88 81       	ld	r24, Y
 48e:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_enuSetPinVal>
	
	if(Copy_pAstrSwConfig != NULL)
	{
		u8 Local_u8Iterator;
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
 492:	1f 5f       	subi	r17, 0xFF	; 255
 494:	03 c0       	rjmp	.+6      	; 0x49c <Switch_enuINIT+0x42>
 496:	7c 01       	movw	r14, r24
 498:	10 e0       	ldi	r17, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	13 30       	cpi	r17, 0x03	; 3
 49e:	30 f3       	brcs	.-52     	; 0x46c <Switch_enuINIT+0x12>
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	
	return Local_u8ErrorState;
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	08 95       	ret

000004ac <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwConfigID, u8 * Copy_pu8SwitchState)
{
	ES_t Local_u8ErrorState = ES_NOK;
	
	if(Copy_pstrSwConfigID != NULL && Copy_pu8SwitchState != NULL)
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	51 f0       	breq	.+20     	; 0x4c4 <Switch_enuGetState+0x18>
 4b0:	61 15       	cp	r22, r1
 4b2:	71 05       	cpc	r23, r1
 4b4:	49 f0       	breq	.+18     	; 0x4c8 <Switch_enuGetState+0x1c>
 4b6:	ab 01       	movw	r20, r22
 4b8:	fc 01       	movw	r30, r24
	{
		Local_u8ErrorState = DIO_enuGetPinVal(Copy_pstrSwConfigID->SW_u8PortID, Copy_pstrSwConfigID->SW_u8PinID, Copy_pu8SwitchState);
 4ba:	61 81       	ldd	r22, Z+1	; 0x01
 4bc:	80 81       	ld	r24, Z
 4be:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_enuGetPinVal>
 4c2:	08 95       	ret
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	08 95       	ret
 4c8:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8ErrorState;
}
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
