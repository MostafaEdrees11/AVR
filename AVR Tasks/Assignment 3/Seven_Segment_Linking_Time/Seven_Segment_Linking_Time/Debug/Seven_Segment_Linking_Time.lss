
Seven_Segment_Linking_Time.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000008a2  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f6  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000909  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c12  00000000  00000000  0000299b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  000035b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ea  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001455  00000000  00000000  00003ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00005333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  7a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enuSetPinDirection+0x6>
  86:	67 c0       	rjmp	.+206    	; 0x156 <DIO_enuSetPinDirection+0xd4>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_enuSetPinDirection+0xc>
  8c:	66 c0       	rjmp	.+204    	; 0x15a <DIO_enuSetPinDirection+0xd8>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_enuSetPinDirection+0x12>
  92:	65 c0       	rjmp	.+202    	; 0x15e <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	e9 f0       	breq	.+58     	; 0xd2 <DIO_enuSetPinDirection+0x50>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_enuSetPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	81 f1       	breq	.+96     	; 0xfe <DIO_enuSetPinDirection+0x7c>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuSetPinDirection+0x22>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <DIO_enuSetPinDirection+0xa8>
  a4:	5e c0       	rjmp	.+188    	; 0x162 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	06 2e       	mov	r0, r22
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_enuSetPinDirection+0x30>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_enuSetPinDirection+0x2c>
  b6:	80 95       	com	r24
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
  bc:	84 2f       	mov	r24, r20
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_enuSetPinDirection+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_enuSetPinDirection+0x40>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  ce:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
  d0:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	06 2e       	mov	r0, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_enuSetPinDirection+0x5c>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_enuSetPinDirection+0x58>
  e2:	20 95       	com	r18
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
  e8:	84 2f       	mov	r24, r20
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_enuSetPinDirection+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_enuSetPinDirection+0x6c>
  f6:	82 2b       	or	r24, r18
  f8:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
  fc:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	06 2e       	mov	r0, r22
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuSetPinDirection+0x88>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuSetPinDirection+0x84>
 10e:	20 95       	com	r18
 110:	84 b3       	in	r24, 0x14	; 20
 112:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 114:	84 2f       	mov	r24, r20
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_enuSetPinDirection+0x9c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_enuSetPinDirection+0x98>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 128:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	06 2e       	mov	r0, r22
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuSetPinDirection+0xb4>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuSetPinDirection+0xb0>
 13a:	20 95       	com	r18
 13c:	81 b3       	in	r24, 0x11	; 17
 13e:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 140:	84 2f       	mov	r24, r20
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enuSetPinDirection+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_enuSetPinDirection+0xc4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
 152:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 154:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	08 95       	ret
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	08 95       	ret
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 164:	08 95       	ret

00000166 <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	08 f0       	brcs	.+2      	; 0x16c <DIO_enuSetPinVal+0x6>
 16a:	67 c0       	rjmp	.+206    	; 0x23a <DIO_enuSetPinVal+0xd4>
 16c:	68 30       	cpi	r22, 0x08	; 8
 16e:	08 f0       	brcs	.+2      	; 0x172 <DIO_enuSetPinVal+0xc>
 170:	66 c0       	rjmp	.+204    	; 0x23e <DIO_enuSetPinVal+0xd8>
 172:	42 30       	cpi	r20, 0x02	; 2
 174:	08 f0       	brcs	.+2      	; 0x178 <DIO_enuSetPinVal+0x12>
 176:	65 c0       	rjmp	.+202    	; 0x242 <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	e9 f0       	breq	.+58     	; 0x1b6 <DIO_enuSetPinVal+0x50>
 17c:	30 f0       	brcs	.+12     	; 0x18a <DIO_enuSetPinVal+0x24>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	81 f1       	breq	.+96     	; 0x1e2 <DIO_enuSetPinVal+0x7c>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_enuSetPinVal+0x22>
 186:	43 c0       	rjmp	.+134    	; 0x20e <DIO_enuSetPinVal+0xa8>
 188:	5e c0       	rjmp	.+188    	; 0x246 <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	06 2e       	mov	r0, r22
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_enuSetPinVal+0x30>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_enuSetPinVal+0x2c>
 19a:	80 95       	com	r24
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 1a0:	84 2f       	mov	r24, r20
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_enuSetPinVal+0x44>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_enuSetPinVal+0x40>
 1ae:	82 2b       	or	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1b4:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	06 2e       	mov	r0, r22
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_enuSetPinVal+0x5c>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_enuSetPinVal+0x58>
 1c6:	20 95       	com	r18
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 1cc:	84 2f       	mov	r24, r20
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_enuSetPinVal+0x70>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_enuSetPinVal+0x6c>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 1de:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 1e0:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	06 2e       	mov	r0, r22
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_enuSetPinVal+0x88>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_enuSetPinVal+0x84>
 1f2:	20 95       	com	r18
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 1f8:	84 2f       	mov	r24, r20
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_enuSetPinVal+0x9c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_enuSetPinVal+0x98>
 206:	82 2b       	or	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 20c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	06 2e       	mov	r0, r22
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_enuSetPinVal+0xb4>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_enuSetPinVal+0xb0>
 21e:	20 95       	com	r18
 220:	82 b3       	in	r24, 0x12	; 18
 222:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 224:	84 2f       	mov	r24, r20
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_enuSetPinVal+0xc8>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_enuSetPinVal+0xc4>
 232:	82 2b       	or	r24, r18
 234:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 236:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 238:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	08 95       	ret
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	08 95       	ret
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 248:	08 95       	ret

0000024a <main>:

//POV to display 25
int main(void)
{
	ES_t error;
	error = Seven_Segment_enuInit(SEV_SEG_AstrSEGConfig);
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 4d 01 	call	0x29a	; 0x29a <Seven_Segment_enuInit>
 252:	c8 2f       	mov	r28, r24
	
	/* Replace with your application code */
	while (1)
	{
		if(error == ES_OK)
 254:	c1 11       	cpse	r28, r1
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0xa>
		{
			Seven_Segment_enuDisableCommon(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 1f 04 	call	0x83e	; 0x83e <Seven_Segment_enuDisableCommon>
			Seven_Segment_enuDisplayNumber(0,5);
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Seven_Segment_enuDisplayNumber>
			Seven_Segment_enuEnableCommon(0);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 ef 03 	call	0x7de	; 0x7de <Seven_Segment_enuEnableCommon>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	83 ec       	ldi	r24, 0xC3	; 195
 26e:	99 e0       	ldi	r25, 0x09	; 9
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x26>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x2c>
 276:	00 00       	nop
			_delay_ms(10);
			Seven_Segment_enuDisableCommon(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 1f 04 	call	0x83e	; 0x83e <Seven_Segment_enuDisableCommon>
			Seven_Segment_enuDisplayNumber(1,2);
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Seven_Segment_enuDisplayNumber>
			Seven_Segment_enuEnableCommon(1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 ef 03 	call	0x7de	; 0x7de <Seven_Segment_enuEnableCommon>
 28c:	85 ea       	ldi	r24, 0xA5	; 165
 28e:	9e e0       	ldi	r25, 0x0E	; 14
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x46>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x4c>
 296:	00 00       	nop
 298:	dd cf       	rjmp	.-70     	; 0x254 <main+0xa>

0000029a <Seven_Segment_enuInit>:
#include "Seven_Segment_priv.h"

extern SEG_t SEV_SEG_AstrSEGConfig[SEG_NUM];

ES_t Seven_Segment_enuInit(SEG_t *Copy_pAstrSEG_Config)
{
 29a:	3f 92       	push	r3
 29c:	4f 92       	push	r4
 29e:	5f 92       	push	r5
 2a0:	6f 92       	push	r6
 2a2:	7f 92       	push	r7
 2a4:	8f 92       	push	r8
 2a6:	9f 92       	push	r9
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	u8 Local_u8Iterator = 0;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	09 f0       	breq	.+2      	; 0x2c2 <Seven_Segment_enuInit+0x28>
 2c0:	bd c0       	rjmp	.+378    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			Local_enuErrorState = ES_OK;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	e3 c0       	rjmp	.+454    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			Local_u8Iterator_Error = 0;
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_APIN, DIO_u8OUTPUT) << Local_u8Iterator_Error);
 2c6:	e8 01       	movw	r28, r16
 2c8:	23 e1       	ldi	r18, 0x13	; 19
 2ca:	32 9e       	mul	r3, r18
 2cc:	c0 0d       	add	r28, r0
 2ce:	d1 1d       	adc	r29, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	69 81       	ldd	r22, Y+1	; 0x01
 2d6:	88 81       	ld	r24, Y
 2d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 2dc:	c8 2a       	or	r12, r24
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	6b 81       	ldd	r22, Y+3	; 0x03
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	09 2e       	mov	r0, r25
 2f8:	00 0c       	add	r0, r0
 2fa:	aa 0b       	sbc	r26, r26
 2fc:	bb 0b       	sbc	r27, r27
 2fe:	c8 2a       	or	r12, r24
 300:	d9 2a       	or	r13, r25
 302:	ea 2a       	or	r14, r26
 304:	fb 2a       	or	r15, r27
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	6d 81       	ldd	r22, Y+5	; 0x05
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 310:	20 e4       	ldi	r18, 0x40	; 64
 312:	82 9f       	mul	r24, r18
 314:	c0 01       	movw	r24, r0
 316:	11 24       	eor	r1, r1
 318:	2c 01       	movw	r4, r24
 31a:	99 0f       	add	r25, r25
 31c:	66 08       	sbc	r6, r6
 31e:	77 08       	sbc	r7, r7
 320:	c4 28       	or	r12, r4
 322:	d5 28       	or	r13, r5
 324:	e6 28       	or	r14, r6
 326:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	6f 81       	ldd	r22, Y+7	; 0x07
 32c:	8e 81       	ldd	r24, Y+6	; 0x06
 32e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 332:	48 2e       	mov	r4, r24
 334:	51 2c       	mov	r5, r1
 336:	54 2c       	mov	r5, r4
 338:	44 24       	eor	r4, r4
 33a:	55 0c       	add	r5, r5
 33c:	05 2c       	mov	r0, r5
 33e:	00 0c       	add	r0, r0
 340:	66 08       	sbc	r6, r6
 342:	77 08       	sbc	r7, r7
 344:	c4 28       	or	r12, r4
 346:	d5 28       	or	r13, r5
 348:	e6 28       	or	r14, r6
 34a:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	69 85       	ldd	r22, Y+9	; 0x09
 350:	88 85       	ldd	r24, Y+8	; 0x08
 352:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 356:	48 2e       	mov	r4, r24
 358:	51 2c       	mov	r5, r1
 35a:	54 2c       	mov	r5, r4
 35c:	44 24       	eor	r4, r4
 35e:	55 0c       	add	r5, r5
 360:	55 0c       	add	r5, r5
 362:	55 0c       	add	r5, r5
 364:	55 0c       	add	r5, r5
 366:	05 2c       	mov	r0, r5
 368:	00 0c       	add	r0, r0
 36a:	66 08       	sbc	r6, r6
 36c:	77 08       	sbc	r7, r7
 36e:	4c 28       	or	r4, r12
 370:	5d 28       	or	r5, r13
 372:	6e 28       	or	r6, r14
 374:	7f 28       	or	r7, r15
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	6b 85       	ldd	r22, Y+11	; 0x0b
 37a:	8a 85       	ldd	r24, Y+10	; 0x0a
 37c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 380:	c8 2e       	mov	r12, r24
 382:	d1 2c       	mov	r13, r1
 384:	dd 24       	eor	r13, r13
 386:	c6 94       	lsr	r12
 388:	d7 94       	ror	r13
 38a:	cc 24       	eor	r12, r12
 38c:	0d 2c       	mov	r0, r13
 38e:	00 0c       	add	r0, r0
 390:	ee 08       	sbc	r14, r14
 392:	ff 08       	sbc	r15, r15
 394:	46 01       	movw	r8, r12
 396:	57 01       	movw	r10, r14
 398:	84 28       	or	r8, r4
 39a:	95 28       	or	r9, r5
 39c:	a6 28       	or	r10, r6
 39e:	b7 28       	or	r11, r7
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	6d 85       	ldd	r22, Y+13	; 0x0d
 3a4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 3aa:	c8 2e       	mov	r12, r24
 3ac:	d1 2c       	mov	r13, r1
 3ae:	dd 24       	eor	r13, r13
 3b0:	cc 24       	eor	r12, r12
 3b2:	0d 2c       	mov	r0, r13
 3b4:	00 0c       	add	r0, r0
 3b6:	ee 08       	sbc	r14, r14
 3b8:	ff 08       	sbc	r15, r15
 3ba:	c8 28       	or	r12, r8
 3bc:	d9 28       	or	r13, r9
 3be:	ea 28       	or	r14, r10
 3c0:	fb 28       	or	r15, r11
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
 3c2:	8e 85       	ldd	r24, Y+14	; 0x0e
 3c4:	8a 30       	cpi	r24, 0x0A	; 10
 3c6:	b1 f0       	breq	.+44     	; 0x3f4 <Seven_Segment_enuInit+0x15a>
 3c8:	6f 85       	ldd	r22, Y+15	; 0x0f
 3ca:	6a 30       	cpi	r22, 0x0A	; 10
 3cc:	c1 f0       	breq	.+48     	; 0x3fe <Seven_Segment_enuInit+0x164>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	99 27       	eor	r25, r25
 3d8:	88 27       	eor	r24, r24
 3da:	09 2e       	mov	r0, r25
 3dc:	00 0c       	add	r0, r0
 3de:	aa 0b       	sbc	r26, r26
 3e0:	bb 0b       	sbc	r27, r27
 3e2:	c8 2a       	or	r12, r24
 3e4:	d9 2a       	or	r13, r25
 3e6:	ea 2a       	or	r14, r26
 3e8:	fb 2a       	or	r15, r27
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f5 e1       	ldi	r31, 0x15	; 21
 3ee:	bf 2e       	mov	r11, r31
 3f0:	f0 2d       	mov	r31, r0
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_BPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_EPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_FPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_GPIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 3f4:	0f 2e       	mov	r0, r31
 3f6:	f2 e1       	ldi	r31, 0x12	; 18
 3f8:	bf 2e       	mov	r11, r31
 3fa:	f0 2d       	mov	r31, r0
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	0f 2e       	mov	r0, r31
 400:	f2 e1       	ldi	r31, 0x12	; 18
 402:	bf 2e       	mov	r11, r31
 404:	f0 2d       	mov	r31, r0
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN != NOT_CONNECTED)
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_CMN_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
			
			if(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT != NOT_CONNECTED && Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN != NOT_CONNECTED)
 406:	88 89       	ldd	r24, Y+16	; 0x10
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	b1 f0       	breq	.+44     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40c:	69 89       	ldd	r22, Y+17	; 0x11
 40e:	6a 30       	cpi	r22, 0x0A	; 10
 410:	99 f0       	breq	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinDirection>
 418:	23 e0       	ldi	r18, 0x03	; 3
 41a:	2b 0d       	add	r18, r11
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	2a 95       	dec	r18
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	09 2e       	mov	r0, r25
 42a:	00 0c       	add	r0, r0
 42c:	aa 0b       	sbc	r26, r26
 42e:	bb 0b       	sbc	r27, r27
 430:	c8 2a       	or	r12, r24
 432:	d9 2a       	or	r13, r25
 434:	ea 2a       	or	r14, r26
 436:	fb 2a       	or	r15, r27
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	
	if(Copy_pAstrSEG_Config != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
 438:	33 94       	inc	r3
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	8c 01       	movw	r16, r24
 43e:	c1 2c       	mov	r12, r1
 440:	d1 2c       	mov	r13, r1
 442:	76 01       	movw	r14, r12
 444:	31 2c       	mov	r3, r1
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	83 15       	cp	r24, r3
 44a:	08 f0       	brcs	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44c:	3c cf       	rjmp	.-392    	; 0x2c6 <Seven_Segment_enuInit+0x2c>
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	19 c0       	rjmp	.+50     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
 452:	b7 01       	movw	r22, r14
 454:	a6 01       	movw	r20, r12
 456:	08 2e       	mov	r0, r24
 458:	04 c0       	rjmp	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45a:	76 95       	lsr	r23
 45c:	67 95       	ror	r22
 45e:	57 95       	ror	r21
 460:	47 95       	ror	r20
 462:	0a 94       	dec	r0
 464:	d2 f7       	brpl	.-12     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 466:	47 70       	andi	r20, 0x07	; 7
 468:	55 27       	eor	r21, r21
 46a:	66 27       	eor	r22, r22
 46c:	77 27       	eor	r23, r23
 46e:	45 2b       	or	r20, r21
 470:	46 2b       	or	r20, r22
 472:	47 2b       	or	r20, r23
 474:	51 f4       	brne	.+20     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
 476:	8d 5f       	subi	r24, 0xFD	; 253
 478:	01 c0       	rjmp	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	80 32       	cpi	r24, 0x20	; 32
 47e:	48 f3       	brcs	.-46     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
 480:	9f 5f       	subi	r25, 0xFF	; 255
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
				}
			}
			Local_enuErrorState = ES_OK;
 482:	80 e0       	ldi	r24, 0x00	; 0
			{
				Local_u32CheckError |= (DIO_enuSetPinDirection(Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PORT, Copy_pAstrSEG_Config[Local_u8Iterator].SEG_DOT_PIN, DIO_u8OUTPUT) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			}
		}
		
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
 484:	92 30       	cpi	r25, 0x02	; 2
 486:	c8 f3       	brcs	.-14     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 488:	01 c0       	rjmp	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		{
			for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
			{
				if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
				{
					return ES_NOK;
 48a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	7f 90       	pop	r7
 4a6:	6f 90       	pop	r6
 4a8:	5f 90       	pop	r5
 4aa:	4f 90       	pop	r4
 4ac:	3f 90       	pop	r3
 4ae:	08 95       	ret

000004b0 <Seven_Segment_enuDisplayNumber>:

ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
 4b0:	4f 92       	push	r4
 4b2:	5f 92       	push	r5
 4b4:	6f 92       	push	r6
 4b6:	7f 92       	push	r7
 4b8:	8f 92       	push	r8
 4ba:	9f 92       	push	r9
 4bc:	af 92       	push	r10
 4be:	bf 92       	push	r11
 4c0:	cf 92       	push	r12
 4c2:	df 92       	push	r13
 4c4:	ef 92       	push	r14
 4c6:	ff 92       	push	r15
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
	 
	if(Copy_SEG_ID < SEG_NUM && Copy_u8Number < 10)
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <Seven_Segment_enuDisplayNumber+0x26>
 4d4:	6e c1       	rjmp	.+732    	; 0x7b2 <Seven_Segment_enuDisplayNumber+0x302>
 4d6:	6a 30       	cpi	r22, 0x0A	; 10
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <Seven_Segment_enuDisplayNumber+0x2c>
 4da:	6d c1       	rjmp	.+730    	; 0x7b6 <Seven_Segment_enuDisplayNumber+0x306>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	23 e1       	ldi	r18, 0x13	; 19
 4e0:	28 9f       	mul	r18, r24
 4e2:	f0 01       	movw	r30, r0
 4e4:	29 9f       	mul	r18, r25
 4e6:	f0 0d       	add	r31, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	e0 5a       	subi	r30, 0xA0	; 160
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	22 89       	ldd	r18, Z+18	; 0x12
 4f0:	25 30       	cpi	r18, 0x05	; 5
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <Seven_Segment_enuDisplayNumber+0x46>
 4f4:	a8 c0       	rjmp	.+336    	; 0x646 <Seven_Segment_enuDisplayNumber+0x196>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, !((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
 4f6:	e6 2f       	mov	r30, r22
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ea 57       	subi	r30, 0x7A	; 122
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	70 80       	ld	r7, Z
 500:	11 e0       	ldi	r17, 0x01	; 1
 502:	47 2d       	mov	r20, r7
 504:	41 27       	eor	r20, r17
 506:	41 70       	andi	r20, 0x01	; 1
 508:	23 e1       	ldi	r18, 0x13	; 19
 50a:	28 9f       	mul	r18, r24
 50c:	e0 01       	movw	r28, r0
 50e:	29 9f       	mul	r18, r25
 510:	d0 0d       	add	r29, r0
 512:	11 24       	eor	r1, r1
 514:	c0 5a       	subi	r28, 0xA0	; 160
 516:	df 4f       	sbci	r29, 0xFF	; 255
 518:	69 81       	ldd	r22, Y+1	; 0x01
 51a:	88 81       	ld	r24, Y
 51c:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 520:	88 2e       	mov	r8, r24
 522:	91 2c       	mov	r9, r1
 524:	a1 2c       	mov	r10, r1
 526:	b1 2c       	mov	r11, r1
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, !((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 528:	47 2d       	mov	r20, r7
 52a:	46 95       	lsr	r20
 52c:	41 27       	eor	r20, r17
 52e:	41 70       	andi	r20, 0x01	; 1
 530:	6b 81       	ldd	r22, Y+3	; 0x03
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 538:	c8 2e       	mov	r12, r24
 53a:	d1 2c       	mov	r13, r1
 53c:	cc 0c       	add	r12, r12
 53e:	dd 1c       	adc	r13, r13
 540:	cc 0c       	add	r12, r12
 542:	dd 1c       	adc	r13, r13
 544:	cc 0c       	add	r12, r12
 546:	dd 1c       	adc	r13, r13
 548:	0d 2c       	mov	r0, r13
 54a:	00 0c       	add	r0, r0
 54c:	ee 08       	sbc	r14, r14
 54e:	ff 08       	sbc	r15, r15
 550:	c8 28       	or	r12, r8
 552:	d9 28       	or	r13, r9
 554:	ea 28       	or	r14, r10
 556:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, !((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 558:	47 2d       	mov	r20, r7
 55a:	46 95       	lsr	r20
 55c:	46 95       	lsr	r20
 55e:	41 27       	eor	r20, r17
 560:	41 70       	andi	r20, 0x01	; 1
 562:	6d 81       	ldd	r22, Y+5	; 0x05
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 56a:	20 e4       	ldi	r18, 0x40	; 64
 56c:	82 9f       	mul	r24, r18
 56e:	c0 01       	movw	r24, r0
 570:	11 24       	eor	r1, r1
 572:	09 2e       	mov	r0, r25
 574:	00 0c       	add	r0, r0
 576:	aa 0b       	sbc	r26, r26
 578:	bb 0b       	sbc	r27, r27
 57a:	c8 2a       	or	r12, r24
 57c:	d9 2a       	or	r13, r25
 57e:	ea 2a       	or	r14, r26
 580:	fb 2a       	or	r15, r27
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, !((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 582:	47 2d       	mov	r20, r7
 584:	46 95       	lsr	r20
 586:	46 95       	lsr	r20
 588:	46 95       	lsr	r20
 58a:	41 27       	eor	r20, r17
 58c:	41 70       	andi	r20, 0x01	; 1
 58e:	6f 81       	ldd	r22, Y+7	; 0x07
 590:	8e 81       	ldd	r24, Y+6	; 0x06
 592:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 596:	88 2e       	mov	r8, r24
 598:	91 2c       	mov	r9, r1
 59a:	98 2c       	mov	r9, r8
 59c:	88 24       	eor	r8, r8
 59e:	99 0c       	add	r9, r9
 5a0:	09 2c       	mov	r0, r9
 5a2:	00 0c       	add	r0, r0
 5a4:	aa 08       	sbc	r10, r10
 5a6:	bb 08       	sbc	r11, r11
 5a8:	c8 28       	or	r12, r8
 5aa:	d9 28       	or	r13, r9
 5ac:	ea 28       	or	r14, r10
 5ae:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, !((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 5b0:	47 2d       	mov	r20, r7
 5b2:	42 95       	swap	r20
 5b4:	4f 70       	andi	r20, 0x0F	; 15
 5b6:	41 27       	eor	r20, r17
 5b8:	41 70       	andi	r20, 0x01	; 1
 5ba:	69 85       	ldd	r22, Y+9	; 0x09
 5bc:	88 85       	ldd	r24, Y+8	; 0x08
 5be:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 5c2:	88 2e       	mov	r8, r24
 5c4:	91 2c       	mov	r9, r1
 5c6:	98 2c       	mov	r9, r8
 5c8:	88 24       	eor	r8, r8
 5ca:	99 0c       	add	r9, r9
 5cc:	99 0c       	add	r9, r9
 5ce:	99 0c       	add	r9, r9
 5d0:	99 0c       	add	r9, r9
 5d2:	c4 01       	movw	r24, r8
 5d4:	99 0c       	add	r9, r9
 5d6:	aa 0b       	sbc	r26, r26
 5d8:	bb 0b       	sbc	r27, r27
 5da:	4c 01       	movw	r8, r24
 5dc:	5d 01       	movw	r10, r26
 5de:	8c 28       	or	r8, r12
 5e0:	9d 28       	or	r9, r13
 5e2:	ae 28       	or	r10, r14
 5e4:	bf 28       	or	r11, r15
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, !((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 5e6:	47 2d       	mov	r20, r7
 5e8:	42 95       	swap	r20
 5ea:	46 95       	lsr	r20
 5ec:	47 70       	andi	r20, 0x07	; 7
 5ee:	41 27       	eor	r20, r17
 5f0:	41 70       	andi	r20, 0x01	; 1
 5f2:	6b 85       	ldd	r22, Y+11	; 0x0b
 5f4:	8a 85       	ldd	r24, Y+10	; 0x0a
 5f6:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 5fa:	c8 2e       	mov	r12, r24
 5fc:	d1 2c       	mov	r13, r1
 5fe:	dd 24       	eor	r13, r13
 600:	c6 94       	lsr	r12
 602:	d7 94       	ror	r13
 604:	cc 24       	eor	r12, r12
 606:	0d 2c       	mov	r0, r13
 608:	00 0c       	add	r0, r0
 60a:	ee 08       	sbc	r14, r14
 60c:	ff 08       	sbc	r15, r15
 60e:	c8 28       	or	r12, r8
 610:	d9 28       	or	r13, r9
 612:	ea 28       	or	r14, r10
 614:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, !((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 616:	47 2d       	mov	r20, r7
 618:	42 95       	swap	r20
 61a:	46 95       	lsr	r20
 61c:	46 95       	lsr	r20
 61e:	43 70       	andi	r20, 0x03	; 3
 620:	41 27       	eor	r20, r17
 622:	41 70       	andi	r20, 0x01	; 1
 624:	6d 85       	ldd	r22, Y+13	; 0x0d
 626:	8c 85       	ldd	r24, Y+12	; 0x0c
 628:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 62c:	08 2f       	mov	r16, r24
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	11 27       	eor	r17, r17
 632:	00 27       	eor	r16, r16
 634:	01 2e       	mov	r0, r17
 636:	00 0c       	add	r0, r0
 638:	22 0b       	sbc	r18, r18
 63a:	33 0b       	sbc	r19, r19
 63c:	0c 29       	or	r16, r12
 63e:	1d 29       	or	r17, r13
 640:	2e 29       	or	r18, r14
 642:	3f 29       	or	r19, r15
 644:	9d c0       	rjmp	.+314    	; 0x780 <Seven_Segment_enuDisplayNumber+0x2d0>
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
 646:	26 30       	cpi	r18, 0x06	; 6
 648:	09 f0       	breq	.+2      	; 0x64c <Seven_Segment_enuDisplayNumber+0x19c>
 64a:	97 c0       	rjmp	.+302    	; 0x77a <Seven_Segment_enuDisplayNumber+0x2ca>
		{
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_APIN, ((SEGCth_Numbers[Copy_u8Number] >> APIN_POS) & MASK_BIT)) << Local_u8Iterator_Error);
 64c:	e6 2f       	mov	r30, r22
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ea 57       	subi	r30, 0x7A	; 122
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	10 81       	ld	r17, Z
 656:	41 2f       	mov	r20, r17
 658:	41 70       	andi	r20, 0x01	; 1
 65a:	23 e1       	ldi	r18, 0x13	; 19
 65c:	28 9f       	mul	r18, r24
 65e:	e0 01       	movw	r28, r0
 660:	29 9f       	mul	r18, r25
 662:	d0 0d       	add	r29, r0
 664:	11 24       	eor	r1, r1
 666:	c0 5a       	subi	r28, 0xA0	; 160
 668:	df 4f       	sbci	r29, 0xFF	; 255
 66a:	69 81       	ldd	r22, Y+1	; 0x01
 66c:	88 81       	ld	r24, Y
 66e:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 672:	c8 2e       	mov	r12, r24
 674:	d1 2c       	mov	r13, r1
 676:	e1 2c       	mov	r14, r1
 678:	f1 2c       	mov	r15, r1
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_BPIN, ((SEGCth_Numbers[Copy_u8Number] >> BPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 67a:	11 fb       	bst	r17, 1
 67c:	44 27       	eor	r20, r20
 67e:	40 f9       	bld	r20, 0
 680:	6b 81       	ldd	r22, Y+3	; 0x03
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 688:	48 2e       	mov	r4, r24
 68a:	51 2c       	mov	r5, r1
 68c:	44 0c       	add	r4, r4
 68e:	55 1c       	adc	r5, r5
 690:	44 0c       	add	r4, r4
 692:	55 1c       	adc	r5, r5
 694:	44 0c       	add	r4, r4
 696:	55 1c       	adc	r5, r5
 698:	05 2c       	mov	r0, r5
 69a:	00 0c       	add	r0, r0
 69c:	66 08       	sbc	r6, r6
 69e:	77 08       	sbc	r7, r7
 6a0:	c4 28       	or	r12, r4
 6a2:	d5 28       	or	r13, r5
 6a4:	e6 28       	or	r14, r6
 6a6:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CPIN, ((SEGCth_Numbers[Copy_u8Number] >> CPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 6a8:	12 fb       	bst	r17, 2
 6aa:	44 27       	eor	r20, r20
 6ac:	40 f9       	bld	r20, 0
 6ae:	6d 81       	ldd	r22, Y+5	; 0x05
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 6b6:	20 e4       	ldi	r18, 0x40	; 64
 6b8:	82 9f       	mul	r24, r18
 6ba:	c0 01       	movw	r24, r0
 6bc:	11 24       	eor	r1, r1
 6be:	2c 01       	movw	r4, r24
 6c0:	99 0f       	add	r25, r25
 6c2:	66 08       	sbc	r6, r6
 6c4:	77 08       	sbc	r7, r7
 6c6:	c4 28       	or	r12, r4
 6c8:	d5 28       	or	r13, r5
 6ca:	e6 28       	or	r14, r6
 6cc:	f7 28       	or	r15, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_DPIN, ((SEGCth_Numbers[Copy_u8Number] >> DPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 6ce:	13 fb       	bst	r17, 3
 6d0:	44 27       	eor	r20, r20
 6d2:	40 f9       	bld	r20, 0
 6d4:	6f 81       	ldd	r22, Y+7	; 0x07
 6d6:	8e 81       	ldd	r24, Y+6	; 0x06
 6d8:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 6dc:	48 2e       	mov	r4, r24
 6de:	51 2c       	mov	r5, r1
 6e0:	54 2c       	mov	r5, r4
 6e2:	44 24       	eor	r4, r4
 6e4:	55 0c       	add	r5, r5
 6e6:	05 2c       	mov	r0, r5
 6e8:	00 0c       	add	r0, r0
 6ea:	66 08       	sbc	r6, r6
 6ec:	77 08       	sbc	r7, r7
 6ee:	4c 28       	or	r4, r12
 6f0:	5d 28       	or	r5, r13
 6f2:	6e 28       	or	r6, r14
 6f4:	7f 28       	or	r7, r15
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 6f6:	14 fb       	bst	r17, 4
 6f8:	44 27       	eor	r20, r20
 6fa:	40 f9       	bld	r20, 0
 6fc:	69 85       	ldd	r22, Y+9	; 0x09
 6fe:	88 85       	ldd	r24, Y+8	; 0x08
 700:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 704:	c8 2e       	mov	r12, r24
 706:	d1 2c       	mov	r13, r1
 708:	dc 2c       	mov	r13, r12
 70a:	cc 24       	eor	r12, r12
 70c:	dd 0c       	add	r13, r13
 70e:	dd 0c       	add	r13, r13
 710:	dd 0c       	add	r13, r13
 712:	dd 0c       	add	r13, r13
 714:	0d 2c       	mov	r0, r13
 716:	00 0c       	add	r0, r0
 718:	ee 08       	sbc	r14, r14
 71a:	ff 08       	sbc	r15, r15
 71c:	46 01       	movw	r8, r12
 71e:	57 01       	movw	r10, r14
 720:	84 28       	or	r8, r4
 722:	95 28       	or	r9, r5
 724:	a6 28       	or	r10, r6
 726:	b7 28       	or	r11, r7
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 728:	15 fb       	bst	r17, 5
 72a:	44 27       	eor	r20, r20
 72c:	40 f9       	bld	r20, 0
 72e:	6b 85       	ldd	r22, Y+11	; 0x0b
 730:	8a 85       	ldd	r24, Y+10	; 0x0a
 732:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 736:	c8 2e       	mov	r12, r24
 738:	d1 2c       	mov	r13, r1
 73a:	dd 24       	eor	r13, r13
 73c:	c6 94       	lsr	r12
 73e:	d7 94       	ror	r13
 740:	cc 24       	eor	r12, r12
 742:	0d 2c       	mov	r0, r13
 744:	00 0c       	add	r0, r0
 746:	ee 08       	sbc	r14, r14
 748:	ff 08       	sbc	r15, r15
 74a:	c8 28       	or	r12, r8
 74c:	d9 28       	or	r13, r9
 74e:	ea 28       	or	r14, r10
 750:	fb 28       	or	r15, r11
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
 752:	16 fb       	bst	r17, 6
 754:	44 27       	eor	r20, r20
 756:	40 f9       	bld	r20, 0
 758:	6d 85       	ldd	r22, Y+13	; 0x0d
 75a:	8c 85       	ldd	r24, Y+12	; 0x0c
 75c:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 760:	08 2f       	mov	r16, r24
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	11 27       	eor	r17, r17
 766:	00 27       	eor	r16, r16
 768:	01 2e       	mov	r0, r17
 76a:	00 0c       	add	r0, r0
 76c:	22 0b       	sbc	r18, r18
 76e:	33 0b       	sbc	r19, r19
 770:	0c 29       	or	r16, r12
 772:	1d 29       	or	r17, r13
 774:	2e 29       	or	r18, r14
 776:	3f 29       	or	r19, r15
 778:	03 c0       	rjmp	.+6      	; 0x780 <Seven_Segment_enuDisplayNumber+0x2d0>
ES_t Seven_Segment_enuDisplayNumber(u8 Copy_SEG_ID, u8 Copy_u8Number)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	u8 Local_u8Iterator_Error = 0;
	u32 Local_u32CheckError = 0;
 77a:	00 e0       	ldi	r16, 0x00	; 0
 77c:	10 e0       	ldi	r17, 0x00	; 0
 77e:	98 01       	movw	r18, r16
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	13 c0       	rjmp	.+38     	; 0x7aa <Seven_Segment_enuDisplayNumber+0x2fa>
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
 784:	b9 01       	movw	r22, r18
 786:	a8 01       	movw	r20, r16
 788:	08 2e       	mov	r0, r24
 78a:	04 c0       	rjmp	.+8      	; 0x794 <Seven_Segment_enuDisplayNumber+0x2e4>
 78c:	76 95       	lsr	r23
 78e:	67 95       	ror	r22
 790:	57 95       	ror	r21
 792:	47 95       	ror	r20
 794:	0a 94       	dec	r0
 796:	d2 f7       	brpl	.-12     	; 0x78c <Seven_Segment_enuDisplayNumber+0x2dc>
 798:	47 70       	andi	r20, 0x07	; 7
 79a:	55 27       	eor	r21, r21
 79c:	66 27       	eor	r22, r22
 79e:	77 27       	eor	r23, r23
 7a0:	45 2b       	or	r20, r21
 7a2:	46 2b       	or	r20, r22
 7a4:	47 2b       	or	r20, r23
 7a6:	49 f4       	brne	.+18     	; 0x7ba <Seven_Segment_enuDisplayNumber+0x30a>
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_EPIN, ((SEGCth_Numbers[Copy_u8Number] >> EPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_FPIN, ((SEGCth_Numbers[Copy_u8Number] >> FPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
			Local_u32CheckError |= (DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_GPIN, ((SEGCth_Numbers[Copy_u8Number] >> GPIN_POS) & MASK_BIT)) << (Local_u8Iterator_Error += ERROR_STATE_SIZE));
		}
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
 7a8:	8d 5f       	subi	r24, 0xFD	; 253
 7aa:	80 32       	cpi	r24, 0x20	; 32
 7ac:	58 f3       	brcs	.-42     	; 0x784 <Seven_Segment_enuDisplayNumber+0x2d4>
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
			}
		}
		Local_enuErrorState = ES_OK;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <Seven_Segment_enuDisplayNumber+0x30c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 7b2:	83 e0       	ldi	r24, 0x03	; 3
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <Seven_Segment_enuDisplayNumber+0x30c>
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <Seven_Segment_enuDisplayNumber+0x30c>
		
		for(Local_u8Iterator_Error = 0; Local_u8Iterator_Error < sizeof(Local_u32CheckError)*8; Local_u8Iterator_Error += ERROR_STATE_SIZE)
		{
			if(((Local_u32CheckError >> Local_u8Iterator_Error) & ERROR_STATE_MASK) != ES_OK)
			{
				return ES_NOK;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	ff 90       	pop	r15
 7c6:	ef 90       	pop	r14
 7c8:	df 90       	pop	r13
 7ca:	cf 90       	pop	r12
 7cc:	bf 90       	pop	r11
 7ce:	af 90       	pop	r10
 7d0:	9f 90       	pop	r9
 7d2:	8f 90       	pop	r8
 7d4:	7f 90       	pop	r7
 7d6:	6f 90       	pop	r6
 7d8:	5f 90       	pop	r5
 7da:	4f 90       	pop	r4
 7dc:	08 95       	ret

000007de <Seven_Segment_enuEnableCommon>:

ES_t Seven_Segment_enuEnableCommon(u8 Copy_SEG_ID)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_SEG_ID < SEG_NUM)
 7de:	82 30       	cpi	r24, 0x02	; 2
 7e0:	50 f5       	brcc	.+84     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	23 e1       	ldi	r18, 0x13	; 19
 7e6:	28 9f       	mul	r18, r24
 7e8:	f0 01       	movw	r30, r0
 7ea:	29 9f       	mul	r18, r25
 7ec:	f0 0d       	add	r31, r0
 7ee:	11 24       	eor	r1, r1
 7f0:	e0 5a       	subi	r30, 0xA0	; 160
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	22 89       	ldd	r18, Z+18	; 0x12
 7f6:	25 30       	cpi	r18, 0x05	; 5
 7f8:	71 f4       	brne	.+28     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
 7fa:	23 e1       	ldi	r18, 0x13	; 19
 7fc:	28 9f       	mul	r18, r24
 7fe:	f0 01       	movw	r30, r0
 800:	29 9f       	mul	r18, r25
 802:	f0 0d       	add	r31, r0
 804:	11 24       	eor	r1, r1
 806:	e0 5a       	subi	r30, 0xA0	; 160
 808:	ff 4f       	sbci	r31, 0xFF	; 255
 80a:	67 85       	ldd	r22, Z+15	; 0x0f
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	86 85       	ldd	r24, Z+14	; 0x0e
 810:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 814:	08 95       	ret
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
 816:	26 30       	cpi	r18, 0x06	; 6
 818:	81 f4       	brne	.+32     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
 81a:	23 e1       	ldi	r18, 0x13	; 19
 81c:	28 9f       	mul	r18, r24
 81e:	f0 01       	movw	r30, r0
 820:	29 9f       	mul	r18, r25
 822:	f0 0d       	add	r31, r0
 824:	11 24       	eor	r1, r1
 826:	e0 5a       	subi	r30, 0xA0	; 160
 828:	ff 4f       	sbci	r31, 0xFF	; 255
 82a:	67 85       	ldd	r22, Z+15	; 0x0f
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	86 85       	ldd	r24, Z+14	; 0x0e
 830:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 834:	08 95       	ret
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 836:	83 e0       	ldi	r24, 0x03	; 3
 838:	08 95       	ret
	return Local_enuErrorState;
}

ES_t Seven_Segment_enuEnableCommon(u8 Copy_SEG_ID)
{
	ES_t Local_enuErrorState = ES_NOK;
 83a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 83c:	08 95       	ret

0000083e <Seven_Segment_enuDisableCommon>:

ES_t Seven_Segment_enuDisableCommon(u8 Copy_SEG_ID)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_SEG_ID < SEG_NUM)
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	50 f5       	brcc	.+84     	; 0x896 <__stack+0x37>
	{
		if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_ANODE)
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	23 e1       	ldi	r18, 0x13	; 19
 846:	28 9f       	mul	r18, r24
 848:	f0 01       	movw	r30, r0
 84a:	29 9f       	mul	r18, r25
 84c:	f0 0d       	add	r31, r0
 84e:	11 24       	eor	r1, r1
 850:	e0 5a       	subi	r30, 0xA0	; 160
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	22 89       	ldd	r18, Z+18	; 0x12
 856:	25 30       	cpi	r18, 0x05	; 5
 858:	71 f4       	brne	.+28     	; 0x876 <__stack+0x17>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8LOW);
 85a:	23 e1       	ldi	r18, 0x13	; 19
 85c:	28 9f       	mul	r18, r24
 85e:	f0 01       	movw	r30, r0
 860:	29 9f       	mul	r18, r25
 862:	f0 0d       	add	r31, r0
 864:	11 24       	eor	r1, r1
 866:	e0 5a       	subi	r30, 0xA0	; 160
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	67 85       	ldd	r22, Z+15	; 0x0f
 86c:	40 e0       	ldi	r20, 0x00	; 0
 86e:	86 85       	ldd	r24, Z+14	; 0x0e
 870:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 874:	08 95       	ret
		}
		else if(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_TYPE == COMMON_CATHODE)
 876:	26 30       	cpi	r18, 0x06	; 6
 878:	81 f4       	brne	.+32     	; 0x89a <__stack+0x3b>
		{
			Local_enuErrorState = DIO_enuSetPinVal(SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PORT, SEV_SEG_AstrSEGConfig[Copy_SEG_ID].SEG_CMN_PIN, DIO_u8HIGH);
 87a:	23 e1       	ldi	r18, 0x13	; 19
 87c:	28 9f       	mul	r18, r24
 87e:	f0 01       	movw	r30, r0
 880:	29 9f       	mul	r18, r25
 882:	f0 0d       	add	r31, r0
 884:	11 24       	eor	r1, r1
 886:	e0 5a       	subi	r30, 0xA0	; 160
 888:	ff 4f       	sbci	r31, 0xFF	; 255
 88a:	67 85       	ldd	r22, Z+15	; 0x0f
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	86 85       	ldd	r24, Z+14	; 0x0e
 890:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_enuSetPinVal>
 894:	08 95       	ret
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	08 95       	ret
	return Local_enuErrorState;
}

ES_t Seven_Segment_enuDisableCommon(u8 Copy_SEG_ID)
{
	ES_t Local_enuErrorState = ES_NOK;
 89a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 89c:	08 95       	ret

0000089e <_exit>:
 89e:	f8 94       	cli

000008a0 <__stop_program>:
 8a0:	ff cf       	rjmp	.-2      	; 0x8a0 <__stop_program>
