
Control_Led_Using_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057b  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define SW3				2

int main(void)
{
	/* Led1 & Led2 --> connected to pin 0 & 1 in PORTA (output pins) */
	DDRA |= (1 << Led1);
  6c:	8a b3       	in	r24, 0x1a	; 26
	DDRA |= (1 << Led2);
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8a bb       	out	0x1a, r24	; 26
	
	/* SW1 & SW2 & SW3 --> connected to pin 0 & 1 & 2 in PORTB (input pins & enable PULL UP) */
	DDRB &= ~(1 << SW1);
  72:	87 b3       	in	r24, 0x17	; 23
	DDRB &= ~(1 << SW2);
	DDRB &= ~(1 << SW3);
  74:	88 7f       	andi	r24, 0xF8	; 248
  76:	87 bb       	out	0x17, r24	; 23
	
	PORTB |= (1 << SW1);
  78:	88 b3       	in	r24, 0x18	; 24
	PORTB |= (1 << SW2);
	PORTB |= (1 << SW3);
  7a:	87 60       	ori	r24, 0x07	; 7
  7c:	88 bb       	out	0x18, r24	; 24
	
	/* Turn off the 2 leds */
	PORTA &= ~(1 << Led1);
  7e:	8b b3       	in	r24, 0x1b	; 27
	PORTA &= ~(1 << Led2);
  80:	8c 7f       	andi	r24, 0xFC	; 252
  82:	8b bb       	out	0x1b, r24	; 27
	
    /* Replace with your application code */
    while (1) 
    {
		/* In case no switches are pressed both leds are off. */
		if(((PINB >> SW1) & 1) && ((PINB >> SW2) & 1) && ((PINB >> SW3) & 1))
  84:	b0 9b       	sbis	0x16, 0	; 22
  86:	07 c0       	rjmp	.+14     	; 0x96 <main+0x2a>
  88:	b1 9b       	sbis	0x16, 1	; 22
  8a:	05 c0       	rjmp	.+10     	; 0x96 <main+0x2a>
  8c:	b2 9b       	sbis	0x16, 2	; 22
  8e:	03 c0       	rjmp	.+6      	; 0x96 <main+0x2a>
		{
			PORTA &= ~(1 << Led1);
  90:	8b b3       	in	r24, 0x1b	; 27
			PORTA &= ~(1 << Led2);
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	8b bb       	out	0x1b, r24	; 27
		}
		
		/* If switch 1 is pressed just turn on the first led1 only */
		if(((PINB >> SW1) & 1) == 0)
  96:	b0 99       	sbic	0x16, 0	; 22
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x34>
		{
			PORTA |= (1 << Led1);
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8b bb       	out	0x1b, r24	; 27
		}
		
		/* if switch 2 is pressed just turn on led2 only */
		if(((PINB >> SW2) & 1) == 0)
  a0:	b1 99       	sbic	0x16, 1	; 22
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x3e>
		{
			PORTA |= (1 << Led2);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8b bb       	out	0x1b, r24	; 27
		}
		
		/* if switch 3 is pressed turn on the 2 leds */
		if(((PINB >> SW3) & 1) == 0)
  aa:	b2 99       	sbic	0x16, 2	; 22
  ac:	eb cf       	rjmp	.-42     	; 0x84 <main+0x18>
		{
			PORTA |= (1 << Led1);
  ae:	8b b3       	in	r24, 0x1b	; 27
			PORTA |= (1 << Led2);
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <main+0x18>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
