
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000021e  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a49  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000773  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047c  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c6  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  7a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuINIT>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
  86:	87 bb       	out	0x17, r24	; 23
  88:	84 bb       	out	0x14, r24	; 20
  8a:	8e e4       	ldi	r24, 0x4E	; 78
  8c:	81 bb       	out	0x11, r24	; 17
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
  94:	15 ba       	out	0x15, r1	; 21
  96:	82 e7       	ldi	r24, 0x72	; 114
  98:	82 bb       	out	0x12, r24	; 18
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	08 95       	ret

0000009e <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_enuSetPinVal+0x6>
  a2:	67 c0       	rjmp	.+206    	; 0x172 <DIO_enuSetPinVal+0xd4>
  a4:	68 30       	cpi	r22, 0x08	; 8
  a6:	08 f0       	brcs	.+2      	; 0xaa <DIO_enuSetPinVal+0xc>
  a8:	66 c0       	rjmp	.+204    	; 0x176 <DIO_enuSetPinVal+0xd8>
  aa:	42 30       	cpi	r20, 0x02	; 2
  ac:	08 f0       	brcs	.+2      	; 0xb0 <DIO_enuSetPinVal+0x12>
  ae:	65 c0       	rjmp	.+202    	; 0x17a <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	e9 f0       	breq	.+58     	; 0xee <DIO_enuSetPinVal+0x50>
  b4:	30 f0       	brcs	.+12     	; 0xc2 <DIO_enuSetPinVal+0x24>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	81 f1       	breq	.+96     	; 0x11a <DIO_enuSetPinVal+0x7c>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0 <DIO_enuSetPinVal+0x22>
  be:	43 c0       	rjmp	.+134    	; 0x146 <DIO_enuSetPinVal+0xa8>
  c0:	5e c0       	rjmp	.+188    	; 0x17e <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	06 2e       	mov	r0, r22
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_enuSetPinVal+0x30>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_enuSetPinVal+0x2c>
  d2:	80 95       	com	r24
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
  d8:	84 2f       	mov	r24, r20
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_enuSetPinVal+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_enuSetPinVal+0x40>
  e6:	82 2b       	or	r24, r18
  e8:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
  ea:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
  ec:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_enuSetPinVal+0x5c>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_enuSetPinVal+0x58>
  fe:	20 95       	com	r18
 100:	88 b3       	in	r24, 0x18	; 24
 102:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 104:	84 2f       	mov	r24, r20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_enuSetPinVal+0x70>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_enuSetPinVal+0x6c>
 112:	82 2b       	or	r24, r18
 114:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 116:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
 118:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	06 2e       	mov	r0, r22
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_enuSetPinVal+0x88>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_enuSetPinVal+0x84>
 12a:	20 95       	com	r18
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 130:	84 2f       	mov	r24, r20
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_enuSetPinVal+0x9c>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_enuSetPinVal+0x98>
 13e:	82 2b       	or	r24, r18
 140:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
 144:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	06 2e       	mov	r0, r22
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_enuSetPinVal+0xb4>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_enuSetPinVal+0xb0>
 156:	20 95       	com	r18
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 15c:	84 2f       	mov	r24, r20
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_enuSetPinVal+0xc8>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_enuSetPinVal+0xc4>
 16a:	82 2b       	or	r24, r18
 16c:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
 16e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
 170:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	08 95       	ret
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	08 95       	ret
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
 180:	08 95       	ret

00000182 <main>:
#include "DIO_int.h"

#include <util/delay.h>

int main(void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	28 97       	sbiw	r28, 0x08	; 8
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
	//u8 SegCth[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}
	s8 i, j;
	s8 Pins[] = {DIO_u8PIN0, DIO_u8PIN1, DIO_u8PIN2, DIO_u8PIN3, DIO_u8PIN4, DIO_u8PIN5, DIO_u8PIN6, DIO_u8PIN7};
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	e0 e6       	ldi	r30, 0x60	; 96
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	de 01       	movw	r26, r28
 19e:	11 96       	adiw	r26, 0x01	; 1
 1a0:	01 90       	ld	r0, Z+
 1a2:	0d 92       	st	X+, r0
 1a4:	8a 95       	dec	r24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x1e>
		
	DIO_enuINIT();
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuINIT>
	
    /* Replace with your application code */
    while (1) 
    {
		for(i = 0; i < 8; i++)
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	17 c0       	rjmp	.+46     	; 0x1de <main+0x5c>
		{
			DIO_enuSetPinVal(DIO_u8PORTC, Pins[i], DIO_u8HIGH);
 1b0:	e1 e0       	ldi	r30, 0x01	; 1
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	e1 0f       	add	r30, r17
 1ba:	f1 1d       	adc	r31, r1
 1bc:	17 fd       	sbrc	r17, 7
 1be:	fa 95       	dec	r31
 1c0:	60 81       	ld	r22, Z
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f e9       	ldi	r18, 0x9F	; 159
 1cc:	86 e8       	ldi	r24, 0x86	; 134
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x4e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x58>
 1da:	00 00       	nop
	DIO_enuINIT();
	
    /* Replace with your application code */
    while (1) 
    {
		for(i = 0; i < 8; i++)
 1dc:	1f 5f       	subi	r17, 0xFF	; 255
 1de:	18 30       	cpi	r17, 0x08	; 8
 1e0:	3c f3       	brlt	.-50     	; 0x1b0 <main+0x2e>
 1e2:	17 e0       	ldi	r17, 0x07	; 7
 1e4:	17 c0       	rjmp	.+46     	; 0x214 <main+0x92>
			DIO_enuSetPinVal(DIO_u8PORTC, Pins[i], DIO_u8HIGH);
			_delay_ms(500);
		}
		for(j = 7; j >= 0; j--)
		{
			DIO_enuSetPinVal(DIO_u8PORTC, Pins[j], DIO_u8LOW);
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e1 0f       	add	r30, r17
 1f0:	f1 1d       	adc	r31, r1
 1f2:	17 fd       	sbrc	r17, 7
 1f4:	fa 95       	dec	r31
 1f6:	60 81       	ld	r22, Z
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_enuSetPinVal>
 200:	2f e9       	ldi	r18, 0x9F	; 159
 202:	86 e8       	ldi	r24, 0x86	; 134
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x84>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x8e>
 210:	00 00       	nop
		for(i = 0; i < 8; i++)
		{
			DIO_enuSetPinVal(DIO_u8PORTC, Pins[i], DIO_u8HIGH);
			_delay_ms(500);
		}
		for(j = 7; j >= 0; j--)
 212:	11 50       	subi	r17, 0x01	; 1
 214:	11 23       	and	r17, r17
 216:	3c f7       	brge	.-50     	; 0x1e6 <main+0x64>
 218:	c9 cf       	rjmp	.-110    	; 0x1ac <main+0x2a>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
