
Control_Two_7Segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d2  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053a  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e9  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
/* SW pins */
#define SW1				0
#define SW2				1

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	/* values of Seven Segment Common Cathode */
	u8 SegCth[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
		
	/* 7Seg1 --> connected to PA, 7Seg2 --> connected to PB & They are common cathode */
	DDRA = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  ac:	87 bb       	out	0x17, r24	; 23
	
	/* SW1 & SW2 --> connected to pin 0 & 1 in PORTC (input pins & enable PULL UP) */
	DDRC &= ~(1 << SW1);
  ae:	84 b3       	in	r24, 0x14	; 20
	DDRC &= ~(1 << SW2);
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	84 bb       	out	0x14, r24	; 20
	
	PORTC |= (1 << SW1);
  b4:	85 b3       	in	r24, 0x15	; 21
	PORTC |= (1 << SW2);
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 bb       	out	0x15, r24	; 21
	
	/* when you start your program , number 50 is displayed. */
	u8 num = 50, ones, tens;
	ones = num % 10;
	tens = num / 10;
	PORTA = SegCth[ones];
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	8b bb       	out	0x1b, r24	; 27
	PORTB = SegCth[tens];
  be:	8e 81       	ldd	r24, Y+6	; 0x06
  c0:	88 bb       	out	0x18, r24	; 24
	
	PORTC |= (1 << SW1);
	PORTC |= (1 << SW2);
	
	/* when you start your program , number 50 is displayed. */
	u8 num = 50, ones, tens;
  c2:	22 e3       	ldi	r18, 0x32	; 50
	PORTB = SegCth[tens];
	
    /* Replace with your application code */
    while (1) 
    {
		if(((PINC >> SW1) & 1) == 0)	/* SW1 is pressed */
  c4:	98 99       	sbic	0x13, 0	; 19
  c6:	26 c0       	rjmp	.+76     	; 0x114 <main+0x92>
		{
			num++;
  c8:	2f 5f       	subi	r18, 0xFF	; 255
			ones = num % 10;
  ca:	8d ec       	ldi	r24, 0xCD	; 205
  cc:	28 9f       	mul	r18, r24
  ce:	81 2d       	mov	r24, r1
  d0:	11 24       	eor	r1, r1
  d2:	98 2f       	mov	r25, r24
  d4:	96 95       	lsr	r25
  d6:	96 95       	lsr	r25
  d8:	96 95       	lsr	r25
  da:	99 0f       	add	r25, r25
  dc:	39 2f       	mov	r19, r25
  de:	33 0f       	add	r19, r19
  e0:	33 0f       	add	r19, r19
  e2:	93 0f       	add	r25, r19
  e4:	32 2f       	mov	r19, r18
  e6:	39 1b       	sub	r19, r25
			tens = num / 10;
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
			PORTA = SegCth[ones];
  ee:	e1 e0       	ldi	r30, 0x01	; 1
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e3 0f       	add	r30, r19
  f8:	f1 1d       	adc	r31, r1
  fa:	90 81       	ld	r25, Z
  fc:	9b bb       	out	0x1b, r25	; 27
			PORTB = SegCth[tens];
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e8 0f       	add	r30, r24
 108:	f1 1d       	adc	r31, r1
 10a:	80 81       	ld	r24, Z
 10c:	88 bb       	out	0x18, r24	; 24
			while(((PINC >> SW1) & 1) == 0);	/* single press */
 10e:	98 9b       	sbis	0x13, 0	; 19
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x8c>
 112:	d8 cf       	rjmp	.-80     	; 0xc4 <main+0x42>
		}
		else if(((PINC >> SW2) & 1) == 0)	/* SW2 is pressed */
 114:	99 99       	sbic	0x13, 1	; 19
 116:	d6 cf       	rjmp	.-84     	; 0xc4 <main+0x42>
		{
			num--;
 118:	21 50       	subi	r18, 0x01	; 1
			ones = num % 10;
 11a:	8d ec       	ldi	r24, 0xCD	; 205
 11c:	28 9f       	mul	r18, r24
 11e:	81 2d       	mov	r24, r1
 120:	11 24       	eor	r1, r1
 122:	98 2f       	mov	r25, r24
 124:	96 95       	lsr	r25
 126:	96 95       	lsr	r25
 128:	96 95       	lsr	r25
 12a:	99 0f       	add	r25, r25
 12c:	39 2f       	mov	r19, r25
 12e:	33 0f       	add	r19, r19
 130:	33 0f       	add	r19, r19
 132:	93 0f       	add	r25, r19
 134:	32 2f       	mov	r19, r18
 136:	39 1b       	sub	r19, r25
			tens = num / 10;
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	86 95       	lsr	r24
			PORTA = SegCth[ones];
 13e:	e1 e0       	ldi	r30, 0x01	; 1
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	ec 0f       	add	r30, r28
 144:	fd 1f       	adc	r31, r29
 146:	e3 0f       	add	r30, r19
 148:	f1 1d       	adc	r31, r1
 14a:	90 81       	ld	r25, Z
 14c:	9b bb       	out	0x1b, r25	; 27
			PORTB = SegCth[tens];
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ec 0f       	add	r30, r28
 154:	fd 1f       	adc	r31, r29
 156:	e8 0f       	add	r30, r24
 158:	f1 1d       	adc	r31, r1
 15a:	80 81       	ld	r24, Z
 15c:	88 bb       	out	0x18, r24	; 24
			while(((PINC >> SW2) & 1) == 0);	/* single press */
 15e:	99 9b       	sbis	0x13, 1	; 19
 160:	fe cf       	rjmp	.-4      	; 0x15e <main+0xdc>
 162:	b0 cf       	rjmp	.-160    	; 0xc4 <main+0x42>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
