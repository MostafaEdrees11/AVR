
Control_7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005be  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052b  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d7  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
/* Switch Pins */
#define SW1				0
#define SW2				1
	
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	/* values of Seven Segment Common Cathode */
	u8 SegCth[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
		
	/* SW1 & SW2 --> connected to pin 0 & 1 in PORTA (input pins & enable PULL UP) */
	DDRA &= ~(1 << SW1);
  a8:	8a b3       	in	r24, 0x1a	; 26
	DDRA &= ~(1 << SW2);
  aa:	8c 7f       	andi	r24, 0xFC	; 252
  ac:	8a bb       	out	0x1a, r24	; 26
	
	PORTA |= (1 << SW1);
  ae:	8b b3       	in	r24, 0x1b	; 27
	PORTA |= (1 << SW2);
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	8b bb       	out	0x1b, r24	; 27
	
	/* 7-Segment connected to PORTB (output) */
	DDRB = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 bb       	out	0x17, r24	; 23
	
	s8 num = 0;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		if(((PINA >> SW1) & 1) == 0)		/* SW1 is pressed */
  ba:	c8 99       	sbic	0x19, 0	; 25
  bc:	12 c0       	rjmp	.+36     	; 0xe2 <main+0x60>
		{
			num++;
  be:	8f 5f       	subi	r24, 0xFF	; 255
			if(num >= 0 && num <= 9)	/* check if number between 0 & 9 */
  c0:	8a 30       	cpi	r24, 0x0A	; 10
  c2:	58 f4       	brcc	.+22     	; 0xda <main+0x58>
			{
				PORTB = SegCth[num];
  c4:	e1 e0       	ldi	r30, 0x01	; 1
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ec 0f       	add	r30, r28
  ca:	fd 1f       	adc	r31, r29
  cc:	e8 0f       	add	r30, r24
  ce:	f1 1d       	adc	r31, r1
  d0:	87 fd       	sbrc	r24, 7
  d2:	fa 95       	dec	r31
  d4:	90 81       	ld	r25, Z
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	01 c0       	rjmp	.+2      	; 0xdc <main+0x5a>
			}
			else
			{
				/* if number > 9 then we put 9 in the num */
				num = 9;
  da:	89 e0       	ldi	r24, 0x09	; 9
			}
			while(((PINA >> SW1) & 1) == 0);	/* single press */
  dc:	c8 9b       	sbis	0x19, 0	; 25
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x5a>
  e0:	ec cf       	rjmp	.-40     	; 0xba <main+0x38>
		}
		else if(((PINA >> SW2) & 1) == 0)	/* SW2 is pressed */
  e2:	c9 99       	sbic	0x19, 1	; 25
  e4:	ea cf       	rjmp	.-44     	; 0xba <main+0x38>
		{
			num--;
  e6:	81 50       	subi	r24, 0x01	; 1
			if(num >= 0 && num <= 9)	/* check if number between 0 & 9 */
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	58 f4       	brcc	.+22     	; 0x102 <main+0x80>
			{
				PORTB = SegCth[num];
  ec:	e1 e0       	ldi	r30, 0x01	; 1
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ec 0f       	add	r30, r28
  f2:	fd 1f       	adc	r31, r29
  f4:	e8 0f       	add	r30, r24
  f6:	f1 1d       	adc	r31, r1
  f8:	87 fd       	sbrc	r24, 7
  fa:	fa 95       	dec	r31
  fc:	90 81       	ld	r25, Z
  fe:	98 bb       	out	0x18, r25	; 24
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x82>
			}
			else
			{
				/* if number < 0 then we put 0 in the num */
				num = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
			}
			while(((PINA >> SW2) & 1) == 0);	/* single press */
 104:	c9 9b       	sbis	0x19, 1	; 25
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x82>
 108:	d8 cf       	rjmp	.-80     	; 0xba <main+0x38>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
