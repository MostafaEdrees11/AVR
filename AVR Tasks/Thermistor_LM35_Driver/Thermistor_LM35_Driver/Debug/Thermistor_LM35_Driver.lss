
Thermistor_LM35_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000129a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000129a  0000132e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800078  00800078  00001346  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ec  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee0  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001857  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00006154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb9  00000000  00000000  000066e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5c  00000000  00000000  0000729d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00008ef9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_1>
       8:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_2>
       c:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 02 	call	0x506	; 0x506 <main>
      8a:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_vidTrigger_LATCH>:
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
	LCD_inlenuSendCommand(LCD_Clear_Display);
	LCD_u8PosCounter = 0;
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	67 e0       	ldi	r22, 0x07	; 7
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      9c:	83 ec       	ldi	r24, 0xC3	; 195
      9e:	99 e0       	ldi	r25, 0x09	; 9
      a0:	01 97       	sbiw	r24, 0x01	; 1
      a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_vidTrigger_LATCH+0xe>
      a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_vidTrigger_LATCH+0x14>
      a6:	00 00       	nop
      a8:	41 e0       	ldi	r20, 0x01	; 1
      aa:	67 e0       	ldi	r22, 0x07	; 7
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      b2:	08 95       	ret

000000b4 <LCD_enuLatch>:
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	c8 2f       	mov	r28, r24
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	66 e0       	ldi	r22, 0x06	; 6
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      c4:	81 11       	cpse	r24, r1
      c6:	6e c0       	rjmp	.+220    	; 0x1a4 <LCD_enuLatch+0xf0>
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	67 e0       	ldi	r22, 0x07	; 7
      cc:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      d0:	81 11       	cpse	r24, r1
      d2:	68 c0       	rjmp	.+208    	; 0x1a4 <LCD_enuLatch+0xf0>
      d4:	dc 2f       	mov	r29, r28
      d6:	d0 7f       	andi	r29, 0xF0	; 240
      d8:	4d 2f       	mov	r20, r29
      da:	44 1f       	adc	r20, r20
      dc:	44 27       	eor	r20, r20
      de:	44 1f       	adc	r20, r20
      e0:	67 e0       	ldi	r22, 0x07	; 7
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      e8:	81 11       	cpse	r24, r1
      ea:	5c c0       	rjmp	.+184    	; 0x1a4 <LCD_enuLatch+0xf0>
      ec:	d6 fb       	bst	r29, 6
      ee:	44 27       	eor	r20, r20
      f0:	40 f9       	bld	r20, 0
      f2:	66 e0       	ldi	r22, 0x06	; 6
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
      fa:	81 11       	cpse	r24, r1
      fc:	53 c0       	rjmp	.+166    	; 0x1a4 <LCD_enuLatch+0xf0>
      fe:	d5 fb       	bst	r29, 5
     100:	44 27       	eor	r20, r20
     102:	40 f9       	bld	r20, 0
     104:	65 e0       	ldi	r22, 0x05	; 5
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     10c:	81 11       	cpse	r24, r1
     10e:	4a c0       	rjmp	.+148    	; 0x1a4 <LCD_enuLatch+0xf0>
     110:	d4 fb       	bst	r29, 4
     112:	44 27       	eor	r20, r20
     114:	40 f9       	bld	r20, 0
     116:	64 e0       	ldi	r22, 0x04	; 4
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     11e:	81 11       	cpse	r24, r1
     120:	41 c0       	rjmp	.+130    	; 0x1a4 <LCD_enuLatch+0xf0>
     122:	0e 94 49 00 	call	0x92	; 0x92 <LCD_vidTrigger_LATCH>
     126:	89 ef       	ldi	r24, 0xF9	; 249
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_enuLatch+0x76>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_enuLatch+0x7c>
     130:	00 00       	nop
     132:	c2 95       	swap	r28
     134:	c0 7f       	andi	r28, 0xF0	; 240
     136:	4c 2f       	mov	r20, r28
     138:	44 1f       	adc	r20, r20
     13a:	44 27       	eor	r20, r20
     13c:	44 1f       	adc	r20, r20
     13e:	67 e0       	ldi	r22, 0x07	; 7
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     146:	81 11       	cpse	r24, r1
     148:	2d c0       	rjmp	.+90     	; 0x1a4 <LCD_enuLatch+0xf0>
     14a:	c6 fb       	bst	r28, 6
     14c:	44 27       	eor	r20, r20
     14e:	40 f9       	bld	r20, 0
     150:	66 e0       	ldi	r22, 0x06	; 6
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     158:	81 11       	cpse	r24, r1
     15a:	24 c0       	rjmp	.+72     	; 0x1a4 <LCD_enuLatch+0xf0>
     15c:	c5 fb       	bst	r28, 5
     15e:	44 27       	eor	r20, r20
     160:	40 f9       	bld	r20, 0
     162:	65 e0       	ldi	r22, 0x05	; 5
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     16a:	81 11       	cpse	r24, r1
     16c:	1b c0       	rjmp	.+54     	; 0x1a4 <LCD_enuLatch+0xf0>
     16e:	c4 fb       	bst	r28, 4
     170:	44 27       	eor	r20, r20
     172:	40 f9       	bld	r20, 0
     174:	64 e0       	ldi	r22, 0x04	; 4
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     17c:	81 11       	cpse	r24, r1
     17e:	12 c0       	rjmp	.+36     	; 0x1a4 <LCD_enuLatch+0xf0>
     180:	89 ef       	ldi	r24, 0xF9	; 249
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <LCD_enuLatch+0xd0>
     188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_enuLatch+0xd6>
     18a:	00 00       	nop
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	67 e0       	ldi	r22, 0x07	; 7
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     196:	89 ef       	ldi	r24, 0xF9	; 249
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_enuLatch+0xe6>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_enuLatch+0xec>
     1a0:	00 00       	nop
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <LCD_inlenuSendCommand>:
     1aa:	cf 93       	push	r28
     1ac:	c8 2f       	mov	r28, r24
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	65 e0       	ldi	r22, 0x05	; 5
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     1b8:	81 11       	cpse	r24, r1
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <LCD_inlenuSendCommand+0x18>
     1bc:	8c 2f       	mov	r24, r28
     1be:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <LCD_enuInit>:
     1c6:	41 e0       	ldi	r20, 0x01	; 1
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     1d0:	81 11       	cpse	r24, r1
     1d2:	61 c0       	rjmp	.+194    	; 0x296 <LCD_enuInit+0xd0>
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	66 e0       	ldi	r22, 0x06	; 6
     1d8:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     1dc:	81 11       	cpse	r24, r1
     1de:	5b c0       	rjmp	.+182    	; 0x296 <LCD_enuInit+0xd0>
     1e0:	41 e0       	ldi	r20, 0x01	; 1
     1e2:	67 e0       	ldi	r22, 0x07	; 7
     1e4:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     1e8:	81 11       	cpse	r24, r1
     1ea:	55 c0       	rjmp	.+170    	; 0x296 <LCD_enuInit+0xd0>
     1ec:	41 e0       	ldi	r20, 0x01	; 1
     1ee:	67 e0       	ldi	r22, 0x07	; 7
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     1f6:	81 11       	cpse	r24, r1
     1f8:	4e c0       	rjmp	.+156    	; 0x296 <LCD_enuInit+0xd0>
     1fa:	41 e0       	ldi	r20, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     204:	81 11       	cpse	r24, r1
     206:	47 c0       	rjmp	.+142    	; 0x296 <LCD_enuInit+0xd0>
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	65 e0       	ldi	r22, 0x05	; 5
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     212:	81 11       	cpse	r24, r1
     214:	40 c0       	rjmp	.+128    	; 0x296 <LCD_enuInit+0xd0>
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	64 e0       	ldi	r22, 0x04	; 4
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
     220:	81 11       	cpse	r24, r1
     222:	39 c0       	rjmp	.+114    	; 0x296 <LCD_enuInit+0xd0>
     224:	8d e2       	ldi	r24, 0x2D	; 45
     226:	92 e2       	ldi	r25, 0x22	; 34
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_enuInit+0x62>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_enuInit+0x68>
     22e:	00 00       	nop
     230:	83 e3       	ldi	r24, 0x33	; 51
     232:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     236:	82 e3       	ldi	r24, 0x32	; 50
     238:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     242:	81 11       	cpse	r24, r1
     244:	28 c0       	rjmp	.+80     	; 0x296 <LCD_enuInit+0xd0>
     246:	89 ef       	ldi	r24, 0xF9	; 249
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_enuInit+0x84>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_enuInit+0x8a>
     250:	00 00       	nop
     252:	8f e0       	ldi	r24, 0x0F	; 15
     254:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     258:	81 11       	cpse	r24, r1
     25a:	1d c0       	rjmp	.+58     	; 0x296 <LCD_enuInit+0xd0>
     25c:	89 ef       	ldi	r24, 0xF9	; 249
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <LCD_enuInit+0x9a>
     264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_enuInit+0xa0>
     266:	00 00       	nop
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     26e:	81 11       	cpse	r24, r1
     270:	12 c0       	rjmp	.+36     	; 0x296 <LCD_enuInit+0xd0>
     272:	83 ef       	ldi	r24, 0xF3	; 243
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <LCD_enuInit+0xb0>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_enuInit+0xb6>
     27c:	00 00       	nop
     27e:	86 e0       	ldi	r24, 0x06	; 6
     280:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_inlenuSendCommand>
     284:	81 11       	cpse	r24, r1
     286:	07 c0       	rjmp	.+14     	; 0x296 <LCD_enuInit+0xd0>
     288:	89 ef       	ldi	r24, 0xF9	; 249
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_enuInit+0xc6>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_enuInit+0xcc>
     292:	00 00       	nop
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret

00000298 <LCD_enuSendCommand>:
     298:	cf 93       	push	r28
     29a:	c8 2f       	mov	r28, r24
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	65 e0       	ldi	r22, 0x05	; 5
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     2a6:	81 11       	cpse	r24, r1
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <LCD_enuSendCommand+0x18>
     2aa:	8c 2f       	mov	r24, r28
     2ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <LCD_enuGoToPosition>:
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	60 31       	cpi	r22, 0x10	; 16
     2ba:	40 f5       	brcc	.+80     	; 0x30c <LCD_enuGoToPosition+0x58>
     2bc:	c6 2f       	mov	r28, r22
     2be:	81 11       	cpse	r24, r1
     2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <LCD_enuGoToPosition+0x2e>
     2c2:	d0 e8       	ldi	r29, 0x80	; 128
     2c4:	d6 0f       	add	r29, r22
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	65 e0       	ldi	r22, 0x05	; 5
     2ca:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     2ce:	81 11       	cpse	r24, r1
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <LCD_enuGoToPosition+0x24>
     2d2:	8d 2f       	mov	r24, r29
     2d4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     2d8:	81 11       	cpse	r24, r1
     2da:	1b c0       	rjmp	.+54     	; 0x312 <LCD_enuGoToPosition+0x5e>
     2dc:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__data_end>
     2e0:	18 c0       	rjmp	.+48     	; 0x312 <LCD_enuGoToPosition+0x5e>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	a9 f4       	brne	.+42     	; 0x310 <LCD_enuGoToPosition+0x5c>
     2e6:	d0 ec       	ldi	r29, 0xC0	; 192
     2e8:	d6 0f       	add	r29, r22
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     2f4:	81 11       	cpse	r24, r1
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <LCD_enuGoToPosition+0x4a>
     2f8:	8d 2f       	mov	r24, r29
     2fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     2fe:	81 11       	cpse	r24, r1
     300:	08 c0       	rjmp	.+16     	; 0x312 <LCD_enuGoToPosition+0x5e>
     302:	60 e1       	ldi	r22, 0x10	; 16
     304:	6c 0f       	add	r22, r28
     306:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
     30a:	03 c0       	rjmp	.+6      	; 0x312 <LCD_enuGoToPosition+0x5e>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	01 c0       	rjmp	.+2      	; 0x312 <LCD_enuGoToPosition+0x5e>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <LCD_vidCheckPosition>:
     318:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     31c:	80 31       	cpi	r24, 0x10	; 16
     31e:	51 f4       	brne	.+20     	; 0x334 <LCD_vidCheckPosition+0x1c>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuGoToPosition>
     328:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
     332:	08 95       	ret
     334:	80 32       	cpi	r24, 0x20	; 32
     336:	89 f4       	brne	.+34     	; 0x35a <LCD_vidCheckPosition+0x42>
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	65 e0       	ldi	r22, 0x05	; 5
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     342:	81 11       	cpse	r24, r1
     344:	03 c0       	rjmp	.+6      	; 0x34c <LCD_vidCheckPosition+0x34>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuGoToPosition>
     354:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
     358:	08 95       	ret
     35a:	8f 5f       	subi	r24, 0xFF	; 255
     35c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
     360:	08 95       	ret

00000362 <LCD_enuDisplayChar>:
     362:	cf 93       	push	r28
     364:	c8 2f       	mov	r28, r24
     366:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_vidCheckPosition>
     36a:	41 e0       	ldi	r20, 0x01	; 1
     36c:	65 e0       	ldi	r22, 0x05	; 5
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_enuSetPinVal>
     374:	81 11       	cpse	r24, r1
     376:	03 c0       	rjmp	.+6      	; 0x37e <LCD_enuDisplayChar+0x1c>
     378:	8c 2f       	mov	r24, r28
     37a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_enuLatch>
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
     388:	89 2b       	or	r24, r25
     38a:	39 f4       	brne	.+14     	; 0x39a <LCD_enuWriteString+0x18>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <LCD_enuWriteString+0x1e>
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
     390:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_enuDisplayChar>
			if(Local_enuErrorState != ES_OK)
     394:	81 11       	cpse	r24, r1
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <LCD_enuWriteString+0x1e>
				return Local_enuErrorState;
			Copy_pu8Str++;
     398:	21 96       	adiw	r28, 0x01	; 1
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
     39a:	88 81       	ld	r24, Y
     39c:	81 11       	cpse	r24, r1
     39e:	f8 cf       	rjmp	.-16     	; 0x390 <LCD_enuWriteString+0xe>
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <LCD_enuWriteIntNumber>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteIntNumber(s32 Copy_s32Number)
{
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	60 97       	sbiw	r28, 0x10	; 16
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	7f 93       	push	r23
     3c2:	6f 93       	push	r22
     3c4:	82 e6       	ldi	r24, 0x62	; 98
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <sprintf>
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	10 e0       	ldi	r17, 0x00	; 0
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteIntNumber(s32 Copy_s32Number)
{
	ES_t Local_enuErrorState = ES_NOK;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <LCD_enuWriteIntNumber+0x4a>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
     3e8:	89 2f       	mov	r24, r25
     3ea:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_enuDisplayChar>
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     3ee:	1f 5f       	subi	r17, 0xFF	; 255
     3f0:	e1 e0       	ldi	r30, 0x01	; 1
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ec 0f       	add	r30, r28
     3f6:	fd 1f       	adc	r31, r29
     3f8:	e1 0f       	add	r30, r17
     3fa:	f1 1d       	adc	r31, r1
     3fc:	90 81       	ld	r25, Z
     3fe:	91 11       	cpse	r25, r1
     400:	f3 cf       	rjmp	.-26     	; 0x3e8 <LCD_enuWriteIntNumber+0x42>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
	}
	
	return Local_enuErrorState;
}
     402:	60 96       	adiw	r28, 0x10	; 16
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	08 95       	ret

00000416 <LM35_inlvidReadADCValue>:
static volatile u16 LM35_u16ADCValue = 0;
static volatile f32 LM35_f32Tempeture = 0;

void LM35_inlvidReadADCValue(void *Copy_PvidLM35VoltValue)
{
	ADC_enuReadADCValue(Copy_PvidLM35VoltValue);
     416:	0e 94 f7 02 	call	0x5ee	; 0x5ee <ADC_enuReadADCValue>
	
	LM35_f32Tempeture = ((LM35_u16ADCValue * ADC_VOLT_REF / ADC_RESOLUTION) / LM35_DEG_STEP);
     41a:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <LM35_u16ADCValue>
     41e:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <LM35_u16ADCValue+0x1>
     422:	a8 e8       	ldi	r26, 0x88	; 136
     424:	b3 e1       	ldi	r27, 0x13	; 19
     426:	0e 94 52 06 	call	0xca4	; 0xca4 <__umulhisi3>
     42a:	0e 94 57 05 	call	0xaae	; 0xaae <__floatunsisf>
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e8       	ldi	r20, 0x80	; 128
     434:	5a e3       	ldi	r21, 0x3A	; 58
     436:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e2       	ldi	r20, 0x20	; 32
     440:	51 e4       	ldi	r21, 0x41	; 65
     442:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3>
     446:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <LM35_f32Tempeture>
     44a:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <LM35_f32Tempeture+0x1>
     44e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <LM35_f32Tempeture+0x2>
     452:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <LM35_f32Tempeture+0x3>
     456:	08 95       	ret

00000458 <Thermistor_LM35_enuInit>:
}

ES_t Thermistor_LM35_enuInit(LM35_Configuration_t *Copy_PstrLM35Config)
{
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	ADC_enuInit();
     464:	0e 94 c3 02 	call	0x586	; 0x586 <ADC_enuInit>
	
	ADC_enuEnableInterrupt();
     468:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <ADC_enuEnableInterrupt>
	ADC_enuCallBack(&LM35_inlvidReadADCValue, &LM35_u16ADCValue);
     46c:	6d e7       	ldi	r22, 0x7D	; 125
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	8b e0       	ldi	r24, 0x0B	; 11
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	0e 94 08 03 	call	0x610	; 0x610 <ADC_enuCallBack>
	
	GIE_enuGloable_Interrupt_Enable();
     478:	0e 94 ae 04 	call	0x95c	; 0x95c <GIE_enuGloable_Interrupt_Enable>
	
	u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35_NUM; Local_u8Iterrator++)
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	1b c0       	rjmp	.+54     	; 0x4b6 <Thermistor_LM35_enuInit+0x5e>
	{		
		if(Copy_PstrLM35Config[Local_u8Iterrator].LM35_POS_CHANNEL != NOT_CONNECTED)
     480:	c1 2f       	mov	r28, r17
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	cc 0f       	add	r28, r28
     486:	dd 1f       	adc	r29, r29
     488:	ce 0d       	add	r28, r14
     48a:	df 1d       	adc	r29, r15
     48c:	68 81       	ld	r22, Y
     48e:	62 33       	cpi	r22, 0x32	; 50
     490:	39 f0       	breq	.+14     	; 0x4a0 <Thermistor_LM35_enuInit+0x48>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35Config[Local_u8Iterrator].LM35_POS_CHANNEL, DIO_u8INPUT);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35Config[Local_u8Iterrator].LM35_POS_CHANNEL);
     49a:	88 81       	ld	r24, Y
     49c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ADC_enuSelectChannel>
		}
			
		if(Copy_PstrLM35Config[Local_u8Iterrator].LM35_NEG_CHANNEL != NOT_CONNECTED)
     4a0:	69 81       	ldd	r22, Y+1	; 0x01
     4a2:	62 33       	cpi	r22, 0x32	; 50
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <Thermistor_LM35_enuInit+0x5c>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35Config[Local_u8Iterrator].LM35_NEG_CHANNEL, DIO_u8INPUT);
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35Config[Local_u8Iterrator].LM35_NEG_CHANNEL);
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ADC_enuSelectChannel>
	ADC_enuCallBack(&LM35_inlvidReadADCValue, &LM35_u16ADCValue);
	
	GIE_enuGloable_Interrupt_Enable();
	
	u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35_NUM; Local_u8Iterrator++)
     4b4:	1f 5f       	subi	r17, 0xFF	; 255
     4b6:	11 23       	and	r17, r17
     4b8:	19 f3       	breq	.-58     	; 0x480 <Thermistor_LM35_enuInit+0x28>
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35Config[Local_u8Iterrator].LM35_NEG_CHANNEL, DIO_u8INPUT);
			ADC_enuSelectChannel(Copy_PstrLM35Config[Local_u8Iterrator].LM35_NEG_CHANNEL);
		}
	}
	
	ADC_enuEnable();
     4ba:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ADC_enuEnable>
	return Local_enuErrorState;
}
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <Thermistor_LM35_enuGetTempVal>:

ES_t Thermistor_LM35_enuGetTempVal(u8 Copy_u8Thermistor_LM35_ID, u16 *Copy_Pf32TempValue)
{
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_Pf32TempValue != NULL)
     4d2:	61 15       	cp	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	89 f0       	breq	.+34     	; 0x4fa <Thermistor_LM35_enuGetTempVal+0x2e>
     4d8:	eb 01       	movw	r28, r22
	{
		Local_enuErrorState = ADC_enuStartConversion();
     4da:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_enuStartConversion>
     4de:	18 2f       	mov	r17, r24
		*Copy_Pf32TempValue = LM35_f32Tempeture;	
     4e0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <LM35_f32Tempeture>
     4e4:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <LM35_f32Tempeture+0x1>
     4e8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <LM35_f32Tempeture+0x2>
     4ec:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <LM35_f32Tempeture+0x3>
     4f0:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
     4f4:	79 83       	std	Y+1, r23	; 0x01
     4f6:	68 83       	st	Y, r22
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <Thermistor_LM35_enuGetTempVal+0x30>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     4fa:	12 e0       	ldi	r17, 0x02	; 2
	}
	
	return Local_enuErrorState;
     4fc:	81 2f       	mov	r24, r17
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	08 95       	ret

00000506 <main>:
#include <util/delay.h>

extern LM35_Configuration_t LM35_AstrLM35Config[LM35_NUM];

int main(void)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <main+0x6>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	LCD_enuInit();
     510:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_enuInit>
	LCD_enuSendCommand(LCD_DisplayOn_CursorOff_NoBlinking);
     514:	8c e0       	ldi	r24, 0x0C	; 12
     516:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_enuSendCommand>
	
	u16 Local_u16CurrentTempVal = 0;
     51a:	1a 82       	std	Y+2, r1	; 0x02
     51c:	19 82       	std	Y+1, r1	; 0x01
	u16 Local_u16PreviousTempVal = 0;
	
	Thermistor_LM35_enuInit(LM35_AstrLM35Config);
     51e:	80 e6       	ldi	r24, 0x60	; 96
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 2c 02 	call	0x458	; 0x458 <Thermistor_LM35_enuInit>
	
	LCD_enuWriteString("Temperature: ");
     526:	85 e6       	ldi	r24, 0x65	; 101
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_enuWriteString>
{
	LCD_enuInit();
	LCD_enuSendCommand(LCD_DisplayOn_CursorOff_NoBlinking);
	
	u16 Local_u16CurrentTempVal = 0;
	u16 Local_u16PreviousTempVal = 0;
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
	LCD_enuWriteString("Temperature: ");
	
    /* Replace with your application code */
    while (1) 
    {
		if(Local_u16PreviousTempVal == Local_u16CurrentTempVal)
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	08 17       	cp	r16, r24
     538:	19 07       	cpc	r17, r25
     53a:	39 f4       	brne	.+14     	; 0x54a <main+0x44>
		{
			Thermistor_LM35_enuGetTempVal(0,&Local_u16CurrentTempVal);
     53c:	be 01       	movw	r22, r28
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 66 02 	call	0x4cc	; 0x4cc <Thermistor_LM35_enuGetTempVal>
     548:	f4 cf       	rjmp	.-24     	; 0x532 <main+0x2c>
		}
		else
		{
			LCD_enuGoToPosition(0,13);
     54a:	6d e0       	ldi	r22, 0x0D	; 13
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuGoToPosition>
			LCD_enuWriteString("   ");
     552:	83 e7       	ldi	r24, 0x73	; 115
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_enuWriteString>
			LCD_enuGoToPosition(0,13);
     55a:	6d e0       	ldi	r22, 0x0D	; 13
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuGoToPosition>
			LCD_enuWriteIntNumber(Local_u16CurrentTempVal);
     562:	69 81       	ldd	r22, Y+1	; 0x01
     564:	7a 81       	ldd	r23, Y+2	; 0x02
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_enuWriteIntNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	2f e9       	ldi	r18, 0x9F	; 159
     570:	86 e8       	ldi	r24, 0x86	; 134
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x6e>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x78>
     57e:	00 00       	nop
			_delay_ms(500);
			Local_u16PreviousTempVal = Local_u16CurrentTempVal;
     580:	09 81       	ldd	r16, Y+1	; 0x01
     582:	1a 81       	ldd	r17, Y+2	; 0x02
     584:	d6 cf       	rjmp	.-84     	; 0x532 <main+0x2c>

00000586 <ADC_enuInit>:
	ES_t Local_enuErrorState = ES_NOK;
	
	ADCSRA &= ~(MASK_BIT << ADATE);
	
	return Local_enuErrorState;
}
     586:	87 b1       	in	r24, 0x07	; 7
     588:	8f 73       	andi	r24, 0x3F	; 63
     58a:	87 b9       	out	0x07, r24	; 7
     58c:	87 b1       	in	r24, 0x07	; 7
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	87 b9       	out	0x07, r24	; 7
     592:	87 b1       	in	r24, 0x07	; 7
     594:	8f 77       	andi	r24, 0x7F	; 127
     596:	87 b9       	out	0x07, r24	; 7
     598:	87 b1       	in	r24, 0x07	; 7
     59a:	8f 7d       	andi	r24, 0xDF	; 223
     59c:	87 b9       	out	0x07, r24	; 7
     59e:	87 b1       	in	r24, 0x07	; 7
     5a0:	8f 7d       	andi	r24, 0xDF	; 223
     5a2:	87 b9       	out	0x07, r24	; 7
     5a4:	86 b1       	in	r24, 0x06	; 6
     5a6:	88 7f       	andi	r24, 0xF8	; 248
     5a8:	86 b9       	out	0x06, r24	; 6
     5aa:	86 b1       	in	r24, 0x06	; 6
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	86 b9       	out	0x06, r24	; 6
     5b0:	86 b1       	in	r24, 0x06	; 6
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	86 b9       	out	0x06, r24	; 6
     5b6:	86 b1       	in	r24, 0x06	; 6
     5b8:	8b 7f       	andi	r24, 0xFB	; 251
     5ba:	86 b9       	out	0x06, r24	; 6
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	08 95       	ret

000005c0 <ADC_enuEnable>:
     5c0:	86 b1       	in	r24, 0x06	; 6
     5c2:	80 68       	ori	r24, 0x80	; 128
     5c4:	86 b9       	out	0x06, r24	; 6
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	08 95       	ret

000005ca <ADC_enuStartConversion>:
     5ca:	86 b1       	in	r24, 0x06	; 6
     5cc:	80 64       	ori	r24, 0x40	; 64
     5ce:	86 b9       	out	0x06, r24	; 6
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	08 95       	ret

000005d4 <ADC_enuSelectChannel>:
     5d4:	97 b1       	in	r25, 0x07	; 7
     5d6:	90 7e       	andi	r25, 0xE0	; 224
     5d8:	97 b9       	out	0x07, r25	; 7
     5da:	97 b1       	in	r25, 0x07	; 7
     5dc:	89 2b       	or	r24, r25
     5de:	87 b9       	out	0x07, r24	; 7
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret

000005e4 <ADC_enuEnableInterrupt>:
     5e4:	86 b1       	in	r24, 0x06	; 6
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	86 b9       	out	0x06, r24	; 6
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	08 95       	ret

000005ee <ADC_enuReadADCValue>:
     5ee:	fc 01       	movw	r30, r24
     5f0:	24 b1       	in	r18, 0x04	; 4
     5f2:	42 2f       	mov	r20, r18
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	51 83       	std	Z+1, r21	; 0x01
     5f8:	40 83       	st	Z, r20
     5fa:	95 b1       	in	r25, 0x05	; 5
     5fc:	29 2f       	mov	r18, r25
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	32 2f       	mov	r19, r18
     602:	22 27       	eor	r18, r18
     604:	24 2b       	or	r18, r20
     606:	35 2b       	or	r19, r21
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret

00000610 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_PFunc != NULL)
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	51 f0       	breq	.+20     	; 0x628 <ADC_enuCallBack+0x18>
	{
		ADC_PFuncISRFunc = Copy_PFunc;
     614:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <ADC_PFuncISRFunc+0x1>
     618:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ADC_PFuncISRFunc>
		ADC_PvidISRParameter = Copy_PvidAppParameter;
     61c:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <ADC_PvidISRParameter+0x1>
     620:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <ADC_PvidISRParameter>
	return Local_enuErrorState;
}

ES_t ADC_enuCallBack(volatile void (*Copy_PFunc)(void*), volatile void *Copy_PvidAppParameter)
{
	ES_t Local_enuErrorState = ES_NOK;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
		ADC_PFuncISRFunc = Copy_PFunc;
		ADC_PvidISRParameter = Copy_PvidAppParameter;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     628:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_enuErrorState;
}
     62a:	08 95       	ret

0000062c <__vector_16>:

ISR(VECT_ADC)
{
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	2f 93       	push	r18
     638:	3f 93       	push	r19
     63a:	4f 93       	push	r20
     63c:	5f 93       	push	r21
     63e:	6f 93       	push	r22
     640:	7f 93       	push	r23
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	ef 93       	push	r30
     64c:	ff 93       	push	r31
	if(ADC_PFuncISRFunc != NULL)
     64e:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ADC_PFuncISRFunc>
     652:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <ADC_PFuncISRFunc+0x1>
     656:	30 97       	sbiw	r30, 0x00	; 0
     658:	29 f0       	breq	.+10     	; 0x664 <__vector_16+0x38>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
     65a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ADC_PvidISRParameter>
     65e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <ADC_PvidISRParameter+0x1>
     662:	09 95       	icall
	}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	08 f0       	brcs	.+2      	; 0x68c <DIO_enuSetPinDirection+0x6>
     68a:	67 c0       	rjmp	.+206    	; 0x75a <DIO_enuSetPinDirection+0xd4>
     68c:	68 30       	cpi	r22, 0x08	; 8
     68e:	08 f0       	brcs	.+2      	; 0x692 <DIO_enuSetPinDirection+0xc>
     690:	66 c0       	rjmp	.+204    	; 0x75e <DIO_enuSetPinDirection+0xd8>
     692:	42 30       	cpi	r20, 0x02	; 2
     694:	08 f0       	brcs	.+2      	; 0x698 <DIO_enuSetPinDirection+0x12>
     696:	65 c0       	rjmp	.+202    	; 0x762 <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	e9 f0       	breq	.+58     	; 0x6d6 <DIO_enuSetPinDirection+0x50>
     69c:	30 f0       	brcs	.+12     	; 0x6aa <DIO_enuSetPinDirection+0x24>
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	81 f1       	breq	.+96     	; 0x702 <DIO_enuSetPinDirection+0x7c>
     6a2:	83 30       	cpi	r24, 0x03	; 3
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <DIO_enuSetPinDirection+0x22>
     6a6:	43 c0       	rjmp	.+134    	; 0x72e <DIO_enuSetPinDirection+0xa8>
     6a8:	5e c0       	rjmp	.+188    	; 0x766 <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	06 2e       	mov	r0, r22
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_enuSetPinDirection+0x30>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	0a 94       	dec	r0
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_enuSetPinDirection+0x2c>
     6ba:	80 95       	com	r24
     6bc:	2a b3       	in	r18, 0x1a	; 26
     6be:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
     6c0:	84 2f       	mov	r24, r20
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_enuSetPinDirection+0x44>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	6a 95       	dec	r22
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_enuSetPinDirection+0x40>
     6ce:	82 2b       	or	r24, r18
     6d0:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     6d4:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	06 2e       	mov	r0, r22
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_enuSetPinDirection+0x5c>
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	0a 94       	dec	r0
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_enuSetPinDirection+0x58>
     6e6:	20 95       	com	r18
     6e8:	87 b3       	in	r24, 0x17	; 23
     6ea:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
     6ec:	84 2f       	mov	r24, r20
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_enuSetPinDirection+0x70>
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	6a 95       	dec	r22
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_enuSetPinDirection+0x6c>
     6fa:	82 2b       	or	r24, r18
     6fc:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     700:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	06 2e       	mov	r0, r22
     708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_enuSetPinDirection+0x88>
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_enuSetPinDirection+0x84>
     712:	20 95       	com	r18
     714:	84 b3       	in	r24, 0x14	; 20
     716:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
     718:	84 2f       	mov	r24, r20
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_enuSetPinDirection+0x9c>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	6a 95       	dec	r22
     724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_enuSetPinDirection+0x98>
     726:	82 2b       	or	r24, r18
     728:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     72a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     72c:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	06 2e       	mov	r0, r22
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_enuSetPinDirection+0xb4>
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_enuSetPinDirection+0xb0>
     73e:	20 95       	com	r18
     740:	81 b3       	in	r24, 0x11	; 17
     742:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
     744:	84 2f       	mov	r24, r20
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_enuSetPinDirection+0xc8>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	6a 95       	dec	r22
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_enuSetPinDirection+0xc4>
     752:	82 2b       	or	r24, r18
     754:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
     756:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     758:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	08 95       	ret
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	08 95       	ret
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     766:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     768:	08 95       	ret

0000076a <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     76a:	84 30       	cpi	r24, 0x04	; 4
     76c:	08 f0       	brcs	.+2      	; 0x770 <DIO_enuSetPinVal+0x6>
     76e:	67 c0       	rjmp	.+206    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     770:	68 30       	cpi	r22, 0x08	; 8
     772:	08 f0       	brcs	.+2      	; 0x776 <DIO_enuSetPinVal+0xc>
     774:	66 c0       	rjmp	.+204    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     776:	42 30       	cpi	r20, 0x02	; 2
     778:	08 f0       	brcs	.+2      	; 0x77c <DIO_enuSetPinVal+0x12>
     77a:	65 c0       	rjmp	.+202    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	{
		switch(Copy_u8PortID)
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	e9 f0       	breq	.+58     	; 0x7ba <DIO_enuSetPinVal+0x50>
     780:	30 f0       	brcs	.+12     	; 0x78e <DIO_enuSetPinVal+0x24>
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	81 f1       	breq	.+96     	; 0x7e6 <DIO_enuSetPinVal+0x7c>
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	09 f4       	brne	.+2      	; 0x78c <DIO_enuSetPinVal+0x22>
     78a:	43 c0       	rjmp	.+134    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     78c:	5e c0       	rjmp	.+188    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	06 2e       	mov	r0, r22
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_enuSetPinVal+0x30>
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	0a 94       	dec	r0
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_enuSetPinVal+0x2c>
     79e:	80 95       	com	r24
     7a0:	2b b3       	in	r18, 0x1b	; 27
     7a2:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
     7a4:	84 2f       	mov	r24, r20
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_enuSetPinVal+0x44>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	6a 95       	dec	r22
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_enuSetPinVal+0x40>
     7b2:	82 2b       	or	r24, r18
     7b4:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     7b8:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	06 2e       	mov	r0, r22
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_enuSetPinVal+0x5c>
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_enuSetPinVal+0x58>
     7ca:	20 95       	com	r18
     7cc:	88 b3       	in	r24, 0x18	; 24
     7ce:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
     7d0:	84 2f       	mov	r24, r20
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_enuSetPinVal+0x70>
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	6a 95       	dec	r22
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_enuSetPinVal+0x6c>
     7de:	82 2b       	or	r24, r18
     7e0:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     7e4:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	06 2e       	mov	r0, r22
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_enuSetPinVal+0x88>
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	0a 94       	dec	r0
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_enuSetPinVal+0x84>
     7f6:	20 95       	com	r18
     7f8:	85 b3       	in	r24, 0x15	; 21
     7fa:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
     7fc:	84 2f       	mov	r24, r20
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	6a 95       	dec	r22
     808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	82 2b       	or	r24, r18
     80c:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     80e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     810:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	06 2e       	mov	r0, r22
     818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	0a 94       	dec	r0
     820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     822:	20 95       	com	r18
     824:	82 b3       	in	r24, 0x12	; 18
     826:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
     828:	84 2f       	mov	r24, r20
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	6a 95       	dec	r22
     834:	e2 f7       	brpl	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     836:	82 2b       	or	r24, r18
     838:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     83a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     83c:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	08 95       	ret
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	08 95       	ret
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     84c:	08 95       	ret

0000084e <__vector_1>:
	return Local_enuErrorState;
}

/* ISR for EXTI0 */
ISR(VECT_INT0)
{	
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI0] != NULL)
     870:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <EXTI_APFunc>
     874:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <EXTI_APFunc+0x1>
     878:	30 97       	sbiw	r30, 0x00	; 0
     87a:	29 f0       	breq	.+10     	; 0x886 <__stack+0x27>
	{
		EXTI_APFunc[EXTI0](EXTI_APvidGenericParameters[EXTI0]);
     87c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <EXTI_APvidGenericParameters>
     880:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <EXTI_APvidGenericParameters+0x1>
     884:	09 95       	icall
	}
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_2>:

/* ISR for EXTI1 */
ISR(VECT_INT1)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI1] != NULL)
     8ca:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <EXTI_APFunc+0x2>
     8ce:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <EXTI_APFunc+0x3>
     8d2:	30 97       	sbiw	r30, 0x00	; 0
     8d4:	29 f0       	breq	.+10     	; 0x8e0 <__vector_2+0x38>
	{
		EXTI_APFunc[EXTI1](EXTI_APvidGenericParameters[EXTI1]);
     8d6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <EXTI_APvidGenericParameters+0x2>
     8da:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <EXTI_APvidGenericParameters+0x3>
     8de:	09 95       	icall
	}
}
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <__vector_3>:

/* ISR for EXTI2 */
ISR(VECT_INT2)
{	
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	if(EXTI_APFunc[EXTI2] != NULL)
     924:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <EXTI_APFunc+0x4>
     928:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <EXTI_APFunc+0x5>
     92c:	30 97       	sbiw	r30, 0x00	; 0
     92e:	29 f0       	breq	.+10     	; 0x93a <__vector_3+0x38>
	{
		EXTI_APFunc[EXTI2](EXTI_APvidGenericParameters[EXTI2]);
     930:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <EXTI_APvidGenericParameters+0x4>
     934:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <EXTI_APvidGenericParameters+0x5>
     938:	09 95       	icall
	}
     93a:	ff 91       	pop	r31
     93c:	ef 91       	pop	r30
     93e:	bf 91       	pop	r27
     940:	af 91       	pop	r26
     942:	9f 91       	pop	r25
     944:	8f 91       	pop	r24
     946:	7f 91       	pop	r23
     948:	6f 91       	pop	r22
     94a:	5f 91       	pop	r21
     94c:	4f 91       	pop	r20
     94e:	3f 91       	pop	r19
     950:	2f 91       	pop	r18
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	1f 90       	pop	r1
     95a:	18 95       	reti

0000095c <GIE_enuGloable_Interrupt_Enable>:

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	SREG &= ~(MASK_BIT << GIE_I);
     95c:	8f b7       	in	r24, 0x3f	; 63
     95e:	8f 77       	andi	r24, 0x7F	; 127
     960:	8f bf       	out	0x3f, r24	; 63
	SREG |= (MASK_BIT << GIE_I);
     962:	8f b7       	in	r24, 0x3f	; 63
     964:	80 68       	ori	r24, 0x80	; 128
     966:	8f bf       	out	0x3f, r24	; 63
	Local_enuErrorState = ES_OK;
	
	return Local_enuErrorState;
}
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	08 95       	ret

0000096c <__divsf3>:
     96c:	0e 94 ca 04 	call	0x994	; 0x994 <__divsf3x>
     970:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>
     974:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_pscB>
     978:	58 f0       	brcs	.+22     	; 0x990 <__divsf3+0x24>
     97a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_pscA>
     97e:	40 f0       	brcs	.+16     	; 0x990 <__divsf3+0x24>
     980:	29 f4       	brne	.+10     	; 0x98c <__divsf3+0x20>
     982:	5f 3f       	cpi	r21, 0xFF	; 255
     984:	29 f0       	breq	.+10     	; 0x990 <__divsf3+0x24>
     986:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_inf>
     98a:	51 11       	cpse	r21, r1
     98c:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
     990:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>

00000994 <__divsf3x>:
     994:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_split3>
     998:	68 f3       	brcs	.-38     	; 0x974 <__divsf3+0x8>

0000099a <__divsf3_pse>:
     99a:	99 23       	and	r25, r25
     99c:	b1 f3       	breq	.-20     	; 0x98a <__divsf3+0x1e>
     99e:	55 23       	and	r21, r21
     9a0:	91 f3       	breq	.-28     	; 0x986 <__divsf3+0x1a>
     9a2:	95 1b       	sub	r25, r21
     9a4:	55 0b       	sbc	r21, r21
     9a6:	bb 27       	eor	r27, r27
     9a8:	aa 27       	eor	r26, r26
     9aa:	62 17       	cp	r22, r18
     9ac:	73 07       	cpc	r23, r19
     9ae:	84 07       	cpc	r24, r20
     9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__divsf3_pse+0x26>
     9b2:	9f 5f       	subi	r25, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	44 1f       	adc	r20, r20
     9bc:	aa 1f       	adc	r26, r26
     9be:	a9 f3       	breq	.-22     	; 0x9aa <__divsf3_pse+0x10>
     9c0:	35 d0       	rcall	.+106    	; 0xa2c <__divsf3_pse+0x92>
     9c2:	0e 2e       	mov	r0, r30
     9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x3a>
     9c6:	e0 e8       	ldi	r30, 0x80	; 128
     9c8:	32 d0       	rcall	.+100    	; 0xa2e <__divsf3_pse+0x94>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	50 40       	sbci	r21, 0x00	; 0
     9ce:	e6 95       	lsr	r30
     9d0:	00 1c       	adc	r0, r0
     9d2:	ca f7       	brpl	.-14     	; 0x9c6 <__divsf3_pse+0x2c>
     9d4:	2b d0       	rcall	.+86     	; 0xa2c <__divsf3_pse+0x92>
     9d6:	fe 2f       	mov	r31, r30
     9d8:	29 d0       	rcall	.+82     	; 0xa2c <__divsf3_pse+0x92>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	bb 1f       	adc	r27, r27
     9e2:	26 17       	cp	r18, r22
     9e4:	37 07       	cpc	r19, r23
     9e6:	48 07       	cpc	r20, r24
     9e8:	ab 07       	cpc	r26, r27
     9ea:	b0 e8       	ldi	r27, 0x80	; 128
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__divsf3_pse+0x56>
     9ee:	bb 0b       	sbc	r27, r27
     9f0:	80 2d       	mov	r24, r0
     9f2:	bf 01       	movw	r22, r30
     9f4:	ff 27       	eor	r31, r31
     9f6:	93 58       	subi	r25, 0x83	; 131
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	3a f0       	brmi	.+14     	; 0xa0a <__divsf3_pse+0x70>
     9fc:	9e 3f       	cpi	r25, 0xFE	; 254
     9fe:	51 05       	cpc	r21, r1
     a00:	78 f0       	brcs	.+30     	; 0xa20 <__divsf3_pse+0x86>
     a02:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_inf>
     a06:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
     a0a:	5f 3f       	cpi	r21, 0xFF	; 255
     a0c:	e4 f3       	brlt	.-8      	; 0xa06 <__divsf3_pse+0x6c>
     a0e:	98 3e       	cpi	r25, 0xE8	; 232
     a10:	d4 f3       	brlt	.-12     	; 0xa06 <__divsf3_pse+0x6c>
     a12:	86 95       	lsr	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	b7 95       	ror	r27
     a1a:	f7 95       	ror	r31
     a1c:	9f 5f       	subi	r25, 0xFF	; 255
     a1e:	c9 f7       	brne	.-14     	; 0xa12 <__divsf3_pse+0x78>
     a20:	88 0f       	add	r24, r24
     a22:	91 1d       	adc	r25, r1
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	97 f9       	bld	r25, 7
     a2a:	08 95       	ret
     a2c:	e1 e0       	ldi	r30, 0x01	; 1
     a2e:	66 0f       	add	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	88 1f       	adc	r24, r24
     a34:	bb 1f       	adc	r27, r27
     a36:	62 17       	cp	r22, r18
     a38:	73 07       	cpc	r23, r19
     a3a:	84 07       	cpc	r24, r20
     a3c:	ba 07       	cpc	r27, r26
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__divsf3_pse+0xae>
     a40:	62 1b       	sub	r22, r18
     a42:	73 0b       	sbc	r23, r19
     a44:	84 0b       	sbc	r24, r20
     a46:	ba 0b       	sbc	r27, r26
     a48:	ee 1f       	adc	r30, r30
     a4a:	88 f7       	brcc	.-30     	; 0xa2e <__divsf3_pse+0x94>
     a4c:	e0 95       	com	r30
     a4e:	08 95       	ret

00000a50 <__fixunssfsi>:
     a50:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_splitA>
     a54:	88 f0       	brcs	.+34     	; 0xa78 <__fixunssfsi+0x28>
     a56:	9f 57       	subi	r25, 0x7F	; 127
     a58:	98 f0       	brcs	.+38     	; 0xa80 <__fixunssfsi+0x30>
     a5a:	b9 2f       	mov	r27, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	b7 51       	subi	r27, 0x17	; 23
     a60:	b0 f0       	brcs	.+44     	; 0xa8e <__fixunssfsi+0x3e>
     a62:	e1 f0       	breq	.+56     	; 0xa9c <__fixunssfsi+0x4c>
     a64:	66 0f       	add	r22, r22
     a66:	77 1f       	adc	r23, r23
     a68:	88 1f       	adc	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	1a f0       	brmi	.+6      	; 0xa74 <__fixunssfsi+0x24>
     a6e:	ba 95       	dec	r27
     a70:	c9 f7       	brne	.-14     	; 0xa64 <__fixunssfsi+0x14>
     a72:	14 c0       	rjmp	.+40     	; 0xa9c <__fixunssfsi+0x4c>
     a74:	b1 30       	cpi	r27, 0x01	; 1
     a76:	91 f0       	breq	.+36     	; 0xa9c <__fixunssfsi+0x4c>
     a78:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_zero>
     a7c:	b1 e0       	ldi	r27, 0x01	; 1
     a7e:	08 95       	ret
     a80:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_zero>
     a84:	67 2f       	mov	r22, r23
     a86:	78 2f       	mov	r23, r24
     a88:	88 27       	eor	r24, r24
     a8a:	b8 5f       	subi	r27, 0xF8	; 248
     a8c:	39 f0       	breq	.+14     	; 0xa9c <__fixunssfsi+0x4c>
     a8e:	b9 3f       	cpi	r27, 0xF9	; 249
     a90:	cc f3       	brlt	.-14     	; 0xa84 <__fixunssfsi+0x34>
     a92:	86 95       	lsr	r24
     a94:	77 95       	ror	r23
     a96:	67 95       	ror	r22
     a98:	b3 95       	inc	r27
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <__fixunssfsi+0x42>
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__fixunssfsi+0x5c>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	08 95       	ret

00000aae <__floatunsisf>:
     aae:	e8 94       	clt
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__floatsisf+0x12>

00000ab2 <__floatsisf>:
     ab2:	97 fb       	bst	r25, 7
     ab4:	3e f4       	brtc	.+14     	; 0xac4 <__floatsisf+0x12>
     ab6:	90 95       	com	r25
     ab8:	80 95       	com	r24
     aba:	70 95       	com	r23
     abc:	61 95       	neg	r22
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	99 23       	and	r25, r25
     ac6:	a9 f0       	breq	.+42     	; 0xaf2 <__floatsisf+0x40>
     ac8:	f9 2f       	mov	r31, r25
     aca:	96 e9       	ldi	r25, 0x96	; 150
     acc:	bb 27       	eor	r27, r27
     ace:	93 95       	inc	r25
     ad0:	f6 95       	lsr	r31
     ad2:	87 95       	ror	r24
     ad4:	77 95       	ror	r23
     ad6:	67 95       	ror	r22
     ad8:	b7 95       	ror	r27
     ada:	f1 11       	cpse	r31, r1
     adc:	f8 cf       	rjmp	.-16     	; 0xace <__floatsisf+0x1c>
     ade:	fa f4       	brpl	.+62     	; 0xb1e <__floatsisf+0x6c>
     ae0:	bb 0f       	add	r27, r27
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__floatsisf+0x36>
     ae4:	60 ff       	sbrs	r22, 0
     ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__floatsisf+0x6c>
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	16 c0       	rjmp	.+44     	; 0xb1e <__floatsisf+0x6c>
     af2:	88 23       	and	r24, r24
     af4:	11 f0       	breq	.+4      	; 0xafa <__floatsisf+0x48>
     af6:	96 e9       	ldi	r25, 0x96	; 150
     af8:	11 c0       	rjmp	.+34     	; 0xb1c <__floatsisf+0x6a>
     afa:	77 23       	and	r23, r23
     afc:	21 f0       	breq	.+8      	; 0xb06 <__floatsisf+0x54>
     afe:	9e e8       	ldi	r25, 0x8E	; 142
     b00:	87 2f       	mov	r24, r23
     b02:	76 2f       	mov	r23, r22
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <__floatsisf+0x5e>
     b06:	66 23       	and	r22, r22
     b08:	71 f0       	breq	.+28     	; 0xb26 <__floatsisf+0x74>
     b0a:	96 e8       	ldi	r25, 0x86	; 134
     b0c:	86 2f       	mov	r24, r22
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	2a f0       	brmi	.+10     	; 0xb1e <__floatsisf+0x6c>
     b14:	9a 95       	dec	r25
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	88 1f       	adc	r24, r24
     b1c:	da f7       	brpl	.-10     	; 0xb14 <__floatsisf+0x62>
     b1e:	88 0f       	add	r24, r24
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	97 f9       	bld	r25, 7
     b26:	08 95       	ret

00000b28 <__fp_inf>:
     b28:	97 f9       	bld	r25, 7
     b2a:	9f 67       	ori	r25, 0x7F	; 127
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	08 95       	ret

00000b34 <__fp_nan>:
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	80 ec       	ldi	r24, 0xC0	; 192
     b38:	08 95       	ret

00000b3a <__fp_pscA>:
     b3a:	00 24       	eor	r0, r0
     b3c:	0a 94       	dec	r0
     b3e:	16 16       	cp	r1, r22
     b40:	17 06       	cpc	r1, r23
     b42:	18 06       	cpc	r1, r24
     b44:	09 06       	cpc	r0, r25
     b46:	08 95       	ret

00000b48 <__fp_pscB>:
     b48:	00 24       	eor	r0, r0
     b4a:	0a 94       	dec	r0
     b4c:	12 16       	cp	r1, r18
     b4e:	13 06       	cpc	r1, r19
     b50:	14 06       	cpc	r1, r20
     b52:	05 06       	cpc	r0, r21
     b54:	08 95       	ret

00000b56 <__fp_round>:
     b56:	09 2e       	mov	r0, r25
     b58:	03 94       	inc	r0
     b5a:	00 0c       	add	r0, r0
     b5c:	11 f4       	brne	.+4      	; 0xb62 <__fp_round+0xc>
     b5e:	88 23       	and	r24, r24
     b60:	52 f0       	brmi	.+20     	; 0xb76 <__fp_round+0x20>
     b62:	bb 0f       	add	r27, r27
     b64:	40 f4       	brcc	.+16     	; 0xb76 <__fp_round+0x20>
     b66:	bf 2b       	or	r27, r31
     b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_round+0x18>
     b6a:	60 ff       	sbrs	r22, 0
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__fp_round+0x20>
     b6e:	6f 5f       	subi	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	08 95       	ret

00000b78 <__fp_split3>:
     b78:	57 fd       	sbrc	r21, 7
     b7a:	90 58       	subi	r25, 0x80	; 128
     b7c:	44 0f       	add	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	59 f0       	breq	.+22     	; 0xb98 <__fp_splitA+0x10>
     b82:	5f 3f       	cpi	r21, 0xFF	; 255
     b84:	71 f0       	breq	.+28     	; 0xba2 <__fp_splitA+0x1a>
     b86:	47 95       	ror	r20

00000b88 <__fp_splitA>:
     b88:	88 0f       	add	r24, r24
     b8a:	97 fb       	bst	r25, 7
     b8c:	99 1f       	adc	r25, r25
     b8e:	61 f0       	breq	.+24     	; 0xba8 <__fp_splitA+0x20>
     b90:	9f 3f       	cpi	r25, 0xFF	; 255
     b92:	79 f0       	breq	.+30     	; 0xbb2 <__fp_splitA+0x2a>
     b94:	87 95       	ror	r24
     b96:	08 95       	ret
     b98:	12 16       	cp	r1, r18
     b9a:	13 06       	cpc	r1, r19
     b9c:	14 06       	cpc	r1, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	f2 cf       	rjmp	.-28     	; 0xb86 <__fp_split3+0xe>
     ba2:	46 95       	lsr	r20
     ba4:	f1 df       	rcall	.-30     	; 0xb88 <__fp_splitA>
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <__fp_splitA+0x30>
     ba8:	16 16       	cp	r1, r22
     baa:	17 06       	cpc	r1, r23
     bac:	18 06       	cpc	r1, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	f1 cf       	rjmp	.-30     	; 0xb94 <__fp_splitA+0xc>
     bb2:	86 95       	lsr	r24
     bb4:	71 05       	cpc	r23, r1
     bb6:	61 05       	cpc	r22, r1
     bb8:	08 94       	sec
     bba:	08 95       	ret

00000bbc <__fp_zero>:
     bbc:	e8 94       	clt

00000bbe <__fp_szero>:
     bbe:	bb 27       	eor	r27, r27
     bc0:	66 27       	eor	r22, r22
     bc2:	77 27       	eor	r23, r23
     bc4:	cb 01       	movw	r24, r22
     bc6:	97 f9       	bld	r25, 7
     bc8:	08 95       	ret

00000bca <__mulsf3>:
     bca:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3x>
     bce:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>
     bd2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_pscA>
     bd6:	38 f0       	brcs	.+14     	; 0xbe6 <__mulsf3+0x1c>
     bd8:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_pscB>
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__mulsf3+0x1c>
     bde:	95 23       	and	r25, r21
     be0:	11 f0       	breq	.+4      	; 0xbe6 <__mulsf3+0x1c>
     be2:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_inf>
     be6:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>
     bea:	11 24       	eor	r1, r1
     bec:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>

00000bf0 <__mulsf3x>:
     bf0:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_split3>
     bf4:	70 f3       	brcs	.-36     	; 0xbd2 <__mulsf3+0x8>

00000bf6 <__mulsf3_pse>:
     bf6:	95 9f       	mul	r25, r21
     bf8:	c1 f3       	breq	.-16     	; 0xbea <__mulsf3+0x20>
     bfa:	95 0f       	add	r25, r21
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	55 1f       	adc	r21, r21
     c00:	62 9f       	mul	r22, r18
     c02:	f0 01       	movw	r30, r0
     c04:	72 9f       	mul	r23, r18
     c06:	bb 27       	eor	r27, r27
     c08:	f0 0d       	add	r31, r0
     c0a:	b1 1d       	adc	r27, r1
     c0c:	63 9f       	mul	r22, r19
     c0e:	aa 27       	eor	r26, r26
     c10:	f0 0d       	add	r31, r0
     c12:	b1 1d       	adc	r27, r1
     c14:	aa 1f       	adc	r26, r26
     c16:	64 9f       	mul	r22, r20
     c18:	66 27       	eor	r22, r22
     c1a:	b0 0d       	add	r27, r0
     c1c:	a1 1d       	adc	r26, r1
     c1e:	66 1f       	adc	r22, r22
     c20:	82 9f       	mul	r24, r18
     c22:	22 27       	eor	r18, r18
     c24:	b0 0d       	add	r27, r0
     c26:	a1 1d       	adc	r26, r1
     c28:	62 1f       	adc	r22, r18
     c2a:	73 9f       	mul	r23, r19
     c2c:	b0 0d       	add	r27, r0
     c2e:	a1 1d       	adc	r26, r1
     c30:	62 1f       	adc	r22, r18
     c32:	83 9f       	mul	r24, r19
     c34:	a0 0d       	add	r26, r0
     c36:	61 1d       	adc	r22, r1
     c38:	22 1f       	adc	r18, r18
     c3a:	74 9f       	mul	r23, r20
     c3c:	33 27       	eor	r19, r19
     c3e:	a0 0d       	add	r26, r0
     c40:	61 1d       	adc	r22, r1
     c42:	23 1f       	adc	r18, r19
     c44:	84 9f       	mul	r24, r20
     c46:	60 0d       	add	r22, r0
     c48:	21 1d       	adc	r18, r1
     c4a:	82 2f       	mov	r24, r18
     c4c:	76 2f       	mov	r23, r22
     c4e:	6a 2f       	mov	r22, r26
     c50:	11 24       	eor	r1, r1
     c52:	9f 57       	subi	r25, 0x7F	; 127
     c54:	50 40       	sbci	r21, 0x00	; 0
     c56:	9a f0       	brmi	.+38     	; 0xc7e <__mulsf3_pse+0x88>
     c58:	f1 f0       	breq	.+60     	; 0xc96 <__mulsf3_pse+0xa0>
     c5a:	88 23       	and	r24, r24
     c5c:	4a f0       	brmi	.+18     	; 0xc70 <__mulsf3_pse+0x7a>
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	bb 1f       	adc	r27, r27
     c64:	66 1f       	adc	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	88 1f       	adc	r24, r24
     c6a:	91 50       	subi	r25, 0x01	; 1
     c6c:	50 40       	sbci	r21, 0x00	; 0
     c6e:	a9 f7       	brne	.-22     	; 0xc5a <__mulsf3_pse+0x64>
     c70:	9e 3f       	cpi	r25, 0xFE	; 254
     c72:	51 05       	cpc	r21, r1
     c74:	80 f0       	brcs	.+32     	; 0xc96 <__mulsf3_pse+0xa0>
     c76:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_inf>
     c7a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
     c7e:	5f 3f       	cpi	r21, 0xFF	; 255
     c80:	e4 f3       	brlt	.-8      	; 0xc7a <__mulsf3_pse+0x84>
     c82:	98 3e       	cpi	r25, 0xE8	; 232
     c84:	d4 f3       	brlt	.-12     	; 0xc7a <__mulsf3_pse+0x84>
     c86:	86 95       	lsr	r24
     c88:	77 95       	ror	r23
     c8a:	67 95       	ror	r22
     c8c:	b7 95       	ror	r27
     c8e:	f7 95       	ror	r31
     c90:	e7 95       	ror	r30
     c92:	9f 5f       	subi	r25, 0xFF	; 255
     c94:	c1 f7       	brne	.-16     	; 0xc86 <__mulsf3_pse+0x90>
     c96:	fe 2b       	or	r31, r30
     c98:	88 0f       	add	r24, r24
     c9a:	91 1d       	adc	r25, r1
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	97 f9       	bld	r25, 7
     ca2:	08 95       	ret

00000ca4 <__umulhisi3>:
     ca4:	a2 9f       	mul	r26, r18
     ca6:	b0 01       	movw	r22, r0
     ca8:	b3 9f       	mul	r27, r19
     caa:	c0 01       	movw	r24, r0
     cac:	a3 9f       	mul	r26, r19
     cae:	70 0d       	add	r23, r0
     cb0:	81 1d       	adc	r24, r1
     cb2:	11 24       	eor	r1, r1
     cb4:	91 1d       	adc	r25, r1
     cb6:	b2 9f       	mul	r27, r18
     cb8:	70 0d       	add	r23, r0
     cba:	81 1d       	adc	r24, r1
     cbc:	11 24       	eor	r1, r1
     cbe:	91 1d       	adc	r25, r1
     cc0:	08 95       	ret

00000cc2 <sprintf>:
     cc2:	ae e0       	ldi	r26, 0x0E	; 14
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e6       	ldi	r30, 0x67	; 103
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__prologue_saves__+0x1c>
     cce:	0d 89       	ldd	r16, Y+21	; 0x15
     cd0:	1e 89       	ldd	r17, Y+22	; 0x16
     cd2:	86 e0       	ldi	r24, 0x06	; 6
     cd4:	8c 83       	std	Y+4, r24	; 0x04
     cd6:	1a 83       	std	Y+2, r17	; 0x02
     cd8:	09 83       	std	Y+1, r16	; 0x01
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	9f e7       	ldi	r25, 0x7F	; 127
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	ae 01       	movw	r20, r28
     ce4:	47 5e       	subi	r20, 0xE7	; 231
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	6f 89       	ldd	r22, Y+23	; 0x17
     cea:	78 8d       	ldd	r23, Y+24	; 0x18
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 83 06 	call	0xd06	; 0xd06 <vfprintf>
     cf4:	ef 81       	ldd	r30, Y+7	; 0x07
     cf6:	f8 85       	ldd	r31, Y+8	; 0x08
     cf8:	e0 0f       	add	r30, r16
     cfa:	f1 1f       	adc	r31, r17
     cfc:	10 82       	st	Z, r1
     cfe:	2e 96       	adiw	r28, 0x0e	; 14
     d00:	e4 e0       	ldi	r30, 0x04	; 4
     d02:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__epilogue_restores__+0x1c>

00000d06 <vfprintf>:
     d06:	ab e0       	ldi	r26, 0x0B	; 11
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e9 e8       	ldi	r30, 0x89	; 137
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__prologue_saves__>
     d12:	6c 01       	movw	r12, r24
     d14:	7b 01       	movw	r14, r22
     d16:	8a 01       	movw	r16, r20
     d18:	fc 01       	movw	r30, r24
     d1a:	17 82       	std	Z+7, r1	; 0x07
     d1c:	16 82       	std	Z+6, r1	; 0x06
     d1e:	83 81       	ldd	r24, Z+3	; 0x03
     d20:	81 ff       	sbrs	r24, 1
     d22:	cc c1       	rjmp	.+920    	; 0x10bc <vfprintf+0x3b6>
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	3c 01       	movw	r6, r24
     d2a:	f6 01       	movw	r30, r12
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	f7 01       	movw	r30, r14
     d30:	93 fd       	sbrc	r25, 3
     d32:	85 91       	lpm	r24, Z+
     d34:	93 ff       	sbrs	r25, 3
     d36:	81 91       	ld	r24, Z+
     d38:	7f 01       	movw	r14, r30
     d3a:	88 23       	and	r24, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <vfprintf+0x3a>
     d3e:	ba c1       	rjmp	.+884    	; 0x10b4 <vfprintf+0x3ae>
     d40:	85 32       	cpi	r24, 0x25	; 37
     d42:	39 f4       	brne	.+14     	; 0xd52 <vfprintf+0x4c>
     d44:	93 fd       	sbrc	r25, 3
     d46:	85 91       	lpm	r24, Z+
     d48:	93 ff       	sbrs	r25, 3
     d4a:	81 91       	ld	r24, Z+
     d4c:	7f 01       	movw	r14, r30
     d4e:	85 32       	cpi	r24, 0x25	; 37
     d50:	29 f4       	brne	.+10     	; 0xd5c <vfprintf+0x56>
     d52:	b6 01       	movw	r22, r12
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     d5a:	e7 cf       	rjmp	.-50     	; 0xd2a <vfprintf+0x24>
     d5c:	91 2c       	mov	r9, r1
     d5e:	21 2c       	mov	r2, r1
     d60:	31 2c       	mov	r3, r1
     d62:	ff e1       	ldi	r31, 0x1F	; 31
     d64:	f3 15       	cp	r31, r3
     d66:	d8 f0       	brcs	.+54     	; 0xd9e <vfprintf+0x98>
     d68:	8b 32       	cpi	r24, 0x2B	; 43
     d6a:	79 f0       	breq	.+30     	; 0xd8a <vfprintf+0x84>
     d6c:	38 f4       	brcc	.+14     	; 0xd7c <vfprintf+0x76>
     d6e:	80 32       	cpi	r24, 0x20	; 32
     d70:	79 f0       	breq	.+30     	; 0xd90 <vfprintf+0x8a>
     d72:	83 32       	cpi	r24, 0x23	; 35
     d74:	a1 f4       	brne	.+40     	; 0xd9e <vfprintf+0x98>
     d76:	23 2d       	mov	r18, r3
     d78:	20 61       	ori	r18, 0x10	; 16
     d7a:	1d c0       	rjmp	.+58     	; 0xdb6 <vfprintf+0xb0>
     d7c:	8d 32       	cpi	r24, 0x2D	; 45
     d7e:	61 f0       	breq	.+24     	; 0xd98 <vfprintf+0x92>
     d80:	80 33       	cpi	r24, 0x30	; 48
     d82:	69 f4       	brne	.+26     	; 0xd9e <vfprintf+0x98>
     d84:	23 2d       	mov	r18, r3
     d86:	21 60       	ori	r18, 0x01	; 1
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <vfprintf+0xb0>
     d8a:	83 2d       	mov	r24, r3
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	38 2e       	mov	r3, r24
     d90:	e3 2d       	mov	r30, r3
     d92:	e4 60       	ori	r30, 0x04	; 4
     d94:	3e 2e       	mov	r3, r30
     d96:	2a c0       	rjmp	.+84     	; 0xdec <vfprintf+0xe6>
     d98:	f3 2d       	mov	r31, r3
     d9a:	f8 60       	ori	r31, 0x08	; 8
     d9c:	1d c0       	rjmp	.+58     	; 0xdd8 <vfprintf+0xd2>
     d9e:	37 fc       	sbrc	r3, 7
     da0:	2d c0       	rjmp	.+90     	; 0xdfc <vfprintf+0xf6>
     da2:	20 ed       	ldi	r18, 0xD0	; 208
     da4:	28 0f       	add	r18, r24
     da6:	2a 30       	cpi	r18, 0x0A	; 10
     da8:	40 f0       	brcs	.+16     	; 0xdba <vfprintf+0xb4>
     daa:	8e 32       	cpi	r24, 0x2E	; 46
     dac:	b9 f4       	brne	.+46     	; 0xddc <vfprintf+0xd6>
     dae:	36 fc       	sbrc	r3, 6
     db0:	81 c1       	rjmp	.+770    	; 0x10b4 <vfprintf+0x3ae>
     db2:	23 2d       	mov	r18, r3
     db4:	20 64       	ori	r18, 0x40	; 64
     db6:	32 2e       	mov	r3, r18
     db8:	19 c0       	rjmp	.+50     	; 0xdec <vfprintf+0xe6>
     dba:	36 fe       	sbrs	r3, 6
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0xc4>
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	98 9e       	mul	r9, r24
     dc2:	20 0d       	add	r18, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	92 2e       	mov	r9, r18
     dc8:	11 c0       	rjmp	.+34     	; 0xdec <vfprintf+0xe6>
     dca:	ea e0       	ldi	r30, 0x0A	; 10
     dcc:	2e 9e       	mul	r2, r30
     dce:	20 0d       	add	r18, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	22 2e       	mov	r2, r18
     dd4:	f3 2d       	mov	r31, r3
     dd6:	f0 62       	ori	r31, 0x20	; 32
     dd8:	3f 2e       	mov	r3, r31
     dda:	08 c0       	rjmp	.+16     	; 0xdec <vfprintf+0xe6>
     ddc:	8c 36       	cpi	r24, 0x6C	; 108
     dde:	21 f4       	brne	.+8      	; 0xde8 <vfprintf+0xe2>
     de0:	83 2d       	mov	r24, r3
     de2:	80 68       	ori	r24, 0x80	; 128
     de4:	38 2e       	mov	r3, r24
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0xe6>
     de8:	88 36       	cpi	r24, 0x68	; 104
     dea:	41 f4       	brne	.+16     	; 0xdfc <vfprintf+0xf6>
     dec:	f7 01       	movw	r30, r14
     dee:	93 fd       	sbrc	r25, 3
     df0:	85 91       	lpm	r24, Z+
     df2:	93 ff       	sbrs	r25, 3
     df4:	81 91       	ld	r24, Z+
     df6:	7f 01       	movw	r14, r30
     df8:	81 11       	cpse	r24, r1
     dfa:	b3 cf       	rjmp	.-154    	; 0xd62 <vfprintf+0x5c>
     dfc:	98 2f       	mov	r25, r24
     dfe:	9f 7d       	andi	r25, 0xDF	; 223
     e00:	95 54       	subi	r25, 0x45	; 69
     e02:	93 30       	cpi	r25, 0x03	; 3
     e04:	28 f4       	brcc	.+10     	; 0xe10 <vfprintf+0x10a>
     e06:	0c 5f       	subi	r16, 0xFC	; 252
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	9f e3       	ldi	r25, 0x3F	; 63
     e0c:	99 83       	std	Y+1, r25	; 0x01
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x124>
     e10:	83 36       	cpi	r24, 0x63	; 99
     e12:	31 f0       	breq	.+12     	; 0xe20 <vfprintf+0x11a>
     e14:	83 37       	cpi	r24, 0x73	; 115
     e16:	71 f0       	breq	.+28     	; 0xe34 <vfprintf+0x12e>
     e18:	83 35       	cpi	r24, 0x53	; 83
     e1a:	09 f0       	breq	.+2      	; 0xe1e <vfprintf+0x118>
     e1c:	59 c0       	rjmp	.+178    	; 0xed0 <vfprintf+0x1ca>
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <vfprintf+0x15c>
     e20:	f8 01       	movw	r30, r16
     e22:	80 81       	ld	r24, Z
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	0e 5f       	subi	r16, 0xFE	; 254
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	88 24       	eor	r8, r8
     e2c:	83 94       	inc	r8
     e2e:	91 2c       	mov	r9, r1
     e30:	53 01       	movw	r10, r6
     e32:	13 c0       	rjmp	.+38     	; 0xe5a <vfprintf+0x154>
     e34:	28 01       	movw	r4, r16
     e36:	f2 e0       	ldi	r31, 0x02	; 2
     e38:	4f 0e       	add	r4, r31
     e3a:	51 1c       	adc	r5, r1
     e3c:	f8 01       	movw	r30, r16
     e3e:	a0 80       	ld	r10, Z
     e40:	b1 80       	ldd	r11, Z+1	; 0x01
     e42:	36 fe       	sbrs	r3, 6
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <vfprintf+0x146>
     e46:	69 2d       	mov	r22, r9
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x14a>
     e4c:	6f ef       	ldi	r22, 0xFF	; 255
     e4e:	7f ef       	ldi	r23, 0xFF	; 255
     e50:	c5 01       	movw	r24, r10
     e52:	0e 94 6f 08 	call	0x10de	; 0x10de <strnlen>
     e56:	4c 01       	movw	r8, r24
     e58:	82 01       	movw	r16, r4
     e5a:	f3 2d       	mov	r31, r3
     e5c:	ff 77       	andi	r31, 0x7F	; 127
     e5e:	3f 2e       	mov	r3, r31
     e60:	16 c0       	rjmp	.+44     	; 0xe8e <vfprintf+0x188>
     e62:	28 01       	movw	r4, r16
     e64:	22 e0       	ldi	r18, 0x02	; 2
     e66:	42 0e       	add	r4, r18
     e68:	51 1c       	adc	r5, r1
     e6a:	f8 01       	movw	r30, r16
     e6c:	a0 80       	ld	r10, Z
     e6e:	b1 80       	ldd	r11, Z+1	; 0x01
     e70:	36 fe       	sbrs	r3, 6
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <vfprintf+0x174>
     e74:	69 2d       	mov	r22, r9
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <vfprintf+0x178>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	c5 01       	movw	r24, r10
     e80:	0e 94 64 08 	call	0x10c8	; 0x10c8 <strnlen_P>
     e84:	4c 01       	movw	r8, r24
     e86:	f3 2d       	mov	r31, r3
     e88:	f0 68       	ori	r31, 0x80	; 128
     e8a:	3f 2e       	mov	r3, r31
     e8c:	82 01       	movw	r16, r4
     e8e:	33 fc       	sbrc	r3, 3
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <vfprintf+0x1c2>
     e92:	82 2d       	mov	r24, r2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	88 16       	cp	r8, r24
     e98:	99 06       	cpc	r9, r25
     e9a:	b0 f4       	brcc	.+44     	; 0xec8 <vfprintf+0x1c2>
     e9c:	b6 01       	movw	r22, r12
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     ea6:	2a 94       	dec	r2
     ea8:	f4 cf       	rjmp	.-24     	; 0xe92 <vfprintf+0x18c>
     eaa:	f5 01       	movw	r30, r10
     eac:	37 fc       	sbrc	r3, 7
     eae:	85 91       	lpm	r24, Z+
     eb0:	37 fe       	sbrs	r3, 7
     eb2:	81 91       	ld	r24, Z+
     eb4:	5f 01       	movw	r10, r30
     eb6:	b6 01       	movw	r22, r12
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     ebe:	21 10       	cpse	r2, r1
     ec0:	2a 94       	dec	r2
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	82 1a       	sub	r8, r18
     ec6:	91 08       	sbc	r9, r1
     ec8:	81 14       	cp	r8, r1
     eca:	91 04       	cpc	r9, r1
     ecc:	71 f7       	brne	.-36     	; 0xeaa <vfprintf+0x1a4>
     ece:	e8 c0       	rjmp	.+464    	; 0x10a0 <vfprintf+0x39a>
     ed0:	84 36       	cpi	r24, 0x64	; 100
     ed2:	11 f0       	breq	.+4      	; 0xed8 <vfprintf+0x1d2>
     ed4:	89 36       	cpi	r24, 0x69	; 105
     ed6:	41 f5       	brne	.+80     	; 0xf28 <vfprintf+0x222>
     ed8:	f8 01       	movw	r30, r16
     eda:	37 fe       	sbrs	r3, 7
     edc:	07 c0       	rjmp	.+14     	; 0xeec <vfprintf+0x1e6>
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	0c 5f       	subi	r16, 0xFC	; 252
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	08 c0       	rjmp	.+16     	; 0xefc <vfprintf+0x1f6>
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	07 2e       	mov	r0, r23
     ef2:	00 0c       	add	r0, r0
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25
     ef8:	0e 5f       	subi	r16, 0xFE	; 254
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	f3 2d       	mov	r31, r3
     efe:	ff 76       	andi	r31, 0x6F	; 111
     f00:	3f 2e       	mov	r3, r31
     f02:	97 ff       	sbrs	r25, 7
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <vfprintf+0x212>
     f06:	90 95       	com	r25
     f08:	80 95       	com	r24
     f0a:	70 95       	com	r23
     f0c:	61 95       	neg	r22
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	f0 68       	ori	r31, 0x80	; 128
     f16:	3f 2e       	mov	r3, r31
     f18:	2a e0       	ldi	r18, 0x0A	; 10
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	a3 01       	movw	r20, r6
     f1e:	0e 94 b6 08 	call	0x116c	; 0x116c <__ultoa_invert>
     f22:	88 2e       	mov	r8, r24
     f24:	86 18       	sub	r8, r6
     f26:	45 c0       	rjmp	.+138    	; 0xfb2 <vfprintf+0x2ac>
     f28:	85 37       	cpi	r24, 0x75	; 117
     f2a:	31 f4       	brne	.+12     	; 0xf38 <vfprintf+0x232>
     f2c:	23 2d       	mov	r18, r3
     f2e:	2f 7e       	andi	r18, 0xEF	; 239
     f30:	b2 2e       	mov	r11, r18
     f32:	2a e0       	ldi	r18, 0x0A	; 10
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	25 c0       	rjmp	.+74     	; 0xf82 <vfprintf+0x27c>
     f38:	93 2d       	mov	r25, r3
     f3a:	99 7f       	andi	r25, 0xF9	; 249
     f3c:	b9 2e       	mov	r11, r25
     f3e:	8f 36       	cpi	r24, 0x6F	; 111
     f40:	c1 f0       	breq	.+48     	; 0xf72 <vfprintf+0x26c>
     f42:	18 f4       	brcc	.+6      	; 0xf4a <vfprintf+0x244>
     f44:	88 35       	cpi	r24, 0x58	; 88
     f46:	79 f0       	breq	.+30     	; 0xf66 <vfprintf+0x260>
     f48:	b5 c0       	rjmp	.+362    	; 0x10b4 <vfprintf+0x3ae>
     f4a:	80 37       	cpi	r24, 0x70	; 112
     f4c:	19 f0       	breq	.+6      	; 0xf54 <vfprintf+0x24e>
     f4e:	88 37       	cpi	r24, 0x78	; 120
     f50:	21 f0       	breq	.+8      	; 0xf5a <vfprintf+0x254>
     f52:	b0 c0       	rjmp	.+352    	; 0x10b4 <vfprintf+0x3ae>
     f54:	e9 2f       	mov	r30, r25
     f56:	e0 61       	ori	r30, 0x10	; 16
     f58:	be 2e       	mov	r11, r30
     f5a:	b4 fe       	sbrs	r11, 4
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <vfprintf+0x272>
     f5e:	fb 2d       	mov	r31, r11
     f60:	f4 60       	ori	r31, 0x04	; 4
     f62:	bf 2e       	mov	r11, r31
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <vfprintf+0x272>
     f66:	34 fe       	sbrs	r3, 4
     f68:	0a c0       	rjmp	.+20     	; 0xf7e <vfprintf+0x278>
     f6a:	29 2f       	mov	r18, r25
     f6c:	26 60       	ori	r18, 0x06	; 6
     f6e:	b2 2e       	mov	r11, r18
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <vfprintf+0x278>
     f72:	28 e0       	ldi	r18, 0x08	; 8
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <vfprintf+0x27c>
     f78:	20 e1       	ldi	r18, 0x10	; 16
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x27c>
     f7e:	20 e1       	ldi	r18, 0x10	; 16
     f80:	32 e0       	ldi	r19, 0x02	; 2
     f82:	f8 01       	movw	r30, r16
     f84:	b7 fe       	sbrs	r11, 7
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <vfprintf+0x290>
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	0c 5f       	subi	r16, 0xFC	; 252
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <vfprintf+0x29c>
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 5f       	subi	r16, 0xFE	; 254
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	a3 01       	movw	r20, r6
     fa4:	0e 94 b6 08 	call	0x116c	; 0x116c <__ultoa_invert>
     fa8:	88 2e       	mov	r8, r24
     faa:	86 18       	sub	r8, r6
     fac:	fb 2d       	mov	r31, r11
     fae:	ff 77       	andi	r31, 0x7F	; 127
     fb0:	3f 2e       	mov	r3, r31
     fb2:	36 fe       	sbrs	r3, 6
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <vfprintf+0x2ca>
     fb6:	23 2d       	mov	r18, r3
     fb8:	2e 7f       	andi	r18, 0xFE	; 254
     fba:	a2 2e       	mov	r10, r18
     fbc:	89 14       	cp	r8, r9
     fbe:	58 f4       	brcc	.+22     	; 0xfd6 <vfprintf+0x2d0>
     fc0:	34 fe       	sbrs	r3, 4
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <vfprintf+0x2d4>
     fc4:	32 fc       	sbrc	r3, 2
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <vfprintf+0x2d4>
     fc8:	83 2d       	mov	r24, r3
     fca:	8e 7e       	andi	r24, 0xEE	; 238
     fcc:	a8 2e       	mov	r10, r24
     fce:	05 c0       	rjmp	.+10     	; 0xfda <vfprintf+0x2d4>
     fd0:	b8 2c       	mov	r11, r8
     fd2:	a3 2c       	mov	r10, r3
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <vfprintf+0x2d6>
     fd6:	b8 2c       	mov	r11, r8
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <vfprintf+0x2d6>
     fda:	b9 2c       	mov	r11, r9
     fdc:	a4 fe       	sbrs	r10, 4
     fde:	0f c0       	rjmp	.+30     	; 0xffe <vfprintf+0x2f8>
     fe0:	fe 01       	movw	r30, r28
     fe2:	e8 0d       	add	r30, r8
     fe4:	f1 1d       	adc	r31, r1
     fe6:	80 81       	ld	r24, Z
     fe8:	80 33       	cpi	r24, 0x30	; 48
     fea:	21 f4       	brne	.+8      	; 0xff4 <vfprintf+0x2ee>
     fec:	9a 2d       	mov	r25, r10
     fee:	99 7e       	andi	r25, 0xE9	; 233
     ff0:	a9 2e       	mov	r10, r25
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <vfprintf+0x300>
     ff4:	a2 fe       	sbrs	r10, 2
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x2fe>
     ff8:	b3 94       	inc	r11
     ffa:	b3 94       	inc	r11
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <vfprintf+0x300>
     ffe:	8a 2d       	mov	r24, r10
    1000:	86 78       	andi	r24, 0x86	; 134
    1002:	09 f0       	breq	.+2      	; 0x1006 <vfprintf+0x300>
    1004:	b3 94       	inc	r11
    1006:	a3 fc       	sbrc	r10, 3
    1008:	11 c0       	rjmp	.+34     	; 0x102c <vfprintf+0x326>
    100a:	a0 fe       	sbrs	r10, 0
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x314>
    100e:	b2 14       	cp	r11, r2
    1010:	88 f4       	brcc	.+34     	; 0x1034 <vfprintf+0x32e>
    1012:	28 0c       	add	r2, r8
    1014:	92 2c       	mov	r9, r2
    1016:	9b 18       	sub	r9, r11
    1018:	0e c0       	rjmp	.+28     	; 0x1036 <vfprintf+0x330>
    101a:	b2 14       	cp	r11, r2
    101c:	60 f4       	brcc	.+24     	; 0x1036 <vfprintf+0x330>
    101e:	b6 01       	movw	r22, r12
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    1028:	b3 94       	inc	r11
    102a:	f7 cf       	rjmp	.-18     	; 0x101a <vfprintf+0x314>
    102c:	b2 14       	cp	r11, r2
    102e:	18 f4       	brcc	.+6      	; 0x1036 <vfprintf+0x330>
    1030:	2b 18       	sub	r2, r11
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x332>
    1034:	98 2c       	mov	r9, r8
    1036:	21 2c       	mov	r2, r1
    1038:	a4 fe       	sbrs	r10, 4
    103a:	10 c0       	rjmp	.+32     	; 0x105c <vfprintf+0x356>
    103c:	b6 01       	movw	r22, r12
    103e:	80 e3       	ldi	r24, 0x30	; 48
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    1046:	a2 fe       	sbrs	r10, 2
    1048:	17 c0       	rjmp	.+46     	; 0x1078 <vfprintf+0x372>
    104a:	a1 fc       	sbrc	r10, 1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfprintf+0x34e>
    104e:	88 e7       	ldi	r24, 0x78	; 120
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0x352>
    1054:	88 e5       	ldi	r24, 0x58	; 88
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	b6 01       	movw	r22, r12
    105a:	0c c0       	rjmp	.+24     	; 0x1074 <vfprintf+0x36e>
    105c:	8a 2d       	mov	r24, r10
    105e:	86 78       	andi	r24, 0x86	; 134
    1060:	59 f0       	breq	.+22     	; 0x1078 <vfprintf+0x372>
    1062:	a1 fe       	sbrs	r10, 1
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x364>
    1066:	8b e2       	ldi	r24, 0x2B	; 43
    1068:	01 c0       	rjmp	.+2      	; 0x106c <vfprintf+0x366>
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	a7 fc       	sbrc	r10, 7
    106e:	8d e2       	ldi	r24, 0x2D	; 45
    1070:	b6 01       	movw	r22, r12
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    1078:	89 14       	cp	r8, r9
    107a:	38 f4       	brcc	.+14     	; 0x108a <vfprintf+0x384>
    107c:	b6 01       	movw	r22, r12
    107e:	80 e3       	ldi	r24, 0x30	; 48
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    1086:	9a 94       	dec	r9
    1088:	f7 cf       	rjmp	.-18     	; 0x1078 <vfprintf+0x372>
    108a:	8a 94       	dec	r8
    108c:	f3 01       	movw	r30, r6
    108e:	e8 0d       	add	r30, r8
    1090:	f1 1d       	adc	r31, r1
    1092:	80 81       	ld	r24, Z
    1094:	b6 01       	movw	r22, r12
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    109c:	81 10       	cpse	r8, r1
    109e:	f5 cf       	rjmp	.-22     	; 0x108a <vfprintf+0x384>
    10a0:	22 20       	and	r2, r2
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <vfprintf+0x3a0>
    10a4:	42 ce       	rjmp	.-892    	; 0xd2a <vfprintf+0x24>
    10a6:	b6 01       	movw	r22, r12
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    10b0:	2a 94       	dec	r2
    10b2:	f6 cf       	rjmp	.-20     	; 0x10a0 <vfprintf+0x39a>
    10b4:	f6 01       	movw	r30, r12
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0x3ba>
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	2b 96       	adiw	r28, 0x0b	; 11
    10c2:	e2 e1       	ldi	r30, 0x12	; 18
    10c4:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__epilogue_restores__>

000010c8 <strnlen_P>:
    10c8:	fc 01       	movw	r30, r24
    10ca:	05 90       	lpm	r0, Z+
    10cc:	61 50       	subi	r22, 0x01	; 1
    10ce:	70 40       	sbci	r23, 0x00	; 0
    10d0:	01 10       	cpse	r0, r1
    10d2:	d8 f7       	brcc	.-10     	; 0x10ca <strnlen_P+0x2>
    10d4:	80 95       	com	r24
    10d6:	90 95       	com	r25
    10d8:	8e 0f       	add	r24, r30
    10da:	9f 1f       	adc	r25, r31
    10dc:	08 95       	ret

000010de <strnlen>:
    10de:	fc 01       	movw	r30, r24
    10e0:	61 50       	subi	r22, 0x01	; 1
    10e2:	70 40       	sbci	r23, 0x00	; 0
    10e4:	01 90       	ld	r0, Z+
    10e6:	01 10       	cpse	r0, r1
    10e8:	d8 f7       	brcc	.-10     	; 0x10e0 <strnlen+0x2>
    10ea:	80 95       	com	r24
    10ec:	90 95       	com	r25
    10ee:	8e 0f       	add	r24, r30
    10f0:	9f 1f       	adc	r25, r31
    10f2:	08 95       	ret

000010f4 <fputc>:
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	fb 01       	movw	r30, r22
    10fe:	23 81       	ldd	r18, Z+3	; 0x03
    1100:	21 fd       	sbrc	r18, 1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <fputc+0x16>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	2c c0       	rjmp	.+88     	; 0x1162 <fputc+0x6e>
    110a:	22 ff       	sbrs	r18, 2
    110c:	16 c0       	rjmp	.+44     	; 0x113a <fputc+0x46>
    110e:	46 81       	ldd	r20, Z+6	; 0x06
    1110:	57 81       	ldd	r21, Z+7	; 0x07
    1112:	24 81       	ldd	r18, Z+4	; 0x04
    1114:	35 81       	ldd	r19, Z+5	; 0x05
    1116:	42 17       	cp	r20, r18
    1118:	53 07       	cpc	r21, r19
    111a:	44 f4       	brge	.+16     	; 0x112c <fputc+0x38>
    111c:	a0 81       	ld	r26, Z
    111e:	b1 81       	ldd	r27, Z+1	; 0x01
    1120:	9d 01       	movw	r18, r26
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	31 83       	std	Z+1, r19	; 0x01
    1128:	20 83       	st	Z, r18
    112a:	8c 93       	st	X, r24
    112c:	26 81       	ldd	r18, Z+6	; 0x06
    112e:	37 81       	ldd	r19, Z+7	; 0x07
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	37 83       	std	Z+7, r19	; 0x07
    1136:	26 83       	std	Z+6, r18	; 0x06
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <fputc+0x6e>
    113a:	8b 01       	movw	r16, r22
    113c:	ec 01       	movw	r28, r24
    113e:	fb 01       	movw	r30, r22
    1140:	00 84       	ldd	r0, Z+8	; 0x08
    1142:	f1 85       	ldd	r31, Z+9	; 0x09
    1144:	e0 2d       	mov	r30, r0
    1146:	09 95       	icall
    1148:	89 2b       	or	r24, r25
    114a:	e1 f6       	brne	.-72     	; 0x1104 <fputc+0x10>
    114c:	d8 01       	movw	r26, r16
    114e:	16 96       	adiw	r26, 0x06	; 6
    1150:	8d 91       	ld	r24, X+
    1152:	9c 91       	ld	r25, X
    1154:	17 97       	sbiw	r26, 0x07	; 7
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	17 96       	adiw	r26, 0x07	; 7
    115a:	9c 93       	st	X, r25
    115c:	8e 93       	st	-X, r24
    115e:	16 97       	sbiw	r26, 0x06	; 6
    1160:	ce 01       	movw	r24, r28
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <__ultoa_invert>:
    116c:	fa 01       	movw	r30, r20
    116e:	aa 27       	eor	r26, r26
    1170:	28 30       	cpi	r18, 0x08	; 8
    1172:	51 f1       	breq	.+84     	; 0x11c8 <__ultoa_invert+0x5c>
    1174:	20 31       	cpi	r18, 0x10	; 16
    1176:	81 f1       	breq	.+96     	; 0x11d8 <__ultoa_invert+0x6c>
    1178:	e8 94       	clt
    117a:	6f 93       	push	r22
    117c:	6e 7f       	andi	r22, 0xFE	; 254
    117e:	6e 5f       	subi	r22, 0xFE	; 254
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	af 4f       	sbci	r26, 0xFF	; 255
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	3e d0       	rcall	.+124    	; 0x1208 <__ultoa_invert+0x9c>
    118c:	b4 e0       	ldi	r27, 0x04	; 4
    118e:	3c d0       	rcall	.+120    	; 0x1208 <__ultoa_invert+0x9c>
    1190:	67 0f       	add	r22, r23
    1192:	78 1f       	adc	r23, r24
    1194:	89 1f       	adc	r24, r25
    1196:	9a 1f       	adc	r25, r26
    1198:	a1 1d       	adc	r26, r1
    119a:	68 0f       	add	r22, r24
    119c:	79 1f       	adc	r23, r25
    119e:	8a 1f       	adc	r24, r26
    11a0:	91 1d       	adc	r25, r1
    11a2:	a1 1d       	adc	r26, r1
    11a4:	6a 0f       	add	r22, r26
    11a6:	71 1d       	adc	r23, r1
    11a8:	81 1d       	adc	r24, r1
    11aa:	91 1d       	adc	r25, r1
    11ac:	a1 1d       	adc	r26, r1
    11ae:	20 d0       	rcall	.+64     	; 0x11f0 <__ultoa_invert+0x84>
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <__ultoa_invert+0x48>
    11b2:	68 94       	set
    11b4:	3f 91       	pop	r19
    11b6:	2a e0       	ldi	r18, 0x0A	; 10
    11b8:	26 9f       	mul	r18, r22
    11ba:	11 24       	eor	r1, r1
    11bc:	30 19       	sub	r19, r0
    11be:	30 5d       	subi	r19, 0xD0	; 208
    11c0:	31 93       	st	Z+, r19
    11c2:	de f6       	brtc	.-74     	; 0x117a <__ultoa_invert+0xe>
    11c4:	cf 01       	movw	r24, r30
    11c6:	08 95       	ret
    11c8:	46 2f       	mov	r20, r22
    11ca:	47 70       	andi	r20, 0x07	; 7
    11cc:	40 5d       	subi	r20, 0xD0	; 208
    11ce:	41 93       	st	Z+, r20
    11d0:	b3 e0       	ldi	r27, 0x03	; 3
    11d2:	0f d0       	rcall	.+30     	; 0x11f2 <__ultoa_invert+0x86>
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__ultoa_invert+0x5c>
    11d6:	f6 cf       	rjmp	.-20     	; 0x11c4 <__ultoa_invert+0x58>
    11d8:	46 2f       	mov	r20, r22
    11da:	4f 70       	andi	r20, 0x0F	; 15
    11dc:	40 5d       	subi	r20, 0xD0	; 208
    11de:	4a 33       	cpi	r20, 0x3A	; 58
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <__ultoa_invert+0x7c>
    11e2:	49 5d       	subi	r20, 0xD9	; 217
    11e4:	31 fd       	sbrc	r19, 1
    11e6:	40 52       	subi	r20, 0x20	; 32
    11e8:	41 93       	st	Z+, r20
    11ea:	02 d0       	rcall	.+4      	; 0x11f0 <__ultoa_invert+0x84>
    11ec:	a9 f7       	brne	.-22     	; 0x11d8 <__ultoa_invert+0x6c>
    11ee:	ea cf       	rjmp	.-44     	; 0x11c4 <__ultoa_invert+0x58>
    11f0:	b4 e0       	ldi	r27, 0x04	; 4
    11f2:	a6 95       	lsr	r26
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	ba 95       	dec	r27
    11fe:	c9 f7       	brne	.-14     	; 0x11f2 <__ultoa_invert+0x86>
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	61 05       	cpc	r22, r1
    1204:	71 05       	cpc	r23, r1
    1206:	08 95       	ret
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	0a 2e       	mov	r0, r26
    120e:	06 94       	lsr	r0
    1210:	57 95       	ror	r21
    1212:	47 95       	ror	r20
    1214:	37 95       	ror	r19
    1216:	27 95       	ror	r18
    1218:	ba 95       	dec	r27
    121a:	c9 f7       	brne	.-14     	; 0x120e <__ultoa_invert+0xa2>
    121c:	62 0f       	add	r22, r18
    121e:	73 1f       	adc	r23, r19
    1220:	84 1f       	adc	r24, r20
    1222:	95 1f       	adc	r25, r21
    1224:	a0 1d       	adc	r26, r0
    1226:	08 95       	ret

00001228 <__prologue_saves__>:
    1228:	2f 92       	push	r2
    122a:	3f 92       	push	r3
    122c:	4f 92       	push	r4
    122e:	5f 92       	push	r5
    1230:	6f 92       	push	r6
    1232:	7f 92       	push	r7
    1234:	8f 92       	push	r8
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	ca 1b       	sub	r28, r26
    1252:	db 0b       	sbc	r29, r27
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	09 94       	ijmp

00001260 <__epilogue_restores__>:
    1260:	2a 88       	ldd	r2, Y+18	; 0x12
    1262:	39 88       	ldd	r3, Y+17	; 0x11
    1264:	48 88       	ldd	r4, Y+16	; 0x10
    1266:	5f 84       	ldd	r5, Y+15	; 0x0f
    1268:	6e 84       	ldd	r6, Y+14	; 0x0e
    126a:	7d 84       	ldd	r7, Y+13	; 0x0d
    126c:	8c 84       	ldd	r8, Y+12	; 0x0c
    126e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1270:	aa 84       	ldd	r10, Y+10	; 0x0a
    1272:	b9 84       	ldd	r11, Y+9	; 0x09
    1274:	c8 84       	ldd	r12, Y+8	; 0x08
    1276:	df 80       	ldd	r13, Y+7	; 0x07
    1278:	ee 80       	ldd	r14, Y+6	; 0x06
    127a:	fd 80       	ldd	r15, Y+5	; 0x05
    127c:	0c 81       	ldd	r16, Y+4	; 0x04
    127e:	1b 81       	ldd	r17, Y+3	; 0x03
    1280:	aa 81       	ldd	r26, Y+2	; 0x02
    1282:	b9 81       	ldd	r27, Y+1	; 0x01
    1284:	ce 0f       	add	r28, r30
    1286:	d1 1d       	adc	r29, r1
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	ed 01       	movw	r28, r26
    1294:	08 95       	ret

00001296 <_exit>:
    1296:	f8 94       	cli

00001298 <__stop_program>:
    1298:	ff cf       	rjmp	.-2      	; 0x1298 <__stop_program>
